
RTOSDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000acc4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040acc4  0040acc4  0001acc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  0040accc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000bc38  204009b8  0040b684  000209b8  2**2
                  ALLOC
  4 .stack        00002000  2040c5f0  004172bc  000209b8  2**0
                  ALLOC
  5 .heap         00001000  2040e5f0  004192bc  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001f9b4  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003180  00000000  00000000  000403f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000052d9  00000000  00000000  00043573  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a30  00000000  00000000  0004884c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f0  00000000  00000000  0004927c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c1f2  00000000  00000000  00049b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000169cd  00000000  00000000  00055d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000875cb  00000000  00000000  0006c72b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003c70  00000000  00000000  000f3cf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 e5 40 20 c5 34 40 00 71 35 40 00 71 35 40 00     ..@ .4@.q5@.q5@.
  400010:	71 35 40 00 71 35 40 00 71 35 40 00 00 00 00 00     q5@.q5@.q5@.....
	...
  40002c:	e1 03 40 00 71 35 40 00 00 00 00 00 21 06 40 00     ..@.q5@.....!.@.
  40003c:	89 06 40 00 71 35 40 00 71 35 40 00 71 35 40 00     ..@.q5@.q5@.q5@.
  40004c:	71 35 40 00 71 35 40 00 71 35 40 00 71 35 40 00     q5@.q5@.q5@.q5@.
  40005c:	71 35 40 00 71 35 40 00 00 00 00 00 71 35 40 00     q5@.q5@.....q5@.
  40006c:	71 35 40 00 71 35 40 00 71 35 40 00 71 35 40 00     q5@.q5@.q5@.q5@.
  40007c:	71 35 40 00 71 35 40 00 71 35 40 00 71 35 40 00     q5@.q5@.q5@.q5@.
  40008c:	71 35 40 00 71 35 40 00 71 35 40 00 71 35 40 00     q5@.q5@.q5@.q5@.
  40009c:	e9 33 40 00 4d 34 40 00 71 35 40 00 71 35 40 00     .3@.M4@.q5@.q5@.
  4000ac:	71 35 40 00 71 35 40 00 71 35 40 00 71 35 40 00     q5@.q5@.q5@.q5@.
  4000bc:	71 35 40 00 71 35 40 00 71 35 40 00 71 35 40 00     q5@.q5@.q5@.q5@.
  4000cc:	71 35 40 00 71 35 40 00 71 35 40 00 71 35 40 00     q5@.q5@.q5@.q5@.
  4000dc:	71 35 40 00 71 35 40 00 71 35 40 00 71 35 40 00     q5@.q5@.q5@.q5@.
  4000ec:	71 35 40 00 71 35 40 00 71 35 40 00 71 35 40 00     q5@.q5@.q5@.q5@.
  4000fc:	71 35 40 00 71 35 40 00 71 35 40 00 71 35 40 00     q5@.q5@.q5@.q5@.
  40010c:	71 35 40 00 71 35 40 00 71 35 40 00 00 00 00 00     q5@.q5@.q5@.....
  40011c:	00 00 00 00 71 35 40 00 71 35 40 00 71 35 40 00     ....q5@.q5@.q5@.
  40012c:	71 35 40 00 71 35 40 00 00 00 00 00 71 35 40 00     q5@.q5@.....q5@.
  40013c:	71 35 40 00                                         q5@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	0040accc 	.word	0x0040accc

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040accc 	.word	0x0040accc
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	0040accc 	.word	0x0040accc
  4001a8:	00000000 	.word	0x00000000

004001ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	f103 0208 	add.w	r2, r3, #8
  4001ba:	687b      	ldr	r3, [r7, #4]
  4001bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4001be:	687b      	ldr	r3, [r7, #4]
  4001c0:	f04f 32ff 	mov.w	r2, #4294967295
  4001c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001c6:	687b      	ldr	r3, [r7, #4]
  4001c8:	f103 0208 	add.w	r2, r3, #8
  4001cc:	687b      	ldr	r3, [r7, #4]
  4001ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001d0:	687b      	ldr	r3, [r7, #4]
  4001d2:	f103 0208 	add.w	r2, r3, #8
  4001d6:	687b      	ldr	r3, [r7, #4]
  4001d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4001da:	687b      	ldr	r3, [r7, #4]
  4001dc:	2200      	movs	r2, #0
  4001de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
  4001e0:	bf00      	nop
  4001e2:	370c      	adds	r7, #12
  4001e4:	46bd      	mov	sp, r7
  4001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001ea:	4770      	bx	lr

004001ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
  4001ec:	b480      	push	{r7}
  4001ee:	b083      	sub	sp, #12
  4001f0:	af00      	add	r7, sp, #0
  4001f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4001f4:	687b      	ldr	r3, [r7, #4]
  4001f6:	2200      	movs	r2, #0
  4001f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
  4001fa:	bf00      	nop
  4001fc:	370c      	adds	r7, #12
  4001fe:	46bd      	mov	sp, r7
  400200:	f85d 7b04 	ldr.w	r7, [sp], #4
  400204:	4770      	bx	lr

00400206 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400206:	b480      	push	{r7}
  400208:	b085      	sub	sp, #20
  40020a:	af00      	add	r7, sp, #0
  40020c:	6078      	str	r0, [r7, #4]
  40020e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
  400210:	687b      	ldr	r3, [r7, #4]
  400212:	685b      	ldr	r3, [r3, #4]
  400214:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400216:	683b      	ldr	r3, [r7, #0]
  400218:	68fa      	ldr	r2, [r7, #12]
  40021a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  40021c:	68fb      	ldr	r3, [r7, #12]
  40021e:	689a      	ldr	r2, [r3, #8]
  400220:	683b      	ldr	r3, [r7, #0]
  400222:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400224:	68fb      	ldr	r3, [r7, #12]
  400226:	689b      	ldr	r3, [r3, #8]
  400228:	683a      	ldr	r2, [r7, #0]
  40022a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40022c:	68fb      	ldr	r3, [r7, #12]
  40022e:	683a      	ldr	r2, [r7, #0]
  400230:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400232:	683b      	ldr	r3, [r7, #0]
  400234:	687a      	ldr	r2, [r7, #4]
  400236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  400238:	687b      	ldr	r3, [r7, #4]
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	1c5a      	adds	r2, r3, #1
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	601a      	str	r2, [r3, #0]
}
  400242:	bf00      	nop
  400244:	3714      	adds	r7, #20
  400246:	46bd      	mov	sp, r7
  400248:	f85d 7b04 	ldr.w	r7, [sp], #4
  40024c:	4770      	bx	lr

0040024e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40024e:	b480      	push	{r7}
  400250:	b085      	sub	sp, #20
  400252:	af00      	add	r7, sp, #0
  400254:	6078      	str	r0, [r7, #4]
  400256:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400258:	683b      	ldr	r3, [r7, #0]
  40025a:	681b      	ldr	r3, [r3, #0]
  40025c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40025e:	68bb      	ldr	r3, [r7, #8]
  400260:	f1b3 3fff 	cmp.w	r3, #4294967295
  400264:	d103      	bne.n	40026e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400266:	687b      	ldr	r3, [r7, #4]
  400268:	691b      	ldr	r3, [r3, #16]
  40026a:	60fb      	str	r3, [r7, #12]
  40026c:	e00c      	b.n	400288 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40026e:	687b      	ldr	r3, [r7, #4]
  400270:	3308      	adds	r3, #8
  400272:	60fb      	str	r3, [r7, #12]
  400274:	e002      	b.n	40027c <vListInsert+0x2e>
  400276:	68fb      	ldr	r3, [r7, #12]
  400278:	685b      	ldr	r3, [r3, #4]
  40027a:	60fb      	str	r3, [r7, #12]
  40027c:	68fb      	ldr	r3, [r7, #12]
  40027e:	685b      	ldr	r3, [r3, #4]
  400280:	681a      	ldr	r2, [r3, #0]
  400282:	68bb      	ldr	r3, [r7, #8]
  400284:	429a      	cmp	r2, r3
  400286:	d9f6      	bls.n	400276 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400288:	68fb      	ldr	r3, [r7, #12]
  40028a:	685a      	ldr	r2, [r3, #4]
  40028c:	683b      	ldr	r3, [r7, #0]
  40028e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400290:	683b      	ldr	r3, [r7, #0]
  400292:	685b      	ldr	r3, [r3, #4]
  400294:	683a      	ldr	r2, [r7, #0]
  400296:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400298:	683b      	ldr	r3, [r7, #0]
  40029a:	68fa      	ldr	r2, [r7, #12]
  40029c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
  40029e:	68fb      	ldr	r3, [r7, #12]
  4002a0:	683a      	ldr	r2, [r7, #0]
  4002a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4002a4:	683b      	ldr	r3, [r7, #0]
  4002a6:	687a      	ldr	r2, [r7, #4]
  4002a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4002aa:	687b      	ldr	r3, [r7, #4]
  4002ac:	681b      	ldr	r3, [r3, #0]
  4002ae:	1c5a      	adds	r2, r3, #1
  4002b0:	687b      	ldr	r3, [r7, #4]
  4002b2:	601a      	str	r2, [r3, #0]
}
  4002b4:	bf00      	nop
  4002b6:	3714      	adds	r7, #20
  4002b8:	46bd      	mov	sp, r7
  4002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002be:	4770      	bx	lr

004002c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
  4002c0:	b480      	push	{r7}
  4002c2:	b085      	sub	sp, #20
  4002c4:	af00      	add	r7, sp, #0
  4002c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4002c8:	687b      	ldr	r3, [r7, #4]
  4002ca:	691b      	ldr	r3, [r3, #16]
  4002cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4002ce:	687b      	ldr	r3, [r7, #4]
  4002d0:	685b      	ldr	r3, [r3, #4]
  4002d2:	687a      	ldr	r2, [r7, #4]
  4002d4:	6892      	ldr	r2, [r2, #8]
  4002d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4002d8:	687b      	ldr	r3, [r7, #4]
  4002da:	689b      	ldr	r3, [r3, #8]
  4002dc:	687a      	ldr	r2, [r7, #4]
  4002de:	6852      	ldr	r2, [r2, #4]
  4002e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4002e2:	68fb      	ldr	r3, [r7, #12]
  4002e4:	685a      	ldr	r2, [r3, #4]
  4002e6:	687b      	ldr	r3, [r7, #4]
  4002e8:	429a      	cmp	r2, r3
  4002ea:	d103      	bne.n	4002f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4002ec:	687b      	ldr	r3, [r7, #4]
  4002ee:	689a      	ldr	r2, [r3, #8]
  4002f0:	68fb      	ldr	r3, [r7, #12]
  4002f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4002f4:	687b      	ldr	r3, [r7, #4]
  4002f6:	2200      	movs	r2, #0
  4002f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  4002fa:	68fb      	ldr	r3, [r7, #12]
  4002fc:	681b      	ldr	r3, [r3, #0]
  4002fe:	1e5a      	subs	r2, r3, #1
  400300:	68fb      	ldr	r3, [r7, #12]
  400302:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400304:	68fb      	ldr	r3, [r7, #12]
  400306:	681b      	ldr	r3, [r3, #0]
}
  400308:	4618      	mov	r0, r3
  40030a:	3714      	adds	r7, #20
  40030c:	46bd      	mov	sp, r7
  40030e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400312:	4770      	bx	lr

00400314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
  400314:	b480      	push	{r7}
  400316:	b085      	sub	sp, #20
  400318:	af00      	add	r7, sp, #0
  40031a:	60f8      	str	r0, [r7, #12]
  40031c:	60b9      	str	r1, [r7, #8]
  40031e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
  400320:	68fb      	ldr	r3, [r7, #12]
  400322:	3b04      	subs	r3, #4
  400324:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400326:	68fb      	ldr	r3, [r7, #12]
  400328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40032c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40032e:	68fb      	ldr	r3, [r7, #12]
  400330:	3b04      	subs	r3, #4
  400332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  400334:	68bb      	ldr	r3, [r7, #8]
  400336:	f023 0201 	bic.w	r2, r3, #1
  40033a:	68fb      	ldr	r3, [r7, #12]
  40033c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40033e:	68fb      	ldr	r3, [r7, #12]
  400340:	3b04      	subs	r3, #4
  400342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400344:	4a0c      	ldr	r2, [pc, #48]	; (400378 <pxPortInitialiseStack+0x64>)
  400346:	68fb      	ldr	r3, [r7, #12]
  400348:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  40034a:	68fb      	ldr	r3, [r7, #12]
  40034c:	3b14      	subs	r3, #20
  40034e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400350:	687a      	ldr	r2, [r7, #4]
  400352:	68fb      	ldr	r3, [r7, #12]
  400354:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
  400356:	68fb      	ldr	r3, [r7, #12]
  400358:	3b04      	subs	r3, #4
  40035a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  40035c:	68fb      	ldr	r3, [r7, #12]
  40035e:	f06f 0202 	mvn.w	r2, #2
  400362:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  400364:	68fb      	ldr	r3, [r7, #12]
  400366:	3b20      	subs	r3, #32
  400368:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  40036a:	68fb      	ldr	r3, [r7, #12]
}
  40036c:	4618      	mov	r0, r3
  40036e:	3714      	adds	r7, #20
  400370:	46bd      	mov	sp, r7
  400372:	f85d 7b04 	ldr.w	r7, [sp], #4
  400376:	4770      	bx	lr
  400378:	0040037d 	.word	0x0040037d

0040037c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  40037c:	b480      	push	{r7}
  40037e:	b085      	sub	sp, #20
  400380:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
  400382:	2300      	movs	r3, #0
  400384:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400386:	4b13      	ldr	r3, [pc, #76]	; (4003d4 <prvTaskExitError+0x58>)
  400388:	681b      	ldr	r3, [r3, #0]
  40038a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40038e:	d00b      	beq.n	4003a8 <prvTaskExitError+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400390:	f04f 0380 	mov.w	r3, #128	; 0x80
  400394:	b672      	cpsid	i
  400396:	f383 8811 	msr	BASEPRI, r3
  40039a:	f3bf 8f6f 	isb	sy
  40039e:	f3bf 8f4f 	dsb	sy
  4003a2:	b662      	cpsie	i
  4003a4:	60fb      	str	r3, [r7, #12]
  4003a6:	e7fe      	b.n	4003a6 <prvTaskExitError+0x2a>
  4003a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4003ac:	b672      	cpsid	i
  4003ae:	f383 8811 	msr	BASEPRI, r3
  4003b2:	f3bf 8f6f 	isb	sy
  4003b6:	f3bf 8f4f 	dsb	sy
  4003ba:	b662      	cpsie	i
  4003bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  4003be:	bf00      	nop
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	2b00      	cmp	r3, #0
  4003c4:	d0fc      	beq.n	4003c0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  4003c6:	bf00      	nop
  4003c8:	3714      	adds	r7, #20
  4003ca:	46bd      	mov	sp, r7
  4003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003d0:	4770      	bx	lr
  4003d2:	bf00      	nop
  4003d4:	20400000 	.word	0x20400000
	...

004003e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  4003e0:	4b07      	ldr	r3, [pc, #28]	; (400400 <pxCurrentTCBConst2>)
  4003e2:	6819      	ldr	r1, [r3, #0]
  4003e4:	6808      	ldr	r0, [r1, #0]
  4003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003ea:	f380 8809 	msr	PSP, r0
  4003ee:	f3bf 8f6f 	isb	sy
  4003f2:	f04f 0000 	mov.w	r0, #0
  4003f6:	f380 8811 	msr	BASEPRI, r0
  4003fa:	4770      	bx	lr
  4003fc:	f3af 8000 	nop.w

00400400 <pxCurrentTCBConst2>:
  400400:	2040c208 	.word	0x2040c208
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
  400404:	bf00      	nop
  400406:	bf00      	nop

00400408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  400408:	4808      	ldr	r0, [pc, #32]	; (40042c <prvPortStartFirstTask+0x24>)
  40040a:	6800      	ldr	r0, [r0, #0]
  40040c:	6800      	ldr	r0, [r0, #0]
  40040e:	f380 8808 	msr	MSP, r0
  400412:	f04f 0000 	mov.w	r0, #0
  400416:	f380 8814 	msr	CONTROL, r0
  40041a:	b662      	cpsie	i
  40041c:	b661      	cpsie	f
  40041e:	f3bf 8f4f 	dsb	sy
  400422:	f3bf 8f6f 	isb	sy
  400426:	df00      	svc	0
  400428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
  40042a:	bf00      	nop
  40042c:	e000ed08 	.word	0xe000ed08

00400430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  400430:	b580      	push	{r7, lr}
  400432:	b086      	sub	sp, #24
  400434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
  400436:	4b3f      	ldr	r3, [pc, #252]	; (400534 <xPortStartScheduler+0x104>)
  400438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  40043a:	697b      	ldr	r3, [r7, #20]
  40043c:	781b      	ldrb	r3, [r3, #0]
  40043e:	b2db      	uxtb	r3, r3
  400440:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400442:	697b      	ldr	r3, [r7, #20]
  400444:	22ff      	movs	r2, #255	; 0xff
  400446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400448:	697b      	ldr	r3, [r7, #20]
  40044a:	781b      	ldrb	r3, [r3, #0]
  40044c:	b2db      	uxtb	r3, r3
  40044e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400450:	79fb      	ldrb	r3, [r7, #7]
  400452:	b2db      	uxtb	r3, r3
  400454:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400458:	b2da      	uxtb	r2, r3
  40045a:	4b37      	ldr	r3, [pc, #220]	; (400538 <xPortStartScheduler+0x108>)
  40045c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  40045e:	4b37      	ldr	r3, [pc, #220]	; (40053c <xPortStartScheduler+0x10c>)
  400460:	2207      	movs	r2, #7
  400462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400464:	e009      	b.n	40047a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
  400466:	4b35      	ldr	r3, [pc, #212]	; (40053c <xPortStartScheduler+0x10c>)
  400468:	681b      	ldr	r3, [r3, #0]
  40046a:	3b01      	subs	r3, #1
  40046c:	4a33      	ldr	r2, [pc, #204]	; (40053c <xPortStartScheduler+0x10c>)
  40046e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400470:	79fb      	ldrb	r3, [r7, #7]
  400472:	b2db      	uxtb	r3, r3
  400474:	005b      	lsls	r3, r3, #1
  400476:	b2db      	uxtb	r3, r3
  400478:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40047a:	79fb      	ldrb	r3, [r7, #7]
  40047c:	b2db      	uxtb	r3, r3
  40047e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400482:	2b80      	cmp	r3, #128	; 0x80
  400484:	d0ef      	beq.n	400466 <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  400486:	4b2d      	ldr	r3, [pc, #180]	; (40053c <xPortStartScheduler+0x10c>)
  400488:	681b      	ldr	r3, [r3, #0]
  40048a:	f1c3 0307 	rsb	r3, r3, #7
  40048e:	2b03      	cmp	r3, #3
  400490:	d00b      	beq.n	4004aa <xPortStartScheduler+0x7a>
  400492:	f04f 0380 	mov.w	r3, #128	; 0x80
  400496:	b672      	cpsid	i
  400498:	f383 8811 	msr	BASEPRI, r3
  40049c:	f3bf 8f6f 	isb	sy
  4004a0:	f3bf 8f4f 	dsb	sy
  4004a4:	b662      	cpsie	i
  4004a6:	613b      	str	r3, [r7, #16]
  4004a8:	e7fe      	b.n	4004a8 <xPortStartScheduler+0x78>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  4004aa:	4b24      	ldr	r3, [pc, #144]	; (40053c <xPortStartScheduler+0x10c>)
  4004ac:	681b      	ldr	r3, [r3, #0]
  4004ae:	f1c3 0307 	rsb	r3, r3, #7
  4004b2:	2b03      	cmp	r3, #3
  4004b4:	d00b      	beq.n	4004ce <xPortStartScheduler+0x9e>
  4004b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4004ba:	b672      	cpsid	i
  4004bc:	f383 8811 	msr	BASEPRI, r3
  4004c0:	f3bf 8f6f 	isb	sy
  4004c4:	f3bf 8f4f 	dsb	sy
  4004c8:	b662      	cpsie	i
  4004ca:	60fb      	str	r3, [r7, #12]
  4004cc:	e7fe      	b.n	4004cc <xPortStartScheduler+0x9c>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4004ce:	4b1b      	ldr	r3, [pc, #108]	; (40053c <xPortStartScheduler+0x10c>)
  4004d0:	681b      	ldr	r3, [r3, #0]
  4004d2:	021b      	lsls	r3, r3, #8
  4004d4:	4a19      	ldr	r2, [pc, #100]	; (40053c <xPortStartScheduler+0x10c>)
  4004d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4004d8:	4b18      	ldr	r3, [pc, #96]	; (40053c <xPortStartScheduler+0x10c>)
  4004da:	681b      	ldr	r3, [r3, #0]
  4004dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4004e0:	4a16      	ldr	r2, [pc, #88]	; (40053c <xPortStartScheduler+0x10c>)
  4004e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4004e4:	68bb      	ldr	r3, [r7, #8]
  4004e6:	b2da      	uxtb	r2, r3
  4004e8:	697b      	ldr	r3, [r7, #20]
  4004ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4004ec:	4a14      	ldr	r2, [pc, #80]	; (400540 <xPortStartScheduler+0x110>)
  4004ee:	4b14      	ldr	r3, [pc, #80]	; (400540 <xPortStartScheduler+0x110>)
  4004f0:	681b      	ldr	r3, [r3, #0]
  4004f2:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
  4004f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4004f8:	4a11      	ldr	r2, [pc, #68]	; (400540 <xPortStartScheduler+0x110>)
  4004fa:	4b11      	ldr	r3, [pc, #68]	; (400540 <xPortStartScheduler+0x110>)
  4004fc:	681b      	ldr	r3, [r3, #0]
  4004fe:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
  400502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  400504:	4b0f      	ldr	r3, [pc, #60]	; (400544 <xPortStartScheduler+0x114>)
  400506:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400508:	4b0f      	ldr	r3, [pc, #60]	; (400548 <xPortStartScheduler+0x118>)
  40050a:	2200      	movs	r2, #0
  40050c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  40050e:	4b0f      	ldr	r3, [pc, #60]	; (40054c <xPortStartScheduler+0x11c>)
  400510:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400512:	4a0f      	ldr	r2, [pc, #60]	; (400550 <xPortStartScheduler+0x120>)
  400514:	4b0e      	ldr	r3, [pc, #56]	; (400550 <xPortStartScheduler+0x120>)
  400516:	681b      	ldr	r3, [r3, #0]
  400518:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40051c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  40051e:	4b0d      	ldr	r3, [pc, #52]	; (400554 <xPortStartScheduler+0x124>)
  400520:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
  400522:	4b0d      	ldr	r3, [pc, #52]	; (400558 <xPortStartScheduler+0x128>)
  400524:	4798      	blx	r3
	prvTaskExitError();
  400526:	4b0d      	ldr	r3, [pc, #52]	; (40055c <xPortStartScheduler+0x12c>)
  400528:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  40052a:	2300      	movs	r3, #0
}
  40052c:	4618      	mov	r0, r3
  40052e:	3718      	adds	r7, #24
  400530:	46bd      	mov	sp, r7
  400532:	bd80      	pop	{r7, pc}
  400534:	e000e400 	.word	0xe000e400
  400538:	204009d9 	.word	0x204009d9
  40053c:	204009dc 	.word	0x204009dc
  400540:	e000ed20 	.word	0xe000ed20
  400544:	004006d1 	.word	0x004006d1
  400548:	20400000 	.word	0x20400000
  40054c:	00400709 	.word	0x00400709
  400550:	e000ef34 	.word	0xe000ef34
  400554:	00400409 	.word	0x00400409
  400558:	00401fd1 	.word	0x00401fd1
  40055c:	0040037d 	.word	0x0040037d

00400560 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400560:	b480      	push	{r7}
  400562:	b083      	sub	sp, #12
  400564:	af00      	add	r7, sp, #0
  400566:	f04f 0380 	mov.w	r3, #128	; 0x80
  40056a:	b672      	cpsid	i
  40056c:	f383 8811 	msr	BASEPRI, r3
  400570:	f3bf 8f6f 	isb	sy
  400574:	f3bf 8f4f 	dsb	sy
  400578:	b662      	cpsie	i
  40057a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  40057c:	4b0f      	ldr	r3, [pc, #60]	; (4005bc <vPortEnterCritical+0x5c>)
  40057e:	681b      	ldr	r3, [r3, #0]
  400580:	3301      	adds	r3, #1
  400582:	4a0e      	ldr	r2, [pc, #56]	; (4005bc <vPortEnterCritical+0x5c>)
  400584:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400586:	4b0d      	ldr	r3, [pc, #52]	; (4005bc <vPortEnterCritical+0x5c>)
  400588:	681b      	ldr	r3, [r3, #0]
  40058a:	2b01      	cmp	r3, #1
  40058c:	d110      	bne.n	4005b0 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  40058e:	4b0c      	ldr	r3, [pc, #48]	; (4005c0 <vPortEnterCritical+0x60>)
  400590:	681b      	ldr	r3, [r3, #0]
  400592:	b2db      	uxtb	r3, r3
  400594:	2b00      	cmp	r3, #0
  400596:	d00b      	beq.n	4005b0 <vPortEnterCritical+0x50>
  400598:	f04f 0380 	mov.w	r3, #128	; 0x80
  40059c:	b672      	cpsid	i
  40059e:	f383 8811 	msr	BASEPRI, r3
  4005a2:	f3bf 8f6f 	isb	sy
  4005a6:	f3bf 8f4f 	dsb	sy
  4005aa:	b662      	cpsie	i
  4005ac:	603b      	str	r3, [r7, #0]
  4005ae:	e7fe      	b.n	4005ae <vPortEnterCritical+0x4e>
	}
}
  4005b0:	bf00      	nop
  4005b2:	370c      	adds	r7, #12
  4005b4:	46bd      	mov	sp, r7
  4005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005ba:	4770      	bx	lr
  4005bc:	20400000 	.word	0x20400000
  4005c0:	e000ed04 	.word	0xe000ed04

004005c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  4005c4:	b480      	push	{r7}
  4005c6:	b083      	sub	sp, #12
  4005c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
  4005ca:	4b12      	ldr	r3, [pc, #72]	; (400614 <vPortExitCritical+0x50>)
  4005cc:	681b      	ldr	r3, [r3, #0]
  4005ce:	2b00      	cmp	r3, #0
  4005d0:	d10b      	bne.n	4005ea <vPortExitCritical+0x26>
  4005d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005d6:	b672      	cpsid	i
  4005d8:	f383 8811 	msr	BASEPRI, r3
  4005dc:	f3bf 8f6f 	isb	sy
  4005e0:	f3bf 8f4f 	dsb	sy
  4005e4:	b662      	cpsie	i
  4005e6:	607b      	str	r3, [r7, #4]
  4005e8:	e7fe      	b.n	4005e8 <vPortExitCritical+0x24>
	uxCriticalNesting--;
  4005ea:	4b0a      	ldr	r3, [pc, #40]	; (400614 <vPortExitCritical+0x50>)
  4005ec:	681b      	ldr	r3, [r3, #0]
  4005ee:	3b01      	subs	r3, #1
  4005f0:	4a08      	ldr	r2, [pc, #32]	; (400614 <vPortExitCritical+0x50>)
  4005f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4005f4:	4b07      	ldr	r3, [pc, #28]	; (400614 <vPortExitCritical+0x50>)
  4005f6:	681b      	ldr	r3, [r3, #0]
  4005f8:	2b00      	cmp	r3, #0
  4005fa:	d104      	bne.n	400606 <vPortExitCritical+0x42>
  4005fc:	2300      	movs	r3, #0
  4005fe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400600:	683b      	ldr	r3, [r7, #0]
  400602:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
  400606:	bf00      	nop
  400608:	370c      	adds	r7, #12
  40060a:	46bd      	mov	sp, r7
  40060c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400610:	4770      	bx	lr
  400612:	bf00      	nop
  400614:	20400000 	.word	0x20400000
	...

00400620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400620:	f3ef 8009 	mrs	r0, PSP
  400624:	f3bf 8f6f 	isb	sy
  400628:	4b15      	ldr	r3, [pc, #84]	; (400680 <pxCurrentTCBConst>)
  40062a:	681a      	ldr	r2, [r3, #0]
  40062c:	f01e 0f10 	tst.w	lr, #16
  400630:	bf08      	it	eq
  400632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40063a:	6010      	str	r0, [r2, #0]
  40063c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400640:	f04f 0080 	mov.w	r0, #128	; 0x80
  400644:	b672      	cpsid	i
  400646:	f380 8811 	msr	BASEPRI, r0
  40064a:	f3bf 8f4f 	dsb	sy
  40064e:	f3bf 8f6f 	isb	sy
  400652:	b662      	cpsie	i
  400654:	f001 fcbc 	bl	401fd0 <vTaskSwitchContext>
  400658:	f04f 0000 	mov.w	r0, #0
  40065c:	f380 8811 	msr	BASEPRI, r0
  400660:	bc09      	pop	{r0, r3}
  400662:	6819      	ldr	r1, [r3, #0]
  400664:	6808      	ldr	r0, [r1, #0]
  400666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40066a:	f01e 0f10 	tst.w	lr, #16
  40066e:	bf08      	it	eq
  400670:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400674:	f380 8809 	msr	PSP, r0
  400678:	f3bf 8f6f 	isb	sy
  40067c:	4770      	bx	lr
  40067e:	bf00      	nop

00400680 <pxCurrentTCBConst>:
  400680:	2040c208 	.word	0x2040c208
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  400684:	bf00      	nop
  400686:	bf00      	nop

00400688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  400688:	b580      	push	{r7, lr}
  40068a:	b082      	sub	sp, #8
  40068c:	af00      	add	r7, sp, #0
	__asm volatile
  40068e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400692:	b672      	cpsid	i
  400694:	f383 8811 	msr	BASEPRI, r3
  400698:	f3bf 8f6f 	isb	sy
  40069c:	f3bf 8f4f 	dsb	sy
  4006a0:	b662      	cpsie	i
  4006a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  4006a4:	4b08      	ldr	r3, [pc, #32]	; (4006c8 <SysTick_Handler+0x40>)
  4006a6:	4798      	blx	r3
  4006a8:	4603      	mov	r3, r0
  4006aa:	2b00      	cmp	r3, #0
  4006ac:	d003      	beq.n	4006b6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4006ae:	4b07      	ldr	r3, [pc, #28]	; (4006cc <SysTick_Handler+0x44>)
  4006b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4006b4:	601a      	str	r2, [r3, #0]
  4006b6:	2300      	movs	r3, #0
  4006b8:	603b      	str	r3, [r7, #0]
	__asm volatile
  4006ba:	683b      	ldr	r3, [r7, #0]
  4006bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
  4006c0:	bf00      	nop
  4006c2:	3708      	adds	r7, #8
  4006c4:	46bd      	mov	sp, r7
  4006c6:	bd80      	pop	{r7, pc}
  4006c8:	00401e35 	.word	0x00401e35
  4006cc:	e000ed04 	.word	0xe000ed04

004006d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
  4006d0:	b480      	push	{r7}
  4006d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4006d4:	4b08      	ldr	r3, [pc, #32]	; (4006f8 <vPortSetupTimerInterrupt+0x28>)
  4006d6:	2200      	movs	r2, #0
  4006d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4006da:	4b08      	ldr	r3, [pc, #32]	; (4006fc <vPortSetupTimerInterrupt+0x2c>)
  4006dc:	2200      	movs	r2, #0
  4006de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4006e0:	4b07      	ldr	r3, [pc, #28]	; (400700 <vPortSetupTimerInterrupt+0x30>)
  4006e2:	4a08      	ldr	r2, [pc, #32]	; (400704 <vPortSetupTimerInterrupt+0x34>)
  4006e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4006e6:	4b04      	ldr	r3, [pc, #16]	; (4006f8 <vPortSetupTimerInterrupt+0x28>)
  4006e8:	2207      	movs	r2, #7
  4006ea:	601a      	str	r2, [r3, #0]
}
  4006ec:	bf00      	nop
  4006ee:	46bd      	mov	sp, r7
  4006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop
  4006f8:	e000e010 	.word	0xe000e010
  4006fc:	e000e018 	.word	0xe000e018
  400700:	e000e014 	.word	0xe000e014
  400704:	000493df 	.word	0x000493df

00400708 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400708:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400718 <vPortEnableVFP+0x10>
  40070c:	6801      	ldr	r1, [r0, #0]
  40070e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400712:	6001      	str	r1, [r0, #0]
  400714:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
  400716:	bf00      	nop
  400718:	e000ed88 	.word	0xe000ed88

0040071c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
  40071c:	b480      	push	{r7}
  40071e:	b085      	sub	sp, #20
  400720:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  400722:	f3ef 8305 	mrs	r3, IPSR
  400726:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400728:	68fb      	ldr	r3, [r7, #12]
  40072a:	2b0f      	cmp	r3, #15
  40072c:	d915      	bls.n	40075a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40072e:	4a18      	ldr	r2, [pc, #96]	; (400790 <vPortValidateInterruptPriority+0x74>)
  400730:	68fb      	ldr	r3, [r7, #12]
  400732:	4413      	add	r3, r2
  400734:	781b      	ldrb	r3, [r3, #0]
  400736:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400738:	4b16      	ldr	r3, [pc, #88]	; (400794 <vPortValidateInterruptPriority+0x78>)
  40073a:	781b      	ldrb	r3, [r3, #0]
  40073c:	7afa      	ldrb	r2, [r7, #11]
  40073e:	429a      	cmp	r2, r3
  400740:	d20b      	bcs.n	40075a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
  400742:	f04f 0380 	mov.w	r3, #128	; 0x80
  400746:	b672      	cpsid	i
  400748:	f383 8811 	msr	BASEPRI, r3
  40074c:	f3bf 8f6f 	isb	sy
  400750:	f3bf 8f4f 	dsb	sy
  400754:	b662      	cpsie	i
  400756:	607b      	str	r3, [r7, #4]
  400758:	e7fe      	b.n	400758 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40075a:	4b0f      	ldr	r3, [pc, #60]	; (400798 <vPortValidateInterruptPriority+0x7c>)
  40075c:	681b      	ldr	r3, [r3, #0]
  40075e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  400762:	4b0e      	ldr	r3, [pc, #56]	; (40079c <vPortValidateInterruptPriority+0x80>)
  400764:	681b      	ldr	r3, [r3, #0]
  400766:	429a      	cmp	r2, r3
  400768:	d90b      	bls.n	400782 <vPortValidateInterruptPriority+0x66>
  40076a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40076e:	b672      	cpsid	i
  400770:	f383 8811 	msr	BASEPRI, r3
  400774:	f3bf 8f6f 	isb	sy
  400778:	f3bf 8f4f 	dsb	sy
  40077c:	b662      	cpsie	i
  40077e:	603b      	str	r3, [r7, #0]
  400780:	e7fe      	b.n	400780 <vPortValidateInterruptPriority+0x64>
	}
  400782:	bf00      	nop
  400784:	3714      	adds	r7, #20
  400786:	46bd      	mov	sp, r7
  400788:	f85d 7b04 	ldr.w	r7, [sp], #4
  40078c:	4770      	bx	lr
  40078e:	bf00      	nop
  400790:	e000e3f0 	.word	0xe000e3f0
  400794:	204009d9 	.word	0x204009d9
  400798:	e000ed0c 	.word	0xe000ed0c
  40079c:	204009dc 	.word	0x204009dc

004007a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4007a0:	b580      	push	{r7, lr}
  4007a2:	b08a      	sub	sp, #40	; 0x28
  4007a4:	af00      	add	r7, sp, #0
  4007a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  4007a8:	2300      	movs	r3, #0
  4007aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
  4007ac:	4b5d      	ldr	r3, [pc, #372]	; (400924 <pvPortMalloc+0x184>)
  4007ae:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  4007b0:	4b5d      	ldr	r3, [pc, #372]	; (400928 <pvPortMalloc+0x188>)
  4007b2:	681b      	ldr	r3, [r3, #0]
  4007b4:	2b00      	cmp	r3, #0
  4007b6:	d101      	bne.n	4007bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  4007b8:	4b5c      	ldr	r3, [pc, #368]	; (40092c <pvPortMalloc+0x18c>)
  4007ba:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  4007bc:	4b5c      	ldr	r3, [pc, #368]	; (400930 <pvPortMalloc+0x190>)
  4007be:	681a      	ldr	r2, [r3, #0]
  4007c0:	687b      	ldr	r3, [r7, #4]
  4007c2:	4013      	ands	r3, r2
  4007c4:	2b00      	cmp	r3, #0
  4007c6:	f040 8090 	bne.w	4008ea <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
  4007ca:	687b      	ldr	r3, [r7, #4]
  4007cc:	2b00      	cmp	r3, #0
  4007ce:	d01e      	beq.n	40080e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
  4007d0:	2208      	movs	r2, #8
  4007d2:	687b      	ldr	r3, [r7, #4]
  4007d4:	4413      	add	r3, r2
  4007d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  4007d8:	687b      	ldr	r3, [r7, #4]
  4007da:	f003 0307 	and.w	r3, r3, #7
  4007de:	2b00      	cmp	r3, #0
  4007e0:	d015      	beq.n	40080e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4007e2:	687b      	ldr	r3, [r7, #4]
  4007e4:	f023 0307 	bic.w	r3, r3, #7
  4007e8:	3308      	adds	r3, #8
  4007ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
  4007ec:	687b      	ldr	r3, [r7, #4]
  4007ee:	f003 0307 	and.w	r3, r3, #7
  4007f2:	2b00      	cmp	r3, #0
  4007f4:	d00b      	beq.n	40080e <pvPortMalloc+0x6e>
  4007f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4007fa:	b672      	cpsid	i
  4007fc:	f383 8811 	msr	BASEPRI, r3
  400800:	f3bf 8f6f 	isb	sy
  400804:	f3bf 8f4f 	dsb	sy
  400808:	b662      	cpsie	i
  40080a:	617b      	str	r3, [r7, #20]
  40080c:	e7fe      	b.n	40080c <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  40080e:	687b      	ldr	r3, [r7, #4]
  400810:	2b00      	cmp	r3, #0
  400812:	d06a      	beq.n	4008ea <pvPortMalloc+0x14a>
  400814:	4b47      	ldr	r3, [pc, #284]	; (400934 <pvPortMalloc+0x194>)
  400816:	681b      	ldr	r3, [r3, #0]
  400818:	687a      	ldr	r2, [r7, #4]
  40081a:	429a      	cmp	r2, r3
  40081c:	d865      	bhi.n	4008ea <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
  40081e:	4b46      	ldr	r3, [pc, #280]	; (400938 <pvPortMalloc+0x198>)
  400820:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
  400822:	4b45      	ldr	r3, [pc, #276]	; (400938 <pvPortMalloc+0x198>)
  400824:	681b      	ldr	r3, [r3, #0]
  400826:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400828:	e004      	b.n	400834 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
  40082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40082c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
  40082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400830:	681b      	ldr	r3, [r3, #0]
  400832:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400836:	685a      	ldr	r2, [r3, #4]
  400838:	687b      	ldr	r3, [r7, #4]
  40083a:	429a      	cmp	r2, r3
  40083c:	d203      	bcs.n	400846 <pvPortMalloc+0xa6>
  40083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400840:	681b      	ldr	r3, [r3, #0]
  400842:	2b00      	cmp	r3, #0
  400844:	d1f1      	bne.n	40082a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
  400846:	4b38      	ldr	r3, [pc, #224]	; (400928 <pvPortMalloc+0x188>)
  400848:	681b      	ldr	r3, [r3, #0]
  40084a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40084c:	429a      	cmp	r2, r3
  40084e:	d04c      	beq.n	4008ea <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  400850:	6a3b      	ldr	r3, [r7, #32]
  400852:	681b      	ldr	r3, [r3, #0]
  400854:	2208      	movs	r2, #8
  400856:	4413      	add	r3, r2
  400858:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  40085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40085c:	681a      	ldr	r2, [r3, #0]
  40085e:	6a3b      	ldr	r3, [r7, #32]
  400860:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400864:	685a      	ldr	r2, [r3, #4]
  400866:	687b      	ldr	r3, [r7, #4]
  400868:	1ad2      	subs	r2, r2, r3
  40086a:	2308      	movs	r3, #8
  40086c:	005b      	lsls	r3, r3, #1
  40086e:	429a      	cmp	r2, r3
  400870:	d920      	bls.n	4008b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  400872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400874:	687b      	ldr	r3, [r7, #4]
  400876:	4413      	add	r3, r2
  400878:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
  40087a:	69bb      	ldr	r3, [r7, #24]
  40087c:	f003 0307 	and.w	r3, r3, #7
  400880:	2b00      	cmp	r3, #0
  400882:	d00b      	beq.n	40089c <pvPortMalloc+0xfc>
  400884:	f04f 0380 	mov.w	r3, #128	; 0x80
  400888:	b672      	cpsid	i
  40088a:	f383 8811 	msr	BASEPRI, r3
  40088e:	f3bf 8f6f 	isb	sy
  400892:	f3bf 8f4f 	dsb	sy
  400896:	b662      	cpsie	i
  400898:	613b      	str	r3, [r7, #16]
  40089a:	e7fe      	b.n	40089a <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  40089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40089e:	685a      	ldr	r2, [r3, #4]
  4008a0:	687b      	ldr	r3, [r7, #4]
  4008a2:	1ad2      	subs	r2, r2, r3
  4008a4:	69bb      	ldr	r3, [r7, #24]
  4008a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
  4008a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008aa:	687a      	ldr	r2, [r7, #4]
  4008ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
  4008ae:	69b8      	ldr	r0, [r7, #24]
  4008b0:	4b22      	ldr	r3, [pc, #136]	; (40093c <pvPortMalloc+0x19c>)
  4008b2:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
  4008b4:	4b1f      	ldr	r3, [pc, #124]	; (400934 <pvPortMalloc+0x194>)
  4008b6:	681a      	ldr	r2, [r3, #0]
  4008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008ba:	685b      	ldr	r3, [r3, #4]
  4008bc:	1ad3      	subs	r3, r2, r3
  4008be:	4a1d      	ldr	r2, [pc, #116]	; (400934 <pvPortMalloc+0x194>)
  4008c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  4008c2:	4b1c      	ldr	r3, [pc, #112]	; (400934 <pvPortMalloc+0x194>)
  4008c4:	681a      	ldr	r2, [r3, #0]
  4008c6:	4b1e      	ldr	r3, [pc, #120]	; (400940 <pvPortMalloc+0x1a0>)
  4008c8:	681b      	ldr	r3, [r3, #0]
  4008ca:	429a      	cmp	r2, r3
  4008cc:	d203      	bcs.n	4008d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  4008ce:	4b19      	ldr	r3, [pc, #100]	; (400934 <pvPortMalloc+0x194>)
  4008d0:	681b      	ldr	r3, [r3, #0]
  4008d2:	4a1b      	ldr	r2, [pc, #108]	; (400940 <pvPortMalloc+0x1a0>)
  4008d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
  4008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008d8:	685a      	ldr	r2, [r3, #4]
  4008da:	4b15      	ldr	r3, [pc, #84]	; (400930 <pvPortMalloc+0x190>)
  4008dc:	681b      	ldr	r3, [r3, #0]
  4008de:	431a      	orrs	r2, r3
  4008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
  4008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008e6:	2200      	movs	r2, #0
  4008e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4008ea:	4b16      	ldr	r3, [pc, #88]	; (400944 <pvPortMalloc+0x1a4>)
  4008ec:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4008ee:	69fb      	ldr	r3, [r7, #28]
  4008f0:	2b00      	cmp	r3, #0
  4008f2:	d101      	bne.n	4008f8 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  4008f4:	4b14      	ldr	r3, [pc, #80]	; (400948 <pvPortMalloc+0x1a8>)
  4008f6:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
  4008f8:	69fb      	ldr	r3, [r7, #28]
  4008fa:	f003 0307 	and.w	r3, r3, #7
  4008fe:	2b00      	cmp	r3, #0
  400900:	d00b      	beq.n	40091a <pvPortMalloc+0x17a>
  400902:	f04f 0380 	mov.w	r3, #128	; 0x80
  400906:	b672      	cpsid	i
  400908:	f383 8811 	msr	BASEPRI, r3
  40090c:	f3bf 8f6f 	isb	sy
  400910:	f3bf 8f4f 	dsb	sy
  400914:	b662      	cpsie	i
  400916:	60fb      	str	r3, [r7, #12]
  400918:	e7fe      	b.n	400918 <pvPortMalloc+0x178>
	return pvReturn;
  40091a:	69fb      	ldr	r3, [r7, #28]
}
  40091c:	4618      	mov	r0, r3
  40091e:	3728      	adds	r7, #40	; 0x28
  400920:	46bd      	mov	sp, r7
  400922:	bd80      	pop	{r7, pc}
  400924:	00401ca5 	.word	0x00401ca5
  400928:	2040c1f0 	.word	0x2040c1f0
  40092c:	00400a11 	.word	0x00400a11
  400930:	2040c1fc 	.word	0x2040c1fc
  400934:	2040c1f4 	.word	0x2040c1f4
  400938:	2040c1e8 	.word	0x2040c1e8
  40093c:	00400ad5 	.word	0x00400ad5
  400940:	2040c1f8 	.word	0x2040c1f8
  400944:	00401cc1 	.word	0x00401cc1
  400948:	00404201 	.word	0x00404201

0040094c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  40094c:	b580      	push	{r7, lr}
  40094e:	b086      	sub	sp, #24
  400950:	af00      	add	r7, sp, #0
  400952:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
  400954:	687b      	ldr	r3, [r7, #4]
  400956:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
  400958:	687b      	ldr	r3, [r7, #4]
  40095a:	2b00      	cmp	r3, #0
  40095c:	d04a      	beq.n	4009f4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
  40095e:	2308      	movs	r3, #8
  400960:	425b      	negs	r3, r3
  400962:	697a      	ldr	r2, [r7, #20]
  400964:	4413      	add	r3, r2
  400966:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  400968:	697b      	ldr	r3, [r7, #20]
  40096a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  40096c:	693b      	ldr	r3, [r7, #16]
  40096e:	685a      	ldr	r2, [r3, #4]
  400970:	4b22      	ldr	r3, [pc, #136]	; (4009fc <vPortFree+0xb0>)
  400972:	681b      	ldr	r3, [r3, #0]
  400974:	4013      	ands	r3, r2
  400976:	2b00      	cmp	r3, #0
  400978:	d10b      	bne.n	400992 <vPortFree+0x46>
  40097a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40097e:	b672      	cpsid	i
  400980:	f383 8811 	msr	BASEPRI, r3
  400984:	f3bf 8f6f 	isb	sy
  400988:	f3bf 8f4f 	dsb	sy
  40098c:	b662      	cpsie	i
  40098e:	60fb      	str	r3, [r7, #12]
  400990:	e7fe      	b.n	400990 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
  400992:	693b      	ldr	r3, [r7, #16]
  400994:	681b      	ldr	r3, [r3, #0]
  400996:	2b00      	cmp	r3, #0
  400998:	d00b      	beq.n	4009b2 <vPortFree+0x66>
  40099a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40099e:	b672      	cpsid	i
  4009a0:	f383 8811 	msr	BASEPRI, r3
  4009a4:	f3bf 8f6f 	isb	sy
  4009a8:	f3bf 8f4f 	dsb	sy
  4009ac:	b662      	cpsie	i
  4009ae:	60bb      	str	r3, [r7, #8]
  4009b0:	e7fe      	b.n	4009b0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  4009b2:	693b      	ldr	r3, [r7, #16]
  4009b4:	685a      	ldr	r2, [r3, #4]
  4009b6:	4b11      	ldr	r3, [pc, #68]	; (4009fc <vPortFree+0xb0>)
  4009b8:	681b      	ldr	r3, [r3, #0]
  4009ba:	4013      	ands	r3, r2
  4009bc:	2b00      	cmp	r3, #0
  4009be:	d019      	beq.n	4009f4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
  4009c0:	693b      	ldr	r3, [r7, #16]
  4009c2:	681b      	ldr	r3, [r3, #0]
  4009c4:	2b00      	cmp	r3, #0
  4009c6:	d115      	bne.n	4009f4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
  4009c8:	693b      	ldr	r3, [r7, #16]
  4009ca:	685a      	ldr	r2, [r3, #4]
  4009cc:	4b0b      	ldr	r3, [pc, #44]	; (4009fc <vPortFree+0xb0>)
  4009ce:	681b      	ldr	r3, [r3, #0]
  4009d0:	43db      	mvns	r3, r3
  4009d2:	401a      	ands	r2, r3
  4009d4:	693b      	ldr	r3, [r7, #16]
  4009d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
  4009d8:	4b09      	ldr	r3, [pc, #36]	; (400a00 <vPortFree+0xb4>)
  4009da:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
  4009dc:	693b      	ldr	r3, [r7, #16]
  4009de:	685a      	ldr	r2, [r3, #4]
  4009e0:	4b08      	ldr	r3, [pc, #32]	; (400a04 <vPortFree+0xb8>)
  4009e2:	681b      	ldr	r3, [r3, #0]
  4009e4:	4413      	add	r3, r2
  4009e6:	4a07      	ldr	r2, [pc, #28]	; (400a04 <vPortFree+0xb8>)
  4009e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  4009ea:	6938      	ldr	r0, [r7, #16]
  4009ec:	4b06      	ldr	r3, [pc, #24]	; (400a08 <vPortFree+0xbc>)
  4009ee:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
  4009f0:	4b06      	ldr	r3, [pc, #24]	; (400a0c <vPortFree+0xc0>)
  4009f2:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
  4009f4:	bf00      	nop
  4009f6:	3718      	adds	r7, #24
  4009f8:	46bd      	mov	sp, r7
  4009fa:	bd80      	pop	{r7, pc}
  4009fc:	2040c1fc 	.word	0x2040c1fc
  400a00:	00401ca5 	.word	0x00401ca5
  400a04:	2040c1f4 	.word	0x2040c1f4
  400a08:	00400ad5 	.word	0x00400ad5
  400a0c:	00401cc1 	.word	0x00401cc1

00400a10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  400a10:	b480      	push	{r7}
  400a12:	b085      	sub	sp, #20
  400a14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
  400a16:	f44f 4338 	mov.w	r3, #47104	; 0xb800
  400a1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
  400a1c:	4b27      	ldr	r3, [pc, #156]	; (400abc <prvHeapInit+0xac>)
  400a1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  400a20:	68fb      	ldr	r3, [r7, #12]
  400a22:	f003 0307 	and.w	r3, r3, #7
  400a26:	2b00      	cmp	r3, #0
  400a28:	d00c      	beq.n	400a44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
  400a2a:	68fb      	ldr	r3, [r7, #12]
  400a2c:	3307      	adds	r3, #7
  400a2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  400a30:	68fb      	ldr	r3, [r7, #12]
  400a32:	f023 0307 	bic.w	r3, r3, #7
  400a36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
  400a38:	68ba      	ldr	r2, [r7, #8]
  400a3a:	68fb      	ldr	r3, [r7, #12]
  400a3c:	1ad3      	subs	r3, r2, r3
  400a3e:	4a1f      	ldr	r2, [pc, #124]	; (400abc <prvHeapInit+0xac>)
  400a40:	4413      	add	r3, r2
  400a42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
  400a44:	68fb      	ldr	r3, [r7, #12]
  400a46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  400a48:	4a1d      	ldr	r2, [pc, #116]	; (400ac0 <prvHeapInit+0xb0>)
  400a4a:	687b      	ldr	r3, [r7, #4]
  400a4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
  400a4e:	4b1c      	ldr	r3, [pc, #112]	; (400ac0 <prvHeapInit+0xb0>)
  400a50:	2200      	movs	r2, #0
  400a52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
  400a54:	687a      	ldr	r2, [r7, #4]
  400a56:	68bb      	ldr	r3, [r7, #8]
  400a58:	4413      	add	r3, r2
  400a5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
  400a5c:	2208      	movs	r2, #8
  400a5e:	68fb      	ldr	r3, [r7, #12]
  400a60:	1a9b      	subs	r3, r3, r2
  400a62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  400a64:	68fb      	ldr	r3, [r7, #12]
  400a66:	f023 0307 	bic.w	r3, r3, #7
  400a6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
  400a6c:	68fb      	ldr	r3, [r7, #12]
  400a6e:	4a15      	ldr	r2, [pc, #84]	; (400ac4 <prvHeapInit+0xb4>)
  400a70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
  400a72:	4b14      	ldr	r3, [pc, #80]	; (400ac4 <prvHeapInit+0xb4>)
  400a74:	681b      	ldr	r3, [r3, #0]
  400a76:	2200      	movs	r2, #0
  400a78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  400a7a:	4b12      	ldr	r3, [pc, #72]	; (400ac4 <prvHeapInit+0xb4>)
  400a7c:	681b      	ldr	r3, [r3, #0]
  400a7e:	2200      	movs	r2, #0
  400a80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
  400a82:	687b      	ldr	r3, [r7, #4]
  400a84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
  400a86:	683b      	ldr	r3, [r7, #0]
  400a88:	68fa      	ldr	r2, [r7, #12]
  400a8a:	1ad2      	subs	r2, r2, r3
  400a8c:	683b      	ldr	r3, [r7, #0]
  400a8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  400a90:	4b0c      	ldr	r3, [pc, #48]	; (400ac4 <prvHeapInit+0xb4>)
  400a92:	681a      	ldr	r2, [r3, #0]
  400a94:	683b      	ldr	r3, [r7, #0]
  400a96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  400a98:	683b      	ldr	r3, [r7, #0]
  400a9a:	685b      	ldr	r3, [r3, #4]
  400a9c:	4a0a      	ldr	r2, [pc, #40]	; (400ac8 <prvHeapInit+0xb8>)
  400a9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  400aa0:	683b      	ldr	r3, [r7, #0]
  400aa2:	685b      	ldr	r3, [r3, #4]
  400aa4:	4a09      	ldr	r2, [pc, #36]	; (400acc <prvHeapInit+0xbc>)
  400aa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  400aa8:	4b09      	ldr	r3, [pc, #36]	; (400ad0 <prvHeapInit+0xc0>)
  400aaa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400aae:	601a      	str	r2, [r3, #0]
}
  400ab0:	bf00      	nop
  400ab2:	3714      	adds	r7, #20
  400ab4:	46bd      	mov	sp, r7
  400ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400aba:	4770      	bx	lr
  400abc:	204009e8 	.word	0x204009e8
  400ac0:	2040c1e8 	.word	0x2040c1e8
  400ac4:	2040c1f0 	.word	0x2040c1f0
  400ac8:	2040c1f8 	.word	0x2040c1f8
  400acc:	2040c1f4 	.word	0x2040c1f4
  400ad0:	2040c1fc 	.word	0x2040c1fc

00400ad4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
  400ad4:	b480      	push	{r7}
  400ad6:	b085      	sub	sp, #20
  400ad8:	af00      	add	r7, sp, #0
  400ada:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400adc:	4b28      	ldr	r3, [pc, #160]	; (400b80 <prvInsertBlockIntoFreeList+0xac>)
  400ade:	60fb      	str	r3, [r7, #12]
  400ae0:	e002      	b.n	400ae8 <prvInsertBlockIntoFreeList+0x14>
  400ae2:	68fb      	ldr	r3, [r7, #12]
  400ae4:	681b      	ldr	r3, [r3, #0]
  400ae6:	60fb      	str	r3, [r7, #12]
  400ae8:	68fb      	ldr	r3, [r7, #12]
  400aea:	681a      	ldr	r2, [r3, #0]
  400aec:	687b      	ldr	r3, [r7, #4]
  400aee:	429a      	cmp	r2, r3
  400af0:	d3f7      	bcc.n	400ae2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
  400af2:	68fb      	ldr	r3, [r7, #12]
  400af4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  400af6:	68fb      	ldr	r3, [r7, #12]
  400af8:	685b      	ldr	r3, [r3, #4]
  400afa:	68ba      	ldr	r2, [r7, #8]
  400afc:	441a      	add	r2, r3
  400afe:	687b      	ldr	r3, [r7, #4]
  400b00:	429a      	cmp	r2, r3
  400b02:	d108      	bne.n	400b16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  400b04:	68fb      	ldr	r3, [r7, #12]
  400b06:	685a      	ldr	r2, [r3, #4]
  400b08:	687b      	ldr	r3, [r7, #4]
  400b0a:	685b      	ldr	r3, [r3, #4]
  400b0c:	441a      	add	r2, r3
  400b0e:	68fb      	ldr	r3, [r7, #12]
  400b10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  400b12:	68fb      	ldr	r3, [r7, #12]
  400b14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
  400b16:	687b      	ldr	r3, [r7, #4]
  400b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  400b1a:	687b      	ldr	r3, [r7, #4]
  400b1c:	685b      	ldr	r3, [r3, #4]
  400b1e:	68ba      	ldr	r2, [r7, #8]
  400b20:	441a      	add	r2, r3
  400b22:	68fb      	ldr	r3, [r7, #12]
  400b24:	681b      	ldr	r3, [r3, #0]
  400b26:	429a      	cmp	r2, r3
  400b28:	d118      	bne.n	400b5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  400b2a:	68fb      	ldr	r3, [r7, #12]
  400b2c:	681a      	ldr	r2, [r3, #0]
  400b2e:	4b15      	ldr	r3, [pc, #84]	; (400b84 <prvInsertBlockIntoFreeList+0xb0>)
  400b30:	681b      	ldr	r3, [r3, #0]
  400b32:	429a      	cmp	r2, r3
  400b34:	d00d      	beq.n	400b52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  400b36:	687b      	ldr	r3, [r7, #4]
  400b38:	685a      	ldr	r2, [r3, #4]
  400b3a:	68fb      	ldr	r3, [r7, #12]
  400b3c:	681b      	ldr	r3, [r3, #0]
  400b3e:	685b      	ldr	r3, [r3, #4]
  400b40:	441a      	add	r2, r3
  400b42:	687b      	ldr	r3, [r7, #4]
  400b44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  400b46:	68fb      	ldr	r3, [r7, #12]
  400b48:	681b      	ldr	r3, [r3, #0]
  400b4a:	681a      	ldr	r2, [r3, #0]
  400b4c:	687b      	ldr	r3, [r7, #4]
  400b4e:	601a      	str	r2, [r3, #0]
  400b50:	e008      	b.n	400b64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  400b52:	4b0c      	ldr	r3, [pc, #48]	; (400b84 <prvInsertBlockIntoFreeList+0xb0>)
  400b54:	681a      	ldr	r2, [r3, #0]
  400b56:	687b      	ldr	r3, [r7, #4]
  400b58:	601a      	str	r2, [r3, #0]
  400b5a:	e003      	b.n	400b64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  400b5c:	68fb      	ldr	r3, [r7, #12]
  400b5e:	681a      	ldr	r2, [r3, #0]
  400b60:	687b      	ldr	r3, [r7, #4]
  400b62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  400b64:	68fa      	ldr	r2, [r7, #12]
  400b66:	687b      	ldr	r3, [r7, #4]
  400b68:	429a      	cmp	r2, r3
  400b6a:	d002      	beq.n	400b72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  400b6c:	68fb      	ldr	r3, [r7, #12]
  400b6e:	687a      	ldr	r2, [r7, #4]
  400b70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  400b72:	bf00      	nop
  400b74:	3714      	adds	r7, #20
  400b76:	46bd      	mov	sp, r7
  400b78:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b7c:	4770      	bx	lr
  400b7e:	bf00      	nop
  400b80:	2040c1e8 	.word	0x2040c1e8
  400b84:	2040c1f0 	.word	0x2040c1f0

00400b88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  400b88:	b580      	push	{r7, lr}
  400b8a:	b084      	sub	sp, #16
  400b8c:	af00      	add	r7, sp, #0
  400b8e:	6078      	str	r0, [r7, #4]
  400b90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  400b92:	687b      	ldr	r3, [r7, #4]
  400b94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
  400b96:	68fb      	ldr	r3, [r7, #12]
  400b98:	2b00      	cmp	r3, #0
  400b9a:	d10b      	bne.n	400bb4 <xQueueGenericReset+0x2c>
  400b9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ba0:	b672      	cpsid	i
  400ba2:	f383 8811 	msr	BASEPRI, r3
  400ba6:	f3bf 8f6f 	isb	sy
  400baa:	f3bf 8f4f 	dsb	sy
  400bae:	b662      	cpsie	i
  400bb0:	60bb      	str	r3, [r7, #8]
  400bb2:	e7fe      	b.n	400bb2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
  400bb4:	4b28      	ldr	r3, [pc, #160]	; (400c58 <xQueueGenericReset+0xd0>)
  400bb6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400bb8:	68fb      	ldr	r3, [r7, #12]
  400bba:	681a      	ldr	r2, [r3, #0]
  400bbc:	68fb      	ldr	r3, [r7, #12]
  400bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400bc0:	68f9      	ldr	r1, [r7, #12]
  400bc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400bc4:	fb01 f303 	mul.w	r3, r1, r3
  400bc8:	441a      	add	r2, r3
  400bca:	68fb      	ldr	r3, [r7, #12]
  400bcc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400bce:	68fb      	ldr	r3, [r7, #12]
  400bd0:	2200      	movs	r2, #0
  400bd2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400bd4:	68fb      	ldr	r3, [r7, #12]
  400bd6:	681a      	ldr	r2, [r3, #0]
  400bd8:	68fb      	ldr	r3, [r7, #12]
  400bda:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400bdc:	68fb      	ldr	r3, [r7, #12]
  400bde:	681a      	ldr	r2, [r3, #0]
  400be0:	68fb      	ldr	r3, [r7, #12]
  400be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400be4:	3b01      	subs	r3, #1
  400be6:	68f9      	ldr	r1, [r7, #12]
  400be8:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400bea:	fb01 f303 	mul.w	r3, r1, r3
  400bee:	441a      	add	r2, r3
  400bf0:	68fb      	ldr	r3, [r7, #12]
  400bf2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  400bf4:	68fb      	ldr	r3, [r7, #12]
  400bf6:	22ff      	movs	r2, #255	; 0xff
  400bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  400bfc:	68fb      	ldr	r3, [r7, #12]
  400bfe:	22ff      	movs	r2, #255	; 0xff
  400c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
  400c04:	683b      	ldr	r3, [r7, #0]
  400c06:	2b00      	cmp	r3, #0
  400c08:	d114      	bne.n	400c34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400c0a:	68fb      	ldr	r3, [r7, #12]
  400c0c:	691b      	ldr	r3, [r3, #16]
  400c0e:	2b00      	cmp	r3, #0
  400c10:	d01a      	beq.n	400c48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400c12:	68fb      	ldr	r3, [r7, #12]
  400c14:	3310      	adds	r3, #16
  400c16:	4618      	mov	r0, r3
  400c18:	4b10      	ldr	r3, [pc, #64]	; (400c5c <xQueueGenericReset+0xd4>)
  400c1a:	4798      	blx	r3
  400c1c:	4603      	mov	r3, r0
  400c1e:	2b00      	cmp	r3, #0
  400c20:	d012      	beq.n	400c48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
  400c22:	4b0f      	ldr	r3, [pc, #60]	; (400c60 <xQueueGenericReset+0xd8>)
  400c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c28:	601a      	str	r2, [r3, #0]
  400c2a:	f3bf 8f4f 	dsb	sy
  400c2e:	f3bf 8f6f 	isb	sy
  400c32:	e009      	b.n	400c48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400c34:	68fb      	ldr	r3, [r7, #12]
  400c36:	3310      	adds	r3, #16
  400c38:	4618      	mov	r0, r3
  400c3a:	4b0a      	ldr	r3, [pc, #40]	; (400c64 <xQueueGenericReset+0xdc>)
  400c3c:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400c3e:	68fb      	ldr	r3, [r7, #12]
  400c40:	3324      	adds	r3, #36	; 0x24
  400c42:	4618      	mov	r0, r3
  400c44:	4b07      	ldr	r3, [pc, #28]	; (400c64 <xQueueGenericReset+0xdc>)
  400c46:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  400c48:	4b07      	ldr	r3, [pc, #28]	; (400c68 <xQueueGenericReset+0xe0>)
  400c4a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  400c4c:	2301      	movs	r3, #1
}
  400c4e:	4618      	mov	r0, r3
  400c50:	3710      	adds	r7, #16
  400c52:	46bd      	mov	sp, r7
  400c54:	bd80      	pop	{r7, pc}
  400c56:	bf00      	nop
  400c58:	00400561 	.word	0x00400561
  400c5c:	0040218d 	.word	0x0040218d
  400c60:	e000ed04 	.word	0xe000ed04
  400c64:	004001ad 	.word	0x004001ad
  400c68:	004005c5 	.word	0x004005c5

00400c6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
  400c6c:	b590      	push	{r4, r7, lr}
  400c6e:	b08b      	sub	sp, #44	; 0x2c
  400c70:	af02      	add	r7, sp, #8
  400c72:	60f8      	str	r0, [r7, #12]
  400c74:	60b9      	str	r1, [r7, #8]
  400c76:	4613      	mov	r3, r2
  400c78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400c7a:	68fb      	ldr	r3, [r7, #12]
  400c7c:	2b00      	cmp	r3, #0
  400c7e:	d10b      	bne.n	400c98 <xQueueGenericCreate+0x2c>
  400c80:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c84:	b672      	cpsid	i
  400c86:	f383 8811 	msr	BASEPRI, r3
  400c8a:	f3bf 8f6f 	isb	sy
  400c8e:	f3bf 8f4f 	dsb	sy
  400c92:	b662      	cpsie	i
  400c94:	613b      	str	r3, [r7, #16]
  400c96:	e7fe      	b.n	400c96 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
  400c98:	68bb      	ldr	r3, [r7, #8]
  400c9a:	2b00      	cmp	r3, #0
  400c9c:	d102      	bne.n	400ca4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
  400c9e:	2300      	movs	r3, #0
  400ca0:	61fb      	str	r3, [r7, #28]
  400ca2:	e004      	b.n	400cae <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400ca4:	68fb      	ldr	r3, [r7, #12]
  400ca6:	68ba      	ldr	r2, [r7, #8]
  400ca8:	fb02 f303 	mul.w	r3, r2, r3
  400cac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400cae:	69fb      	ldr	r3, [r7, #28]
  400cb0:	3354      	adds	r3, #84	; 0x54
  400cb2:	4618      	mov	r0, r3
  400cb4:	4b0b      	ldr	r3, [pc, #44]	; (400ce4 <xQueueGenericCreate+0x78>)
  400cb6:	4798      	blx	r3
  400cb8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
  400cba:	69bb      	ldr	r3, [r7, #24]
  400cbc:	2b00      	cmp	r3, #0
  400cbe:	d00b      	beq.n	400cd8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400cc0:	69bb      	ldr	r3, [r7, #24]
  400cc2:	3354      	adds	r3, #84	; 0x54
  400cc4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
  400cc6:	79fa      	ldrb	r2, [r7, #7]
  400cc8:	69bb      	ldr	r3, [r7, #24]
  400cca:	9300      	str	r3, [sp, #0]
  400ccc:	4613      	mov	r3, r2
  400cce:	697a      	ldr	r2, [r7, #20]
  400cd0:	68b9      	ldr	r1, [r7, #8]
  400cd2:	68f8      	ldr	r0, [r7, #12]
  400cd4:	4c04      	ldr	r4, [pc, #16]	; (400ce8 <xQueueGenericCreate+0x7c>)
  400cd6:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
  400cd8:	69bb      	ldr	r3, [r7, #24]
	}
  400cda:	4618      	mov	r0, r3
  400cdc:	3724      	adds	r7, #36	; 0x24
  400cde:	46bd      	mov	sp, r7
  400ce0:	bd90      	pop	{r4, r7, pc}
  400ce2:	bf00      	nop
  400ce4:	004007a1 	.word	0x004007a1
  400ce8:	00400ced 	.word	0x00400ced

00400cec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
  400cec:	b580      	push	{r7, lr}
  400cee:	b084      	sub	sp, #16
  400cf0:	af00      	add	r7, sp, #0
  400cf2:	60f8      	str	r0, [r7, #12]
  400cf4:	60b9      	str	r1, [r7, #8]
  400cf6:	607a      	str	r2, [r7, #4]
  400cf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
  400cfa:	68bb      	ldr	r3, [r7, #8]
  400cfc:	2b00      	cmp	r3, #0
  400cfe:	d103      	bne.n	400d08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400d00:	69bb      	ldr	r3, [r7, #24]
  400d02:	69ba      	ldr	r2, [r7, #24]
  400d04:	601a      	str	r2, [r3, #0]
  400d06:	e002      	b.n	400d0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400d08:	69bb      	ldr	r3, [r7, #24]
  400d0a:	687a      	ldr	r2, [r7, #4]
  400d0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
  400d0e:	69bb      	ldr	r3, [r7, #24]
  400d10:	68fa      	ldr	r2, [r7, #12]
  400d12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  400d14:	69bb      	ldr	r3, [r7, #24]
  400d16:	68ba      	ldr	r2, [r7, #8]
  400d18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400d1a:	2101      	movs	r1, #1
  400d1c:	69b8      	ldr	r0, [r7, #24]
  400d1e:	4b06      	ldr	r3, [pc, #24]	; (400d38 <prvInitialiseNewQueue+0x4c>)
  400d20:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
  400d22:	69bb      	ldr	r3, [r7, #24]
  400d24:	78fa      	ldrb	r2, [r7, #3]
  400d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
  400d2a:	69bb      	ldr	r3, [r7, #24]
  400d2c:	2200      	movs	r2, #0
  400d2e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
  400d30:	bf00      	nop
  400d32:	3710      	adds	r7, #16
  400d34:	46bd      	mov	sp, r7
  400d36:	bd80      	pop	{r7, pc}
  400d38:	00400b89 	.word	0x00400b89

00400d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  400d3c:	b580      	push	{r7, lr}
  400d3e:	b08e      	sub	sp, #56	; 0x38
  400d40:	af00      	add	r7, sp, #0
  400d42:	60f8      	str	r0, [r7, #12]
  400d44:	60b9      	str	r1, [r7, #8]
  400d46:	607a      	str	r2, [r7, #4]
  400d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
  400d4a:	2300      	movs	r3, #0
  400d4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  400d4e:	68fb      	ldr	r3, [r7, #12]
  400d50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
  400d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400d54:	2b00      	cmp	r3, #0
  400d56:	d10b      	bne.n	400d70 <xQueueGenericSend+0x34>
  400d58:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d5c:	b672      	cpsid	i
  400d5e:	f383 8811 	msr	BASEPRI, r3
  400d62:	f3bf 8f6f 	isb	sy
  400d66:	f3bf 8f4f 	dsb	sy
  400d6a:	b662      	cpsie	i
  400d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  400d6e:	e7fe      	b.n	400d6e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d70:	68bb      	ldr	r3, [r7, #8]
  400d72:	2b00      	cmp	r3, #0
  400d74:	d103      	bne.n	400d7e <xQueueGenericSend+0x42>
  400d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400d7a:	2b00      	cmp	r3, #0
  400d7c:	d101      	bne.n	400d82 <xQueueGenericSend+0x46>
  400d7e:	2301      	movs	r3, #1
  400d80:	e000      	b.n	400d84 <xQueueGenericSend+0x48>
  400d82:	2300      	movs	r3, #0
  400d84:	2b00      	cmp	r3, #0
  400d86:	d10b      	bne.n	400da0 <xQueueGenericSend+0x64>
  400d88:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d8c:	b672      	cpsid	i
  400d8e:	f383 8811 	msr	BASEPRI, r3
  400d92:	f3bf 8f6f 	isb	sy
  400d96:	f3bf 8f4f 	dsb	sy
  400d9a:	b662      	cpsie	i
  400d9c:	627b      	str	r3, [r7, #36]	; 0x24
  400d9e:	e7fe      	b.n	400d9e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400da0:	683b      	ldr	r3, [r7, #0]
  400da2:	2b02      	cmp	r3, #2
  400da4:	d103      	bne.n	400dae <xQueueGenericSend+0x72>
  400da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400daa:	2b01      	cmp	r3, #1
  400dac:	d101      	bne.n	400db2 <xQueueGenericSend+0x76>
  400dae:	2301      	movs	r3, #1
  400db0:	e000      	b.n	400db4 <xQueueGenericSend+0x78>
  400db2:	2300      	movs	r3, #0
  400db4:	2b00      	cmp	r3, #0
  400db6:	d10b      	bne.n	400dd0 <xQueueGenericSend+0x94>
  400db8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400dbc:	b672      	cpsid	i
  400dbe:	f383 8811 	msr	BASEPRI, r3
  400dc2:	f3bf 8f6f 	isb	sy
  400dc6:	f3bf 8f4f 	dsb	sy
  400dca:	b662      	cpsie	i
  400dcc:	623b      	str	r3, [r7, #32]
  400dce:	e7fe      	b.n	400dce <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400dd0:	4b64      	ldr	r3, [pc, #400]	; (400f64 <xQueueGenericSend+0x228>)
  400dd2:	4798      	blx	r3
  400dd4:	4603      	mov	r3, r0
  400dd6:	2b00      	cmp	r3, #0
  400dd8:	d102      	bne.n	400de0 <xQueueGenericSend+0xa4>
  400dda:	687b      	ldr	r3, [r7, #4]
  400ddc:	2b00      	cmp	r3, #0
  400dde:	d101      	bne.n	400de4 <xQueueGenericSend+0xa8>
  400de0:	2301      	movs	r3, #1
  400de2:	e000      	b.n	400de6 <xQueueGenericSend+0xaa>
  400de4:	2300      	movs	r3, #0
  400de6:	2b00      	cmp	r3, #0
  400de8:	d10b      	bne.n	400e02 <xQueueGenericSend+0xc6>
  400dea:	f04f 0380 	mov.w	r3, #128	; 0x80
  400dee:	b672      	cpsid	i
  400df0:	f383 8811 	msr	BASEPRI, r3
  400df4:	f3bf 8f6f 	isb	sy
  400df8:	f3bf 8f4f 	dsb	sy
  400dfc:	b662      	cpsie	i
  400dfe:	61fb      	str	r3, [r7, #28]
  400e00:	e7fe      	b.n	400e00 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400e02:	4b59      	ldr	r3, [pc, #356]	; (400f68 <xQueueGenericSend+0x22c>)
  400e04:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400e0e:	429a      	cmp	r2, r3
  400e10:	d302      	bcc.n	400e18 <xQueueGenericSend+0xdc>
  400e12:	683b      	ldr	r3, [r7, #0]
  400e14:	2b02      	cmp	r3, #2
  400e16:	d13d      	bne.n	400e94 <xQueueGenericSend+0x158>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400e18:	683a      	ldr	r2, [r7, #0]
  400e1a:	68b9      	ldr	r1, [r7, #8]
  400e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
  400e1e:	4b53      	ldr	r3, [pc, #332]	; (400f6c <xQueueGenericSend+0x230>)
  400e20:	4798      	blx	r3
  400e22:	62f8      	str	r0, [r7, #44]	; 0x2c

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400e28:	2b00      	cmp	r3, #0
  400e2a:	d00f      	beq.n	400e4c <xQueueGenericSend+0x110>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  400e2c:	6839      	ldr	r1, [r7, #0]
  400e2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
  400e30:	4b4f      	ldr	r3, [pc, #316]	; (400f70 <xQueueGenericSend+0x234>)
  400e32:	4798      	blx	r3
  400e34:	4603      	mov	r3, r0
  400e36:	2b00      	cmp	r3, #0
  400e38:	d028      	beq.n	400e8c <xQueueGenericSend+0x150>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  400e3a:	4b4e      	ldr	r3, [pc, #312]	; (400f74 <xQueueGenericSend+0x238>)
  400e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400e40:	601a      	str	r2, [r3, #0]
  400e42:	f3bf 8f4f 	dsb	sy
  400e46:	f3bf 8f6f 	isb	sy
  400e4a:	e01f      	b.n	400e8c <xQueueGenericSend+0x150>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400e50:	2b00      	cmp	r3, #0
  400e52:	d010      	beq.n	400e76 <xQueueGenericSend+0x13a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400e56:	3324      	adds	r3, #36	; 0x24
  400e58:	4618      	mov	r0, r3
  400e5a:	4b47      	ldr	r3, [pc, #284]	; (400f78 <xQueueGenericSend+0x23c>)
  400e5c:	4798      	blx	r3
  400e5e:	4603      	mov	r3, r0
  400e60:	2b00      	cmp	r3, #0
  400e62:	d013      	beq.n	400e8c <xQueueGenericSend+0x150>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  400e64:	4b43      	ldr	r3, [pc, #268]	; (400f74 <xQueueGenericSend+0x238>)
  400e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400e6a:	601a      	str	r2, [r3, #0]
  400e6c:	f3bf 8f4f 	dsb	sy
  400e70:	f3bf 8f6f 	isb	sy
  400e74:	e00a      	b.n	400e8c <xQueueGenericSend+0x150>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  400e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400e78:	2b00      	cmp	r3, #0
  400e7a:	d007      	beq.n	400e8c <xQueueGenericSend+0x150>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  400e7c:	4b3d      	ldr	r3, [pc, #244]	; (400f74 <xQueueGenericSend+0x238>)
  400e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400e82:	601a      	str	r2, [r3, #0]
  400e84:	f3bf 8f4f 	dsb	sy
  400e88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  400e8c:	4b3b      	ldr	r3, [pc, #236]	; (400f7c <xQueueGenericSend+0x240>)
  400e8e:	4798      	blx	r3
				return pdPASS;
  400e90:	2301      	movs	r3, #1
  400e92:	e063      	b.n	400f5c <xQueueGenericSend+0x220>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  400e94:	687b      	ldr	r3, [r7, #4]
  400e96:	2b00      	cmp	r3, #0
  400e98:	d103      	bne.n	400ea2 <xQueueGenericSend+0x166>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400e9a:	4b38      	ldr	r3, [pc, #224]	; (400f7c <xQueueGenericSend+0x240>)
  400e9c:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400e9e:	2300      	movs	r3, #0
  400ea0:	e05c      	b.n	400f5c <xQueueGenericSend+0x220>
				}
				else if( xEntryTimeSet == pdFALSE )
  400ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400ea4:	2b00      	cmp	r3, #0
  400ea6:	d106      	bne.n	400eb6 <xQueueGenericSend+0x17a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
  400ea8:	f107 0314 	add.w	r3, r7, #20
  400eac:	4618      	mov	r0, r3
  400eae:	4b34      	ldr	r3, [pc, #208]	; (400f80 <xQueueGenericSend+0x244>)
  400eb0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400eb2:	2301      	movs	r3, #1
  400eb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  400eb6:	4b31      	ldr	r3, [pc, #196]	; (400f7c <xQueueGenericSend+0x240>)
  400eb8:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400eba:	4b32      	ldr	r3, [pc, #200]	; (400f84 <xQueueGenericSend+0x248>)
  400ebc:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400ebe:	4b2a      	ldr	r3, [pc, #168]	; (400f68 <xQueueGenericSend+0x22c>)
  400ec0:	4798      	blx	r3
  400ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  400ec8:	b25b      	sxtb	r3, r3
  400eca:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ece:	d103      	bne.n	400ed8 <xQueueGenericSend+0x19c>
  400ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400ed2:	2200      	movs	r2, #0
  400ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  400ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
  400ede:	b25b      	sxtb	r3, r3
  400ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ee4:	d103      	bne.n	400eee <xQueueGenericSend+0x1b2>
  400ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400ee8:	2200      	movs	r2, #0
  400eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  400eee:	4b23      	ldr	r3, [pc, #140]	; (400f7c <xQueueGenericSend+0x240>)
  400ef0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400ef2:	1d3a      	adds	r2, r7, #4
  400ef4:	f107 0314 	add.w	r3, r7, #20
  400ef8:	4611      	mov	r1, r2
  400efa:	4618      	mov	r0, r3
  400efc:	4b22      	ldr	r3, [pc, #136]	; (400f88 <xQueueGenericSend+0x24c>)
  400efe:	4798      	blx	r3
  400f00:	4603      	mov	r3, r0
  400f02:	2b00      	cmp	r3, #0
  400f04:	d124      	bne.n	400f50 <xQueueGenericSend+0x214>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
  400f08:	4b20      	ldr	r3, [pc, #128]	; (400f8c <xQueueGenericSend+0x250>)
  400f0a:	4798      	blx	r3
  400f0c:	4603      	mov	r3, r0
  400f0e:	2b00      	cmp	r3, #0
  400f10:	d018      	beq.n	400f44 <xQueueGenericSend+0x208>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400f14:	3310      	adds	r3, #16
  400f16:	687a      	ldr	r2, [r7, #4]
  400f18:	4611      	mov	r1, r2
  400f1a:	4618      	mov	r0, r3
  400f1c:	4b1c      	ldr	r3, [pc, #112]	; (400f90 <xQueueGenericSend+0x254>)
  400f1e:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
  400f22:	4b1c      	ldr	r3, [pc, #112]	; (400f94 <xQueueGenericSend+0x258>)
  400f24:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400f26:	4b1c      	ldr	r3, [pc, #112]	; (400f98 <xQueueGenericSend+0x25c>)
  400f28:	4798      	blx	r3
  400f2a:	4603      	mov	r3, r0
  400f2c:	2b00      	cmp	r3, #0
  400f2e:	f47f af68 	bne.w	400e02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
  400f32:	4b10      	ldr	r3, [pc, #64]	; (400f74 <xQueueGenericSend+0x238>)
  400f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f38:	601a      	str	r2, [r3, #0]
  400f3a:	f3bf 8f4f 	dsb	sy
  400f3e:	f3bf 8f6f 	isb	sy
  400f42:	e75e      	b.n	400e02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
  400f46:	4b13      	ldr	r3, [pc, #76]	; (400f94 <xQueueGenericSend+0x258>)
  400f48:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400f4a:	4b13      	ldr	r3, [pc, #76]	; (400f98 <xQueueGenericSend+0x25c>)
  400f4c:	4798      	blx	r3
  400f4e:	e758      	b.n	400e02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
  400f52:	4b10      	ldr	r3, [pc, #64]	; (400f94 <xQueueGenericSend+0x258>)
  400f54:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400f56:	4b10      	ldr	r3, [pc, #64]	; (400f98 <xQueueGenericSend+0x25c>)
  400f58:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400f5a:	2300      	movs	r3, #0
		}
	}
}
  400f5c:	4618      	mov	r0, r3
  400f5e:	3738      	adds	r7, #56	; 0x38
  400f60:	46bd      	mov	sp, r7
  400f62:	bd80      	pop	{r7, pc}
  400f64:	00402505 	.word	0x00402505
  400f68:	00400561 	.word	0x00400561
  400f6c:	00401411 	.word	0x00401411
  400f70:	00401791 	.word	0x00401791
  400f74:	e000ed04 	.word	0xe000ed04
  400f78:	0040218d 	.word	0x0040218d
  400f7c:	004005c5 	.word	0x004005c5
  400f80:	0040225d 	.word	0x0040225d
  400f84:	00401ca5 	.word	0x00401ca5
  400f88:	00402289 	.word	0x00402289
  400f8c:	00401645 	.word	0x00401645
  400f90:	004020d9 	.word	0x004020d9
  400f94:	0040153d 	.word	0x0040153d
  400f98:	00401cc1 	.word	0x00401cc1

00400f9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  400f9c:	b580      	push	{r7, lr}
  400f9e:	b08e      	sub	sp, #56	; 0x38
  400fa0:	af00      	add	r7, sp, #0
  400fa2:	60f8      	str	r0, [r7, #12]
  400fa4:	60b9      	str	r1, [r7, #8]
  400fa6:	607a      	str	r2, [r7, #4]
  400fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  400faa:	68fb      	ldr	r3, [r7, #12]
  400fac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
  400fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400fb0:	2b00      	cmp	r3, #0
  400fb2:	d10b      	bne.n	400fcc <xQueueGenericSendFromISR+0x30>
  400fb4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fb8:	b672      	cpsid	i
  400fba:	f383 8811 	msr	BASEPRI, r3
  400fbe:	f3bf 8f6f 	isb	sy
  400fc2:	f3bf 8f4f 	dsb	sy
  400fc6:	b662      	cpsie	i
  400fc8:	627b      	str	r3, [r7, #36]	; 0x24
  400fca:	e7fe      	b.n	400fca <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400fcc:	68bb      	ldr	r3, [r7, #8]
  400fce:	2b00      	cmp	r3, #0
  400fd0:	d103      	bne.n	400fda <xQueueGenericSendFromISR+0x3e>
  400fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400fd6:	2b00      	cmp	r3, #0
  400fd8:	d101      	bne.n	400fde <xQueueGenericSendFromISR+0x42>
  400fda:	2301      	movs	r3, #1
  400fdc:	e000      	b.n	400fe0 <xQueueGenericSendFromISR+0x44>
  400fde:	2300      	movs	r3, #0
  400fe0:	2b00      	cmp	r3, #0
  400fe2:	d10b      	bne.n	400ffc <xQueueGenericSendFromISR+0x60>
  400fe4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fe8:	b672      	cpsid	i
  400fea:	f383 8811 	msr	BASEPRI, r3
  400fee:	f3bf 8f6f 	isb	sy
  400ff2:	f3bf 8f4f 	dsb	sy
  400ff6:	b662      	cpsie	i
  400ff8:	623b      	str	r3, [r7, #32]
  400ffa:	e7fe      	b.n	400ffa <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400ffc:	683b      	ldr	r3, [r7, #0]
  400ffe:	2b02      	cmp	r3, #2
  401000:	d103      	bne.n	40100a <xQueueGenericSendFromISR+0x6e>
  401002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  401006:	2b01      	cmp	r3, #1
  401008:	d101      	bne.n	40100e <xQueueGenericSendFromISR+0x72>
  40100a:	2301      	movs	r3, #1
  40100c:	e000      	b.n	401010 <xQueueGenericSendFromISR+0x74>
  40100e:	2300      	movs	r3, #0
  401010:	2b00      	cmp	r3, #0
  401012:	d10b      	bne.n	40102c <xQueueGenericSendFromISR+0x90>
  401014:	f04f 0380 	mov.w	r3, #128	; 0x80
  401018:	b672      	cpsid	i
  40101a:	f383 8811 	msr	BASEPRI, r3
  40101e:	f3bf 8f6f 	isb	sy
  401022:	f3bf 8f4f 	dsb	sy
  401026:	b662      	cpsie	i
  401028:	61fb      	str	r3, [r7, #28]
  40102a:	e7fe      	b.n	40102a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40102c:	4b32      	ldr	r3, [pc, #200]	; (4010f8 <xQueueGenericSendFromISR+0x15c>)
  40102e:	4798      	blx	r3
	__asm volatile
  401030:	f3ef 8211 	mrs	r2, BASEPRI
  401034:	f04f 0380 	mov.w	r3, #128	; 0x80
  401038:	b672      	cpsid	i
  40103a:	f383 8811 	msr	BASEPRI, r3
  40103e:	f3bf 8f6f 	isb	sy
  401042:	f3bf 8f4f 	dsb	sy
  401046:	b662      	cpsie	i
  401048:	61ba      	str	r2, [r7, #24]
  40104a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
  40104c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  40104e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  401058:	429a      	cmp	r2, r3
  40105a:	d302      	bcc.n	401062 <xQueueGenericSendFromISR+0xc6>
  40105c:	683b      	ldr	r3, [r7, #0]
  40105e:	2b02      	cmp	r3, #2
  401060:	d13e      	bne.n	4010e0 <xQueueGenericSendFromISR+0x144>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
  401062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
  401068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40106c:	683a      	ldr	r2, [r7, #0]
  40106e:	68b9      	ldr	r1, [r7, #8]
  401070:	6b38      	ldr	r0, [r7, #48]	; 0x30
  401072:	4b22      	ldr	r3, [pc, #136]	; (4010fc <xQueueGenericSendFromISR+0x160>)
  401074:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
  401076:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
  40107a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40107e:	d124      	bne.n	4010ca <xQueueGenericSendFromISR+0x12e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401084:	2b00      	cmp	r3, #0
  401086:	d00d      	beq.n	4010a4 <xQueueGenericSendFromISR+0x108>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  401088:	6839      	ldr	r1, [r7, #0]
  40108a:	6b38      	ldr	r0, [r7, #48]	; 0x30
  40108c:	4b1c      	ldr	r3, [pc, #112]	; (401100 <xQueueGenericSendFromISR+0x164>)
  40108e:	4798      	blx	r3
  401090:	4603      	mov	r3, r0
  401092:	2b00      	cmp	r3, #0
  401094:	d021      	beq.n	4010da <xQueueGenericSendFromISR+0x13e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  401096:	687b      	ldr	r3, [r7, #4]
  401098:	2b00      	cmp	r3, #0
  40109a:	d01e      	beq.n	4010da <xQueueGenericSendFromISR+0x13e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  40109c:	687b      	ldr	r3, [r7, #4]
  40109e:	2201      	movs	r2, #1
  4010a0:	601a      	str	r2, [r3, #0]
  4010a2:	e01a      	b.n	4010da <xQueueGenericSendFromISR+0x13e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4010a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4010a8:	2b00      	cmp	r3, #0
  4010aa:	d016      	beq.n	4010da <xQueueGenericSendFromISR+0x13e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4010ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4010ae:	3324      	adds	r3, #36	; 0x24
  4010b0:	4618      	mov	r0, r3
  4010b2:	4b14      	ldr	r3, [pc, #80]	; (401104 <xQueueGenericSendFromISR+0x168>)
  4010b4:	4798      	blx	r3
  4010b6:	4603      	mov	r3, r0
  4010b8:	2b00      	cmp	r3, #0
  4010ba:	d00e      	beq.n	4010da <xQueueGenericSendFromISR+0x13e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  4010bc:	687b      	ldr	r3, [r7, #4]
  4010be:	2b00      	cmp	r3, #0
  4010c0:	d00b      	beq.n	4010da <xQueueGenericSendFromISR+0x13e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  4010c2:	687b      	ldr	r3, [r7, #4]
  4010c4:	2201      	movs	r2, #1
  4010c6:	601a      	str	r2, [r3, #0]
  4010c8:	e007      	b.n	4010da <xQueueGenericSendFromISR+0x13e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4010ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4010ce:	3301      	adds	r3, #1
  4010d0:	b2db      	uxtb	r3, r3
  4010d2:	b25a      	sxtb	r2, r3
  4010d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4010d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
  4010da:	2301      	movs	r3, #1
  4010dc:	637b      	str	r3, [r7, #52]	; 0x34
		{
  4010de:	e001      	b.n	4010e4 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  4010e0:	2300      	movs	r3, #0
  4010e2:	637b      	str	r3, [r7, #52]	; 0x34
  4010e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010e6:	613b      	str	r3, [r7, #16]
	__asm volatile
  4010e8:	693b      	ldr	r3, [r7, #16]
  4010ea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
  4010ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
  4010f0:	4618      	mov	r0, r3
  4010f2:	3738      	adds	r7, #56	; 0x38
  4010f4:	46bd      	mov	sp, r7
  4010f6:	bd80      	pop	{r7, pc}
  4010f8:	0040071d 	.word	0x0040071d
  4010fc:	00401411 	.word	0x00401411
  401100:	00401791 	.word	0x00401791
  401104:	0040218d 	.word	0x0040218d

00401108 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
  401108:	b580      	push	{r7, lr}
  40110a:	b08c      	sub	sp, #48	; 0x30
  40110c:	af00      	add	r7, sp, #0
  40110e:	60f8      	str	r0, [r7, #12]
  401110:	60b9      	str	r1, [r7, #8]
  401112:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
  401114:	2300      	movs	r3, #0
  401116:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  401118:	68fb      	ldr	r3, [r7, #12]
  40111a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
  40111c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40111e:	2b00      	cmp	r3, #0
  401120:	d10b      	bne.n	40113a <xQueueReceive+0x32>
	__asm volatile
  401122:	f04f 0380 	mov.w	r3, #128	; 0x80
  401126:	b672      	cpsid	i
  401128:	f383 8811 	msr	BASEPRI, r3
  40112c:	f3bf 8f6f 	isb	sy
  401130:	f3bf 8f4f 	dsb	sy
  401134:	b662      	cpsie	i
  401136:	623b      	str	r3, [r7, #32]
  401138:	e7fe      	b.n	401138 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40113a:	68bb      	ldr	r3, [r7, #8]
  40113c:	2b00      	cmp	r3, #0
  40113e:	d103      	bne.n	401148 <xQueueReceive+0x40>
  401140:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401144:	2b00      	cmp	r3, #0
  401146:	d101      	bne.n	40114c <xQueueReceive+0x44>
  401148:	2301      	movs	r3, #1
  40114a:	e000      	b.n	40114e <xQueueReceive+0x46>
  40114c:	2300      	movs	r3, #0
  40114e:	2b00      	cmp	r3, #0
  401150:	d10b      	bne.n	40116a <xQueueReceive+0x62>
  401152:	f04f 0380 	mov.w	r3, #128	; 0x80
  401156:	b672      	cpsid	i
  401158:	f383 8811 	msr	BASEPRI, r3
  40115c:	f3bf 8f6f 	isb	sy
  401160:	f3bf 8f4f 	dsb	sy
  401164:	b662      	cpsie	i
  401166:	61fb      	str	r3, [r7, #28]
  401168:	e7fe      	b.n	401168 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40116a:	4b57      	ldr	r3, [pc, #348]	; (4012c8 <xQueueReceive+0x1c0>)
  40116c:	4798      	blx	r3
  40116e:	4603      	mov	r3, r0
  401170:	2b00      	cmp	r3, #0
  401172:	d102      	bne.n	40117a <xQueueReceive+0x72>
  401174:	687b      	ldr	r3, [r7, #4]
  401176:	2b00      	cmp	r3, #0
  401178:	d101      	bne.n	40117e <xQueueReceive+0x76>
  40117a:	2301      	movs	r3, #1
  40117c:	e000      	b.n	401180 <xQueueReceive+0x78>
  40117e:	2300      	movs	r3, #0
  401180:	2b00      	cmp	r3, #0
  401182:	d10b      	bne.n	40119c <xQueueReceive+0x94>
  401184:	f04f 0380 	mov.w	r3, #128	; 0x80
  401188:	b672      	cpsid	i
  40118a:	f383 8811 	msr	BASEPRI, r3
  40118e:	f3bf 8f6f 	isb	sy
  401192:	f3bf 8f4f 	dsb	sy
  401196:	b662      	cpsie	i
  401198:	61bb      	str	r3, [r7, #24]
  40119a:	e7fe      	b.n	40119a <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40119c:	4b4b      	ldr	r3, [pc, #300]	; (4012cc <xQueueReceive+0x1c4>)
  40119e:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4011a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4011a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4011a4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011a8:	2b00      	cmp	r3, #0
  4011aa:	d01f      	beq.n	4011ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4011ac:	68b9      	ldr	r1, [r7, #8]
  4011ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4011b0:	4b47      	ldr	r3, [pc, #284]	; (4012d0 <xQueueReceive+0x1c8>)
  4011b2:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  4011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011b6:	1e5a      	subs	r2, r3, #1
  4011b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4011ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4011bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4011be:	691b      	ldr	r3, [r3, #16]
  4011c0:	2b00      	cmp	r3, #0
  4011c2:	d00f      	beq.n	4011e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4011c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4011c6:	3310      	adds	r3, #16
  4011c8:	4618      	mov	r0, r3
  4011ca:	4b42      	ldr	r3, [pc, #264]	; (4012d4 <xQueueReceive+0x1cc>)
  4011cc:	4798      	blx	r3
  4011ce:	4603      	mov	r3, r0
  4011d0:	2b00      	cmp	r3, #0
  4011d2:	d007      	beq.n	4011e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
  4011d4:	4b40      	ldr	r3, [pc, #256]	; (4012d8 <xQueueReceive+0x1d0>)
  4011d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011da:	601a      	str	r2, [r3, #0]
  4011dc:	f3bf 8f4f 	dsb	sy
  4011e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
  4011e4:	4b3d      	ldr	r3, [pc, #244]	; (4012dc <xQueueReceive+0x1d4>)
  4011e6:	4798      	blx	r3
				return pdPASS;
  4011e8:	2301      	movs	r3, #1
  4011ea:	e069      	b.n	4012c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4011ec:	687b      	ldr	r3, [r7, #4]
  4011ee:	2b00      	cmp	r3, #0
  4011f0:	d103      	bne.n	4011fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4011f2:	4b3a      	ldr	r3, [pc, #232]	; (4012dc <xQueueReceive+0x1d4>)
  4011f4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  4011f6:	2300      	movs	r3, #0
  4011f8:	e062      	b.n	4012c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
  4011fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011fc:	2b00      	cmp	r3, #0
  4011fe:	d106      	bne.n	40120e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
  401200:	f107 0310 	add.w	r3, r7, #16
  401204:	4618      	mov	r0, r3
  401206:	4b36      	ldr	r3, [pc, #216]	; (4012e0 <xQueueReceive+0x1d8>)
  401208:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  40120a:	2301      	movs	r3, #1
  40120c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  40120e:	4b33      	ldr	r3, [pc, #204]	; (4012dc <xQueueReceive+0x1d4>)
  401210:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401212:	4b34      	ldr	r3, [pc, #208]	; (4012e4 <xQueueReceive+0x1dc>)
  401214:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401216:	4b2d      	ldr	r3, [pc, #180]	; (4012cc <xQueueReceive+0x1c4>)
  401218:	4798      	blx	r3
  40121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40121c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  401220:	b25b      	sxtb	r3, r3
  401222:	f1b3 3fff 	cmp.w	r3, #4294967295
  401226:	d103      	bne.n	401230 <xQueueReceive+0x128>
  401228:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40122a:	2200      	movs	r2, #0
  40122c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  401230:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
  401236:	b25b      	sxtb	r3, r3
  401238:	f1b3 3fff 	cmp.w	r3, #4294967295
  40123c:	d103      	bne.n	401246 <xQueueReceive+0x13e>
  40123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401240:	2200      	movs	r2, #0
  401242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  401246:	4b25      	ldr	r3, [pc, #148]	; (4012dc <xQueueReceive+0x1d4>)
  401248:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40124a:	1d3a      	adds	r2, r7, #4
  40124c:	f107 0310 	add.w	r3, r7, #16
  401250:	4611      	mov	r1, r2
  401252:	4618      	mov	r0, r3
  401254:	4b24      	ldr	r3, [pc, #144]	; (4012e8 <xQueueReceive+0x1e0>)
  401256:	4798      	blx	r3
  401258:	4603      	mov	r3, r0
  40125a:	2b00      	cmp	r3, #0
  40125c:	d123      	bne.n	4012a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40125e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  401260:	4b22      	ldr	r3, [pc, #136]	; (4012ec <xQueueReceive+0x1e4>)
  401262:	4798      	blx	r3
  401264:	4603      	mov	r3, r0
  401266:	2b00      	cmp	r3, #0
  401268:	d017      	beq.n	40129a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40126c:	3324      	adds	r3, #36	; 0x24
  40126e:	687a      	ldr	r2, [r7, #4]
  401270:	4611      	mov	r1, r2
  401272:	4618      	mov	r0, r3
  401274:	4b1e      	ldr	r3, [pc, #120]	; (4012f0 <xQueueReceive+0x1e8>)
  401276:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  40127a:	4b1e      	ldr	r3, [pc, #120]	; (4012f4 <xQueueReceive+0x1ec>)
  40127c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40127e:	4b1e      	ldr	r3, [pc, #120]	; (4012f8 <xQueueReceive+0x1f0>)
  401280:	4798      	blx	r3
  401282:	4603      	mov	r3, r0
  401284:	2b00      	cmp	r3, #0
  401286:	d189      	bne.n	40119c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
  401288:	4b13      	ldr	r3, [pc, #76]	; (4012d8 <xQueueReceive+0x1d0>)
  40128a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40128e:	601a      	str	r2, [r3, #0]
  401290:	f3bf 8f4f 	dsb	sy
  401294:	f3bf 8f6f 	isb	sy
  401298:	e780      	b.n	40119c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
  40129a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  40129c:	4b15      	ldr	r3, [pc, #84]	; (4012f4 <xQueueReceive+0x1ec>)
  40129e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4012a0:	4b15      	ldr	r3, [pc, #84]	; (4012f8 <xQueueReceive+0x1f0>)
  4012a2:	4798      	blx	r3
  4012a4:	e77a      	b.n	40119c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
  4012a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4012a8:	4b12      	ldr	r3, [pc, #72]	; (4012f4 <xQueueReceive+0x1ec>)
  4012aa:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4012ac:	4b12      	ldr	r3, [pc, #72]	; (4012f8 <xQueueReceive+0x1f0>)
  4012ae:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4012b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4012b2:	4b0e      	ldr	r3, [pc, #56]	; (4012ec <xQueueReceive+0x1e4>)
  4012b4:	4798      	blx	r3
  4012b6:	4603      	mov	r3, r0
  4012b8:	2b00      	cmp	r3, #0
  4012ba:	f43f af6f 	beq.w	40119c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
  4012be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
  4012c0:	4618      	mov	r0, r3
  4012c2:	3730      	adds	r7, #48	; 0x30
  4012c4:	46bd      	mov	sp, r7
  4012c6:	bd80      	pop	{r7, pc}
  4012c8:	00402505 	.word	0x00402505
  4012cc:	00400561 	.word	0x00400561
  4012d0:	004014ed 	.word	0x004014ed
  4012d4:	0040218d 	.word	0x0040218d
  4012d8:	e000ed04 	.word	0xe000ed04
  4012dc:	004005c5 	.word	0x004005c5
  4012e0:	0040225d 	.word	0x0040225d
  4012e4:	00401ca5 	.word	0x00401ca5
  4012e8:	00402289 	.word	0x00402289
  4012ec:	00401611 	.word	0x00401611
  4012f0:	004020d9 	.word	0x004020d9
  4012f4:	0040153d 	.word	0x0040153d
  4012f8:	00401cc1 	.word	0x00401cc1

004012fc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
  4012fc:	b580      	push	{r7, lr}
  4012fe:	b08e      	sub	sp, #56	; 0x38
  401300:	af00      	add	r7, sp, #0
  401302:	60f8      	str	r0, [r7, #12]
  401304:	60b9      	str	r1, [r7, #8]
  401306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  401308:	68fb      	ldr	r3, [r7, #12]
  40130a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
  40130c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40130e:	2b00      	cmp	r3, #0
  401310:	d10b      	bne.n	40132a <xQueueReceiveFromISR+0x2e>
  401312:	f04f 0380 	mov.w	r3, #128	; 0x80
  401316:	b672      	cpsid	i
  401318:	f383 8811 	msr	BASEPRI, r3
  40131c:	f3bf 8f6f 	isb	sy
  401320:	f3bf 8f4f 	dsb	sy
  401324:	b662      	cpsie	i
  401326:	623b      	str	r3, [r7, #32]
  401328:	e7fe      	b.n	401328 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40132a:	68bb      	ldr	r3, [r7, #8]
  40132c:	2b00      	cmp	r3, #0
  40132e:	d103      	bne.n	401338 <xQueueReceiveFromISR+0x3c>
  401330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401334:	2b00      	cmp	r3, #0
  401336:	d101      	bne.n	40133c <xQueueReceiveFromISR+0x40>
  401338:	2301      	movs	r3, #1
  40133a:	e000      	b.n	40133e <xQueueReceiveFromISR+0x42>
  40133c:	2300      	movs	r3, #0
  40133e:	2b00      	cmp	r3, #0
  401340:	d10b      	bne.n	40135a <xQueueReceiveFromISR+0x5e>
  401342:	f04f 0380 	mov.w	r3, #128	; 0x80
  401346:	b672      	cpsid	i
  401348:	f383 8811 	msr	BASEPRI, r3
  40134c:	f3bf 8f6f 	isb	sy
  401350:	f3bf 8f4f 	dsb	sy
  401354:	b662      	cpsie	i
  401356:	61fb      	str	r3, [r7, #28]
  401358:	e7fe      	b.n	401358 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40135a:	4b2a      	ldr	r3, [pc, #168]	; (401404 <xQueueReceiveFromISR+0x108>)
  40135c:	4798      	blx	r3
	__asm volatile
  40135e:	f3ef 8211 	mrs	r2, BASEPRI
  401362:	f04f 0380 	mov.w	r3, #128	; 0x80
  401366:	b672      	cpsid	i
  401368:	f383 8811 	msr	BASEPRI, r3
  40136c:	f3bf 8f6f 	isb	sy
  401370:	f3bf 8f4f 	dsb	sy
  401374:	b662      	cpsie	i
  401376:	61ba      	str	r2, [r7, #24]
  401378:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
  40137a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  40137c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401382:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401384:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401386:	2b00      	cmp	r3, #0
  401388:	d02f      	beq.n	4013ea <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
  40138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40138c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  401390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
  401394:	68b9      	ldr	r1, [r7, #8]
  401396:	6b38      	ldr	r0, [r7, #48]	; 0x30
  401398:	4b1b      	ldr	r3, [pc, #108]	; (401408 <xQueueReceiveFromISR+0x10c>)
  40139a:	4798      	blx	r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  40139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40139e:	1e5a      	subs	r2, r3, #1
  4013a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4013a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
  4013a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
  4013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4013ac:	d112      	bne.n	4013d4 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4013ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4013b0:	691b      	ldr	r3, [r3, #16]
  4013b2:	2b00      	cmp	r3, #0
  4013b4:	d016      	beq.n	4013e4 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4013b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4013b8:	3310      	adds	r3, #16
  4013ba:	4618      	mov	r0, r3
  4013bc:	4b13      	ldr	r3, [pc, #76]	; (40140c <xQueueReceiveFromISR+0x110>)
  4013be:	4798      	blx	r3
  4013c0:	4603      	mov	r3, r0
  4013c2:	2b00      	cmp	r3, #0
  4013c4:	d00e      	beq.n	4013e4 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
  4013c6:	687b      	ldr	r3, [r7, #4]
  4013c8:	2b00      	cmp	r3, #0
  4013ca:	d00b      	beq.n	4013e4 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  4013cc:	687b      	ldr	r3, [r7, #4]
  4013ce:	2201      	movs	r2, #1
  4013d0:	601a      	str	r2, [r3, #0]
  4013d2:	e007      	b.n	4013e4 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
  4013d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4013d8:	3301      	adds	r3, #1
  4013da:	b2db      	uxtb	r3, r3
  4013dc:	b25a      	sxtb	r2, r3
  4013de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4013e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
  4013e4:	2301      	movs	r3, #1
  4013e6:	637b      	str	r3, [r7, #52]	; 0x34
  4013e8:	e001      	b.n	4013ee <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
  4013ea:	2300      	movs	r3, #0
  4013ec:	637b      	str	r3, [r7, #52]	; 0x34
  4013ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4013f0:	613b      	str	r3, [r7, #16]
	__asm volatile
  4013f2:	693b      	ldr	r3, [r7, #16]
  4013f4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
  4013f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
  4013fa:	4618      	mov	r0, r3
  4013fc:	3738      	adds	r7, #56	; 0x38
  4013fe:	46bd      	mov	sp, r7
  401400:	bd80      	pop	{r7, pc}
  401402:	bf00      	nop
  401404:	0040071d 	.word	0x0040071d
  401408:	004014ed 	.word	0x004014ed
  40140c:	0040218d 	.word	0x0040218d

00401410 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401410:	b580      	push	{r7, lr}
  401412:	b086      	sub	sp, #24
  401414:	af00      	add	r7, sp, #0
  401416:	60f8      	str	r0, [r7, #12]
  401418:	60b9      	str	r1, [r7, #8]
  40141a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
  40141c:	2300      	movs	r3, #0
  40141e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  401420:	68fb      	ldr	r3, [r7, #12]
  401422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401424:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401426:	68fb      	ldr	r3, [r7, #12]
  401428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40142a:	2b00      	cmp	r3, #0
  40142c:	d10d      	bne.n	40144a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40142e:	68fb      	ldr	r3, [r7, #12]
  401430:	681b      	ldr	r3, [r3, #0]
  401432:	2b00      	cmp	r3, #0
  401434:	d14d      	bne.n	4014d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401436:	68fb      	ldr	r3, [r7, #12]
  401438:	685b      	ldr	r3, [r3, #4]
  40143a:	4618      	mov	r0, r3
  40143c:	4b29      	ldr	r3, [pc, #164]	; (4014e4 <prvCopyDataToQueue+0xd4>)
  40143e:	4798      	blx	r3
  401440:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
  401442:	68fb      	ldr	r3, [r7, #12]
  401444:	2200      	movs	r2, #0
  401446:	605a      	str	r2, [r3, #4]
  401448:	e043      	b.n	4014d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  40144a:	687b      	ldr	r3, [r7, #4]
  40144c:	2b00      	cmp	r3, #0
  40144e:	d119      	bne.n	401484 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401450:	68fb      	ldr	r3, [r7, #12]
  401452:	6898      	ldr	r0, [r3, #8]
  401454:	68fb      	ldr	r3, [r7, #12]
  401456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401458:	461a      	mov	r2, r3
  40145a:	68b9      	ldr	r1, [r7, #8]
  40145c:	4b22      	ldr	r3, [pc, #136]	; (4014e8 <prvCopyDataToQueue+0xd8>)
  40145e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401460:	68fb      	ldr	r3, [r7, #12]
  401462:	689a      	ldr	r2, [r3, #8]
  401464:	68fb      	ldr	r3, [r7, #12]
  401466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401468:	441a      	add	r2, r3
  40146a:	68fb      	ldr	r3, [r7, #12]
  40146c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40146e:	68fb      	ldr	r3, [r7, #12]
  401470:	689a      	ldr	r2, [r3, #8]
  401472:	68fb      	ldr	r3, [r7, #12]
  401474:	685b      	ldr	r3, [r3, #4]
  401476:	429a      	cmp	r2, r3
  401478:	d32b      	bcc.n	4014d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40147a:	68fb      	ldr	r3, [r7, #12]
  40147c:	681a      	ldr	r2, [r3, #0]
  40147e:	68fb      	ldr	r3, [r7, #12]
  401480:	609a      	str	r2, [r3, #8]
  401482:	e026      	b.n	4014d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401484:	68fb      	ldr	r3, [r7, #12]
  401486:	68d8      	ldr	r0, [r3, #12]
  401488:	68fb      	ldr	r3, [r7, #12]
  40148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40148c:	461a      	mov	r2, r3
  40148e:	68b9      	ldr	r1, [r7, #8]
  401490:	4b15      	ldr	r3, [pc, #84]	; (4014e8 <prvCopyDataToQueue+0xd8>)
  401492:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401494:	68fb      	ldr	r3, [r7, #12]
  401496:	68da      	ldr	r2, [r3, #12]
  401498:	68fb      	ldr	r3, [r7, #12]
  40149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40149c:	425b      	negs	r3, r3
  40149e:	441a      	add	r2, r3
  4014a0:	68fb      	ldr	r3, [r7, #12]
  4014a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4014a4:	68fb      	ldr	r3, [r7, #12]
  4014a6:	68da      	ldr	r2, [r3, #12]
  4014a8:	68fb      	ldr	r3, [r7, #12]
  4014aa:	681b      	ldr	r3, [r3, #0]
  4014ac:	429a      	cmp	r2, r3
  4014ae:	d207      	bcs.n	4014c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4014b0:	68fb      	ldr	r3, [r7, #12]
  4014b2:	685a      	ldr	r2, [r3, #4]
  4014b4:	68fb      	ldr	r3, [r7, #12]
  4014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4014b8:	425b      	negs	r3, r3
  4014ba:	441a      	add	r2, r3
  4014bc:	68fb      	ldr	r3, [r7, #12]
  4014be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  4014c0:	687b      	ldr	r3, [r7, #4]
  4014c2:	2b02      	cmp	r3, #2
  4014c4:	d105      	bne.n	4014d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4014c6:	693b      	ldr	r3, [r7, #16]
  4014c8:	2b00      	cmp	r3, #0
  4014ca:	d002      	beq.n	4014d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
  4014cc:	693b      	ldr	r3, [r7, #16]
  4014ce:	3b01      	subs	r3, #1
  4014d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  4014d2:	693b      	ldr	r3, [r7, #16]
  4014d4:	1c5a      	adds	r2, r3, #1
  4014d6:	68fb      	ldr	r3, [r7, #12]
  4014d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
  4014da:	697b      	ldr	r3, [r7, #20]
}
  4014dc:	4618      	mov	r0, r3
  4014de:	3718      	adds	r7, #24
  4014e0:	46bd      	mov	sp, r7
  4014e2:	bd80      	pop	{r7, pc}
  4014e4:	00402541 	.word	0x00402541
  4014e8:	00404ba9 	.word	0x00404ba9

004014ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  4014ec:	b580      	push	{r7, lr}
  4014ee:	b082      	sub	sp, #8
  4014f0:	af00      	add	r7, sp, #0
  4014f2:	6078      	str	r0, [r7, #4]
  4014f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4014f6:	687b      	ldr	r3, [r7, #4]
  4014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4014fa:	2b00      	cmp	r3, #0
  4014fc:	d018      	beq.n	401530 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4014fe:	687b      	ldr	r3, [r7, #4]
  401500:	68da      	ldr	r2, [r3, #12]
  401502:	687b      	ldr	r3, [r7, #4]
  401504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401506:	441a      	add	r2, r3
  401508:	687b      	ldr	r3, [r7, #4]
  40150a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40150c:	687b      	ldr	r3, [r7, #4]
  40150e:	68da      	ldr	r2, [r3, #12]
  401510:	687b      	ldr	r3, [r7, #4]
  401512:	685b      	ldr	r3, [r3, #4]
  401514:	429a      	cmp	r2, r3
  401516:	d303      	bcc.n	401520 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401518:	687b      	ldr	r3, [r7, #4]
  40151a:	681a      	ldr	r2, [r3, #0]
  40151c:	687b      	ldr	r3, [r7, #4]
  40151e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401520:	687b      	ldr	r3, [r7, #4]
  401522:	68d9      	ldr	r1, [r3, #12]
  401524:	687b      	ldr	r3, [r7, #4]
  401526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401528:	461a      	mov	r2, r3
  40152a:	6838      	ldr	r0, [r7, #0]
  40152c:	4b02      	ldr	r3, [pc, #8]	; (401538 <prvCopyDataFromQueue+0x4c>)
  40152e:	4798      	blx	r3
	}
}
  401530:	bf00      	nop
  401532:	3708      	adds	r7, #8
  401534:	46bd      	mov	sp, r7
  401536:	bd80      	pop	{r7, pc}
  401538:	00404ba9 	.word	0x00404ba9

0040153c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  40153c:	b580      	push	{r7, lr}
  40153e:	b084      	sub	sp, #16
  401540:	af00      	add	r7, sp, #0
  401542:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  401544:	4b2d      	ldr	r3, [pc, #180]	; (4015fc <prvUnlockQueue+0xc0>)
  401546:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
  401548:	687b      	ldr	r3, [r7, #4]
  40154a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
  40154e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401550:	e01f      	b.n	401592 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  401552:	687b      	ldr	r3, [r7, #4]
  401554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401556:	2b00      	cmp	r3, #0
  401558:	d009      	beq.n	40156e <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  40155a:	2100      	movs	r1, #0
  40155c:	6878      	ldr	r0, [r7, #4]
  40155e:	4b28      	ldr	r3, [pc, #160]	; (401600 <prvUnlockQueue+0xc4>)
  401560:	4798      	blx	r3
  401562:	4603      	mov	r3, r0
  401564:	2b00      	cmp	r3, #0
  401566:	d010      	beq.n	40158a <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  401568:	4b26      	ldr	r3, [pc, #152]	; (401604 <prvUnlockQueue+0xc8>)
  40156a:	4798      	blx	r3
  40156c:	e00d      	b.n	40158a <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40156e:	687b      	ldr	r3, [r7, #4]
  401570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401572:	2b00      	cmp	r3, #0
  401574:	d012      	beq.n	40159c <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401576:	687b      	ldr	r3, [r7, #4]
  401578:	3324      	adds	r3, #36	; 0x24
  40157a:	4618      	mov	r0, r3
  40157c:	4b22      	ldr	r3, [pc, #136]	; (401608 <prvUnlockQueue+0xcc>)
  40157e:	4798      	blx	r3
  401580:	4603      	mov	r3, r0
  401582:	2b00      	cmp	r3, #0
  401584:	d001      	beq.n	40158a <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  401586:	4b1f      	ldr	r3, [pc, #124]	; (401604 <prvUnlockQueue+0xc8>)
  401588:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
  40158a:	7bfb      	ldrb	r3, [r7, #15]
  40158c:	3b01      	subs	r3, #1
  40158e:	b2db      	uxtb	r3, r3
  401590:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401592:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401596:	2b00      	cmp	r3, #0
  401598:	dcdb      	bgt.n	401552 <prvUnlockQueue+0x16>
  40159a:	e000      	b.n	40159e <prvUnlockQueue+0x62>
						break;
  40159c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
  40159e:	687b      	ldr	r3, [r7, #4]
  4015a0:	22ff      	movs	r2, #255	; 0xff
  4015a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
  4015a6:	4b19      	ldr	r3, [pc, #100]	; (40160c <prvUnlockQueue+0xd0>)
  4015a8:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  4015aa:	4b14      	ldr	r3, [pc, #80]	; (4015fc <prvUnlockQueue+0xc0>)
  4015ac:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
  4015ae:	687b      	ldr	r3, [r7, #4]
  4015b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  4015b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
  4015b6:	e011      	b.n	4015dc <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015b8:	687b      	ldr	r3, [r7, #4]
  4015ba:	691b      	ldr	r3, [r3, #16]
  4015bc:	2b00      	cmp	r3, #0
  4015be:	d012      	beq.n	4015e6 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4015c0:	687b      	ldr	r3, [r7, #4]
  4015c2:	3310      	adds	r3, #16
  4015c4:	4618      	mov	r0, r3
  4015c6:	4b10      	ldr	r3, [pc, #64]	; (401608 <prvUnlockQueue+0xcc>)
  4015c8:	4798      	blx	r3
  4015ca:	4603      	mov	r3, r0
  4015cc:	2b00      	cmp	r3, #0
  4015ce:	d001      	beq.n	4015d4 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
  4015d0:	4b0c      	ldr	r3, [pc, #48]	; (401604 <prvUnlockQueue+0xc8>)
  4015d2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
  4015d4:	7bbb      	ldrb	r3, [r7, #14]
  4015d6:	3b01      	subs	r3, #1
  4015d8:	b2db      	uxtb	r3, r3
  4015da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
  4015dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
  4015e0:	2b00      	cmp	r3, #0
  4015e2:	dce9      	bgt.n	4015b8 <prvUnlockQueue+0x7c>
  4015e4:	e000      	b.n	4015e8 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
  4015e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
  4015e8:	687b      	ldr	r3, [r7, #4]
  4015ea:	22ff      	movs	r2, #255	; 0xff
  4015ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  4015f0:	4b06      	ldr	r3, [pc, #24]	; (40160c <prvUnlockQueue+0xd0>)
  4015f2:	4798      	blx	r3
}
  4015f4:	bf00      	nop
  4015f6:	3710      	adds	r7, #16
  4015f8:	46bd      	mov	sp, r7
  4015fa:	bd80      	pop	{r7, pc}
  4015fc:	00400561 	.word	0x00400561
  401600:	00401791 	.word	0x00401791
  401604:	0040235d 	.word	0x0040235d
  401608:	0040218d 	.word	0x0040218d
  40160c:	004005c5 	.word	0x004005c5

00401610 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  401610:	b580      	push	{r7, lr}
  401612:	b084      	sub	sp, #16
  401614:	af00      	add	r7, sp, #0
  401616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401618:	4b08      	ldr	r3, [pc, #32]	; (40163c <prvIsQueueEmpty+0x2c>)
  40161a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40161c:	687b      	ldr	r3, [r7, #4]
  40161e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401620:	2b00      	cmp	r3, #0
  401622:	d102      	bne.n	40162a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
  401624:	2301      	movs	r3, #1
  401626:	60fb      	str	r3, [r7, #12]
  401628:	e001      	b.n	40162e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
  40162a:	2300      	movs	r3, #0
  40162c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  40162e:	4b04      	ldr	r3, [pc, #16]	; (401640 <prvIsQueueEmpty+0x30>)
  401630:	4798      	blx	r3

	return xReturn;
  401632:	68fb      	ldr	r3, [r7, #12]
}
  401634:	4618      	mov	r0, r3
  401636:	3710      	adds	r7, #16
  401638:	46bd      	mov	sp, r7
  40163a:	bd80      	pop	{r7, pc}
  40163c:	00400561 	.word	0x00400561
  401640:	004005c5 	.word	0x004005c5

00401644 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
  401644:	b580      	push	{r7, lr}
  401646:	b084      	sub	sp, #16
  401648:	af00      	add	r7, sp, #0
  40164a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
  40164c:	4b09      	ldr	r3, [pc, #36]	; (401674 <prvIsQueueFull+0x30>)
  40164e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401650:	687b      	ldr	r3, [r7, #4]
  401652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401654:	687b      	ldr	r3, [r7, #4]
  401656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  401658:	429a      	cmp	r2, r3
  40165a:	d102      	bne.n	401662 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
  40165c:	2301      	movs	r3, #1
  40165e:	60fb      	str	r3, [r7, #12]
  401660:	e001      	b.n	401666 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
  401662:	2300      	movs	r3, #0
  401664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  401666:	4b04      	ldr	r3, [pc, #16]	; (401678 <prvIsQueueFull+0x34>)
  401668:	4798      	blx	r3

	return xReturn;
  40166a:	68fb      	ldr	r3, [r7, #12]
}
  40166c:	4618      	mov	r0, r3
  40166e:	3710      	adds	r7, #16
  401670:	46bd      	mov	sp, r7
  401672:	bd80      	pop	{r7, pc}
  401674:	00400561 	.word	0x00400561
  401678:	004005c5 	.word	0x004005c5

0040167c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
  40167c:	b480      	push	{r7}
  40167e:	b085      	sub	sp, #20
  401680:	af00      	add	r7, sp, #0
  401682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
  401684:	687b      	ldr	r3, [r7, #4]
  401686:	2b00      	cmp	r3, #0
  401688:	d10b      	bne.n	4016a2 <xQueueIsQueueFullFromISR+0x26>
	__asm volatile
  40168a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40168e:	b672      	cpsid	i
  401690:	f383 8811 	msr	BASEPRI, r3
  401694:	f3bf 8f6f 	isb	sy
  401698:	f3bf 8f4f 	dsb	sy
  40169c:	b662      	cpsie	i
  40169e:	60bb      	str	r3, [r7, #8]
  4016a0:	e7fe      	b.n	4016a0 <xQueueIsQueueFullFromISR+0x24>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
  4016a2:	687b      	ldr	r3, [r7, #4]
  4016a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4016a6:	687b      	ldr	r3, [r7, #4]
  4016a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4016aa:	429a      	cmp	r2, r3
  4016ac:	d102      	bne.n	4016b4 <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
  4016ae:	2301      	movs	r3, #1
  4016b0:	60fb      	str	r3, [r7, #12]
  4016b2:	e001      	b.n	4016b8 <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
  4016b4:	2300      	movs	r3, #0
  4016b6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  4016b8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
  4016ba:	4618      	mov	r0, r3
  4016bc:	3714      	adds	r7, #20
  4016be:	46bd      	mov	sp, r7
  4016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016c4:	4770      	bx	lr
	...

004016c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  4016c8:	b480      	push	{r7}
  4016ca:	b085      	sub	sp, #20
  4016cc:	af00      	add	r7, sp, #0
  4016ce:	6078      	str	r0, [r7, #4]
  4016d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4016d2:	2300      	movs	r3, #0
  4016d4:	60fb      	str	r3, [r7, #12]
  4016d6:	e014      	b.n	401702 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4016d8:	4a0e      	ldr	r2, [pc, #56]	; (401714 <vQueueAddToRegistry+0x4c>)
  4016da:	68fb      	ldr	r3, [r7, #12]
  4016dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4016e0:	2b00      	cmp	r3, #0
  4016e2:	d10b      	bne.n	4016fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4016e4:	490b      	ldr	r1, [pc, #44]	; (401714 <vQueueAddToRegistry+0x4c>)
  4016e6:	68fb      	ldr	r3, [r7, #12]
  4016e8:	683a      	ldr	r2, [r7, #0]
  4016ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4016ee:	4a09      	ldr	r2, [pc, #36]	; (401714 <vQueueAddToRegistry+0x4c>)
  4016f0:	68fb      	ldr	r3, [r7, #12]
  4016f2:	00db      	lsls	r3, r3, #3
  4016f4:	4413      	add	r3, r2
  4016f6:	687a      	ldr	r2, [r7, #4]
  4016f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  4016fa:	e005      	b.n	401708 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4016fc:	68fb      	ldr	r3, [r7, #12]
  4016fe:	3301      	adds	r3, #1
  401700:	60fb      	str	r3, [r7, #12]
  401702:	68fb      	ldr	r3, [r7, #12]
  401704:	2b07      	cmp	r3, #7
  401706:	d9e7      	bls.n	4016d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  401708:	bf00      	nop
  40170a:	3714      	adds	r7, #20
  40170c:	46bd      	mov	sp, r7
  40170e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401712:	4770      	bx	lr
  401714:	2040c588 	.word	0x2040c588

00401718 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401718:	b580      	push	{r7, lr}
  40171a:	b086      	sub	sp, #24
  40171c:	af00      	add	r7, sp, #0
  40171e:	60f8      	str	r0, [r7, #12]
  401720:	60b9      	str	r1, [r7, #8]
  401722:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  401724:	68fb      	ldr	r3, [r7, #12]
  401726:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  401728:	4b15      	ldr	r3, [pc, #84]	; (401780 <vQueueWaitForMessageRestricted+0x68>)
  40172a:	4798      	blx	r3
  40172c:	697b      	ldr	r3, [r7, #20]
  40172e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  401732:	b25b      	sxtb	r3, r3
  401734:	f1b3 3fff 	cmp.w	r3, #4294967295
  401738:	d103      	bne.n	401742 <vQueueWaitForMessageRestricted+0x2a>
  40173a:	697b      	ldr	r3, [r7, #20]
  40173c:	2200      	movs	r2, #0
  40173e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  401742:	697b      	ldr	r3, [r7, #20]
  401744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
  401748:	b25b      	sxtb	r3, r3
  40174a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40174e:	d103      	bne.n	401758 <vQueueWaitForMessageRestricted+0x40>
  401750:	697b      	ldr	r3, [r7, #20]
  401752:	2200      	movs	r2, #0
  401754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  401758:	4b0a      	ldr	r3, [pc, #40]	; (401784 <vQueueWaitForMessageRestricted+0x6c>)
  40175a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  40175c:	697b      	ldr	r3, [r7, #20]
  40175e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401760:	2b00      	cmp	r3, #0
  401762:	d106      	bne.n	401772 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401764:	697b      	ldr	r3, [r7, #20]
  401766:	3324      	adds	r3, #36	; 0x24
  401768:	687a      	ldr	r2, [r7, #4]
  40176a:	68b9      	ldr	r1, [r7, #8]
  40176c:	4618      	mov	r0, r3
  40176e:	4b06      	ldr	r3, [pc, #24]	; (401788 <vQueueWaitForMessageRestricted+0x70>)
  401770:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  401772:	6978      	ldr	r0, [r7, #20]
  401774:	4b05      	ldr	r3, [pc, #20]	; (40178c <vQueueWaitForMessageRestricted+0x74>)
  401776:	4798      	blx	r3
	}
  401778:	bf00      	nop
  40177a:	3718      	adds	r7, #24
  40177c:	46bd      	mov	sp, r7
  40177e:	bd80      	pop	{r7, pc}
  401780:	00400561 	.word	0x00400561
  401784:	004005c5 	.word	0x004005c5
  401788:	0040212d 	.word	0x0040212d
  40178c:	0040153d 	.word	0x0040153d

00401790 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401790:	b580      	push	{r7, lr}
  401792:	b088      	sub	sp, #32
  401794:	af00      	add	r7, sp, #0
  401796:	6078      	str	r0, [r7, #4]
  401798:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40179a:	687b      	ldr	r3, [r7, #4]
  40179c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40179e:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
  4017a0:	2300      	movs	r3, #0
  4017a2:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4017a4:	69bb      	ldr	r3, [r7, #24]
  4017a6:	2b00      	cmp	r3, #0
  4017a8:	d10b      	bne.n	4017c2 <prvNotifyQueueSetContainer+0x32>
  4017aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017ae:	b672      	cpsid	i
  4017b0:	f383 8811 	msr	BASEPRI, r3
  4017b4:	f3bf 8f6f 	isb	sy
  4017b8:	f3bf 8f4f 	dsb	sy
  4017bc:	b662      	cpsie	i
  4017be:	613b      	str	r3, [r7, #16]
  4017c0:	e7fe      	b.n	4017c0 <prvNotifyQueueSetContainer+0x30>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4017c2:	69bb      	ldr	r3, [r7, #24]
  4017c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4017c6:	69bb      	ldr	r3, [r7, #24]
  4017c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4017ca:	429a      	cmp	r2, r3
  4017cc:	d30b      	bcc.n	4017e6 <prvNotifyQueueSetContainer+0x56>
  4017ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017d2:	b672      	cpsid	i
  4017d4:	f383 8811 	msr	BASEPRI, r3
  4017d8:	f3bf 8f6f 	isb	sy
  4017dc:	f3bf 8f4f 	dsb	sy
  4017e0:	b662      	cpsie	i
  4017e2:	60fb      	str	r3, [r7, #12]
  4017e4:	e7fe      	b.n	4017e4 <prvNotifyQueueSetContainer+0x54>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4017e6:	69bb      	ldr	r3, [r7, #24]
  4017e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4017ea:	69bb      	ldr	r3, [r7, #24]
  4017ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4017ee:	429a      	cmp	r2, r3
  4017f0:	d225      	bcs.n	40183e <prvNotifyQueueSetContainer+0xae>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  4017f2:	69bb      	ldr	r3, [r7, #24]
  4017f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
  4017f8:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4017fa:	1d3b      	adds	r3, r7, #4
  4017fc:	683a      	ldr	r2, [r7, #0]
  4017fe:	4619      	mov	r1, r3
  401800:	69b8      	ldr	r0, [r7, #24]
  401802:	4b11      	ldr	r3, [pc, #68]	; (401848 <prvNotifyQueueSetContainer+0xb8>)
  401804:	4798      	blx	r3
  401806:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
  401808:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40180c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401810:	d10e      	bne.n	401830 <prvNotifyQueueSetContainer+0xa0>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401812:	69bb      	ldr	r3, [r7, #24]
  401814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401816:	2b00      	cmp	r3, #0
  401818:	d011      	beq.n	40183e <prvNotifyQueueSetContainer+0xae>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40181a:	69bb      	ldr	r3, [r7, #24]
  40181c:	3324      	adds	r3, #36	; 0x24
  40181e:	4618      	mov	r0, r3
  401820:	4b0a      	ldr	r3, [pc, #40]	; (40184c <prvNotifyQueueSetContainer+0xbc>)
  401822:	4798      	blx	r3
  401824:	4603      	mov	r3, r0
  401826:	2b00      	cmp	r3, #0
  401828:	d009      	beq.n	40183e <prvNotifyQueueSetContainer+0xae>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  40182a:	2301      	movs	r3, #1
  40182c:	61fb      	str	r3, [r7, #28]
  40182e:	e006      	b.n	40183e <prvNotifyQueueSetContainer+0xae>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401830:	7dfb      	ldrb	r3, [r7, #23]
  401832:	3301      	adds	r3, #1
  401834:	b2db      	uxtb	r3, r3
  401836:	b25a      	sxtb	r2, r3
  401838:	69bb      	ldr	r3, [r7, #24]
  40183a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
  40183e:	69fb      	ldr	r3, [r7, #28]
	}
  401840:	4618      	mov	r0, r3
  401842:	3720      	adds	r7, #32
  401844:	46bd      	mov	sp, r7
  401846:	bd80      	pop	{r7, pc}
  401848:	00401411 	.word	0x00401411
  40184c:	0040218d 	.word	0x0040218d

00401850 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
  401850:	b590      	push	{r4, r7, lr}
  401852:	b08d      	sub	sp, #52	; 0x34
  401854:	af04      	add	r7, sp, #16
  401856:	60f8      	str	r0, [r7, #12]
  401858:	60b9      	str	r1, [r7, #8]
  40185a:	603b      	str	r3, [r7, #0]
  40185c:	4613      	mov	r3, r2
  40185e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401860:	88fb      	ldrh	r3, [r7, #6]
  401862:	009b      	lsls	r3, r3, #2
  401864:	4618      	mov	r0, r3
  401866:	4b1b      	ldr	r3, [pc, #108]	; (4018d4 <xTaskCreate+0x84>)
  401868:	4798      	blx	r3
  40186a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
  40186c:	697b      	ldr	r3, [r7, #20]
  40186e:	2b00      	cmp	r3, #0
  401870:	d00e      	beq.n	401890 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  401872:	2058      	movs	r0, #88	; 0x58
  401874:	4b17      	ldr	r3, [pc, #92]	; (4018d4 <xTaskCreate+0x84>)
  401876:	4798      	blx	r3
  401878:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
  40187a:	69fb      	ldr	r3, [r7, #28]
  40187c:	2b00      	cmp	r3, #0
  40187e:	d003      	beq.n	401888 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
  401880:	69fb      	ldr	r3, [r7, #28]
  401882:	697a      	ldr	r2, [r7, #20]
  401884:	631a      	str	r2, [r3, #48]	; 0x30
  401886:	e005      	b.n	401894 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
  401888:	6978      	ldr	r0, [r7, #20]
  40188a:	4b13      	ldr	r3, [pc, #76]	; (4018d8 <xTaskCreate+0x88>)
  40188c:	4798      	blx	r3
  40188e:	e001      	b.n	401894 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
  401890:	2300      	movs	r3, #0
  401892:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
  401894:	69fb      	ldr	r3, [r7, #28]
  401896:	2b00      	cmp	r3, #0
  401898:	d013      	beq.n	4018c2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
  40189a:	88fa      	ldrh	r2, [r7, #6]
  40189c:	2300      	movs	r3, #0
  40189e:	9303      	str	r3, [sp, #12]
  4018a0:	69fb      	ldr	r3, [r7, #28]
  4018a2:	9302      	str	r3, [sp, #8]
  4018a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4018a6:	9301      	str	r3, [sp, #4]
  4018a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4018aa:	9300      	str	r3, [sp, #0]
  4018ac:	683b      	ldr	r3, [r7, #0]
  4018ae:	68b9      	ldr	r1, [r7, #8]
  4018b0:	68f8      	ldr	r0, [r7, #12]
  4018b2:	4c0a      	ldr	r4, [pc, #40]	; (4018dc <xTaskCreate+0x8c>)
  4018b4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
  4018b6:	69f8      	ldr	r0, [r7, #28]
  4018b8:	4b09      	ldr	r3, [pc, #36]	; (4018e0 <xTaskCreate+0x90>)
  4018ba:	4798      	blx	r3
			xReturn = pdPASS;
  4018bc:	2301      	movs	r3, #1
  4018be:	61bb      	str	r3, [r7, #24]
  4018c0:	e002      	b.n	4018c8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4018c2:	f04f 33ff 	mov.w	r3, #4294967295
  4018c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
  4018c8:	69bb      	ldr	r3, [r7, #24]
	}
  4018ca:	4618      	mov	r0, r3
  4018cc:	3724      	adds	r7, #36	; 0x24
  4018ce:	46bd      	mov	sp, r7
  4018d0:	bd90      	pop	{r4, r7, pc}
  4018d2:	bf00      	nop
  4018d4:	004007a1 	.word	0x004007a1
  4018d8:	0040094d 	.word	0x0040094d
  4018dc:	004018e5 	.word	0x004018e5
  4018e0:	00401a01 	.word	0x00401a01

004018e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
  4018e4:	b580      	push	{r7, lr}
  4018e6:	b088      	sub	sp, #32
  4018e8:	af00      	add	r7, sp, #0
  4018ea:	60f8      	str	r0, [r7, #12]
  4018ec:	60b9      	str	r1, [r7, #8]
  4018ee:	607a      	str	r2, [r7, #4]
  4018f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  4018f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4018f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
  4018f6:	687b      	ldr	r3, [r7, #4]
  4018f8:	009b      	lsls	r3, r3, #2
  4018fa:	461a      	mov	r2, r3
  4018fc:	21a5      	movs	r1, #165	; 0xa5
  4018fe:	4b3d      	ldr	r3, [pc, #244]	; (4019f4 <prvInitialiseNewTask+0x110>)
  401900:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  401902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401906:	6879      	ldr	r1, [r7, #4]
  401908:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  40190c:	440b      	add	r3, r1
  40190e:	009b      	lsls	r3, r3, #2
  401910:	4413      	add	r3, r2
  401912:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401914:	69bb      	ldr	r3, [r7, #24]
  401916:	f023 0307 	bic.w	r3, r3, #7
  40191a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  40191c:	69bb      	ldr	r3, [r7, #24]
  40191e:	f003 0307 	and.w	r3, r3, #7
  401922:	2b00      	cmp	r3, #0
  401924:	d00b      	beq.n	40193e <prvInitialiseNewTask+0x5a>
  401926:	f04f 0380 	mov.w	r3, #128	; 0x80
  40192a:	b672      	cpsid	i
  40192c:	f383 8811 	msr	BASEPRI, r3
  401930:	f3bf 8f6f 	isb	sy
  401934:	f3bf 8f4f 	dsb	sy
  401938:	b662      	cpsie	i
  40193a:	617b      	str	r3, [r7, #20]
  40193c:	e7fe      	b.n	40193c <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40193e:	2300      	movs	r3, #0
  401940:	61fb      	str	r3, [r7, #28]
  401942:	e012      	b.n	40196a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401944:	68ba      	ldr	r2, [r7, #8]
  401946:	69fb      	ldr	r3, [r7, #28]
  401948:	4413      	add	r3, r2
  40194a:	7819      	ldrb	r1, [r3, #0]
  40194c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40194e:	69fb      	ldr	r3, [r7, #28]
  401950:	4413      	add	r3, r2
  401952:	3334      	adds	r3, #52	; 0x34
  401954:	460a      	mov	r2, r1
  401956:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  401958:	68ba      	ldr	r2, [r7, #8]
  40195a:	69fb      	ldr	r3, [r7, #28]
  40195c:	4413      	add	r3, r2
  40195e:	781b      	ldrb	r3, [r3, #0]
  401960:	2b00      	cmp	r3, #0
  401962:	d006      	beq.n	401972 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401964:	69fb      	ldr	r3, [r7, #28]
  401966:	3301      	adds	r3, #1
  401968:	61fb      	str	r3, [r7, #28]
  40196a:	69fb      	ldr	r3, [r7, #28]
  40196c:	2b09      	cmp	r3, #9
  40196e:	d9e9      	bls.n	401944 <prvInitialiseNewTask+0x60>
  401970:	e000      	b.n	401974 <prvInitialiseNewTask+0x90>
		{
			break;
  401972:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401976:	2200      	movs	r2, #0
  401978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
  40197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40197e:	2b04      	cmp	r3, #4
  401980:	d901      	bls.n	401986 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
  401982:	2304      	movs	r3, #4
  401984:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
  401986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401988:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40198a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
  40198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40198e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  401990:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  401992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401994:	2200      	movs	r2, #0
  401996:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  401998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40199a:	3304      	adds	r3, #4
  40199c:	4618      	mov	r0, r3
  40199e:	4b16      	ldr	r3, [pc, #88]	; (4019f8 <prvInitialiseNewTask+0x114>)
  4019a0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  4019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4019a4:	3318      	adds	r3, #24
  4019a6:	4618      	mov	r0, r3
  4019a8:	4b13      	ldr	r3, [pc, #76]	; (4019f8 <prvInitialiseNewTask+0x114>)
  4019aa:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  4019ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4019ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4019b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4019b4:	f1c3 0205 	rsb	r2, r3, #5
  4019b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4019ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  4019bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4019be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4019c0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
  4019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4019c4:	2200      	movs	r2, #0
  4019c6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  4019c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4019ca:	2200      	movs	r2, #0
  4019cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4019d0:	683a      	ldr	r2, [r7, #0]
  4019d2:	68f9      	ldr	r1, [r7, #12]
  4019d4:	69b8      	ldr	r0, [r7, #24]
  4019d6:	4b09      	ldr	r3, [pc, #36]	; (4019fc <prvInitialiseNewTask+0x118>)
  4019d8:	4798      	blx	r3
  4019da:	4602      	mov	r2, r0
  4019dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4019de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
  4019e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019e2:	2b00      	cmp	r3, #0
  4019e4:	d002      	beq.n	4019ec <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4019e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4019ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  4019ec:	bf00      	nop
  4019ee:	3720      	adds	r7, #32
  4019f0:	46bd      	mov	sp, r7
  4019f2:	bd80      	pop	{r7, pc}
  4019f4:	00404cdd 	.word	0x00404cdd
  4019f8:	004001ed 	.word	0x004001ed
  4019fc:	00400315 	.word	0x00400315

00401a00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
  401a00:	b580      	push	{r7, lr}
  401a02:	b082      	sub	sp, #8
  401a04:	af00      	add	r7, sp, #0
  401a06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
  401a08:	4b2d      	ldr	r3, [pc, #180]	; (401ac0 <prvAddNewTaskToReadyList+0xc0>)
  401a0a:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
  401a0c:	4b2d      	ldr	r3, [pc, #180]	; (401ac4 <prvAddNewTaskToReadyList+0xc4>)
  401a0e:	681b      	ldr	r3, [r3, #0]
  401a10:	3301      	adds	r3, #1
  401a12:	4a2c      	ldr	r2, [pc, #176]	; (401ac4 <prvAddNewTaskToReadyList+0xc4>)
  401a14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  401a16:	4b2c      	ldr	r3, [pc, #176]	; (401ac8 <prvAddNewTaskToReadyList+0xc8>)
  401a18:	681b      	ldr	r3, [r3, #0]
  401a1a:	2b00      	cmp	r3, #0
  401a1c:	d109      	bne.n	401a32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
  401a1e:	4a2a      	ldr	r2, [pc, #168]	; (401ac8 <prvAddNewTaskToReadyList+0xc8>)
  401a20:	687b      	ldr	r3, [r7, #4]
  401a22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401a24:	4b27      	ldr	r3, [pc, #156]	; (401ac4 <prvAddNewTaskToReadyList+0xc4>)
  401a26:	681b      	ldr	r3, [r3, #0]
  401a28:	2b01      	cmp	r3, #1
  401a2a:	d110      	bne.n	401a4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
  401a2c:	4b27      	ldr	r3, [pc, #156]	; (401acc <prvAddNewTaskToReadyList+0xcc>)
  401a2e:	4798      	blx	r3
  401a30:	e00d      	b.n	401a4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
  401a32:	4b27      	ldr	r3, [pc, #156]	; (401ad0 <prvAddNewTaskToReadyList+0xd0>)
  401a34:	681b      	ldr	r3, [r3, #0]
  401a36:	2b00      	cmp	r3, #0
  401a38:	d109      	bne.n	401a4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  401a3a:	4b23      	ldr	r3, [pc, #140]	; (401ac8 <prvAddNewTaskToReadyList+0xc8>)
  401a3c:	681b      	ldr	r3, [r3, #0]
  401a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401a40:	687b      	ldr	r3, [r7, #4]
  401a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a44:	429a      	cmp	r2, r3
  401a46:	d802      	bhi.n	401a4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
  401a48:	4a1f      	ldr	r2, [pc, #124]	; (401ac8 <prvAddNewTaskToReadyList+0xc8>)
  401a4a:	687b      	ldr	r3, [r7, #4]
  401a4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
  401a4e:	4b21      	ldr	r3, [pc, #132]	; (401ad4 <prvAddNewTaskToReadyList+0xd4>)
  401a50:	681b      	ldr	r3, [r3, #0]
  401a52:	3301      	adds	r3, #1
  401a54:	4a1f      	ldr	r2, [pc, #124]	; (401ad4 <prvAddNewTaskToReadyList+0xd4>)
  401a56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  401a58:	4b1e      	ldr	r3, [pc, #120]	; (401ad4 <prvAddNewTaskToReadyList+0xd4>)
  401a5a:	681a      	ldr	r2, [r3, #0]
  401a5c:	687b      	ldr	r3, [r7, #4]
  401a5e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
  401a60:	687b      	ldr	r3, [r7, #4]
  401a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a64:	2201      	movs	r2, #1
  401a66:	409a      	lsls	r2, r3
  401a68:	4b1b      	ldr	r3, [pc, #108]	; (401ad8 <prvAddNewTaskToReadyList+0xd8>)
  401a6a:	681b      	ldr	r3, [r3, #0]
  401a6c:	4313      	orrs	r3, r2
  401a6e:	4a1a      	ldr	r2, [pc, #104]	; (401ad8 <prvAddNewTaskToReadyList+0xd8>)
  401a70:	6013      	str	r3, [r2, #0]
  401a72:	687b      	ldr	r3, [r7, #4]
  401a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401a76:	4613      	mov	r3, r2
  401a78:	009b      	lsls	r3, r3, #2
  401a7a:	4413      	add	r3, r2
  401a7c:	009b      	lsls	r3, r3, #2
  401a7e:	4a17      	ldr	r2, [pc, #92]	; (401adc <prvAddNewTaskToReadyList+0xdc>)
  401a80:	441a      	add	r2, r3
  401a82:	687b      	ldr	r3, [r7, #4]
  401a84:	3304      	adds	r3, #4
  401a86:	4619      	mov	r1, r3
  401a88:	4610      	mov	r0, r2
  401a8a:	4b15      	ldr	r3, [pc, #84]	; (401ae0 <prvAddNewTaskToReadyList+0xe0>)
  401a8c:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
  401a8e:	4b15      	ldr	r3, [pc, #84]	; (401ae4 <prvAddNewTaskToReadyList+0xe4>)
  401a90:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
  401a92:	4b0f      	ldr	r3, [pc, #60]	; (401ad0 <prvAddNewTaskToReadyList+0xd0>)
  401a94:	681b      	ldr	r3, [r3, #0]
  401a96:	2b00      	cmp	r3, #0
  401a98:	d00e      	beq.n	401ab8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  401a9a:	4b0b      	ldr	r3, [pc, #44]	; (401ac8 <prvAddNewTaskToReadyList+0xc8>)
  401a9c:	681b      	ldr	r3, [r3, #0]
  401a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401aa0:	687b      	ldr	r3, [r7, #4]
  401aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401aa4:	429a      	cmp	r2, r3
  401aa6:	d207      	bcs.n	401ab8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
  401aa8:	4b0f      	ldr	r3, [pc, #60]	; (401ae8 <prvAddNewTaskToReadyList+0xe8>)
  401aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401aae:	601a      	str	r2, [r3, #0]
  401ab0:	f3bf 8f4f 	dsb	sy
  401ab4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  401ab8:	bf00      	nop
  401aba:	3708      	adds	r7, #8
  401abc:	46bd      	mov	sp, r7
  401abe:	bd80      	pop	{r7, pc}
  401ac0:	00400561 	.word	0x00400561
  401ac4:	2040c2e0 	.word	0x2040c2e0
  401ac8:	2040c208 	.word	0x2040c208
  401acc:	004023a9 	.word	0x004023a9
  401ad0:	2040c2ec 	.word	0x2040c2ec
  401ad4:	2040c2fc 	.word	0x2040c2fc
  401ad8:	2040c2e8 	.word	0x2040c2e8
  401adc:	2040c20c 	.word	0x2040c20c
  401ae0:	00400207 	.word	0x00400207
  401ae4:	004005c5 	.word	0x004005c5
  401ae8:	e000ed04 	.word	0xe000ed04

00401aec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
  401aec:	b580      	push	{r7, lr}
  401aee:	b08a      	sub	sp, #40	; 0x28
  401af0:	af00      	add	r7, sp, #0
  401af2:	6078      	str	r0, [r7, #4]
  401af4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
  401af6:	2300      	movs	r3, #0
  401af8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
  401afa:	687b      	ldr	r3, [r7, #4]
  401afc:	2b00      	cmp	r3, #0
  401afe:	d10b      	bne.n	401b18 <vTaskDelayUntil+0x2c>
  401b00:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b04:	b672      	cpsid	i
  401b06:	f383 8811 	msr	BASEPRI, r3
  401b0a:	f3bf 8f6f 	isb	sy
  401b0e:	f3bf 8f4f 	dsb	sy
  401b12:	b662      	cpsie	i
  401b14:	617b      	str	r3, [r7, #20]
  401b16:	e7fe      	b.n	401b16 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
  401b18:	683b      	ldr	r3, [r7, #0]
  401b1a:	2b00      	cmp	r3, #0
  401b1c:	d10b      	bne.n	401b36 <vTaskDelayUntil+0x4a>
  401b1e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b22:	b672      	cpsid	i
  401b24:	f383 8811 	msr	BASEPRI, r3
  401b28:	f3bf 8f6f 	isb	sy
  401b2c:	f3bf 8f4f 	dsb	sy
  401b30:	b662      	cpsie	i
  401b32:	613b      	str	r3, [r7, #16]
  401b34:	e7fe      	b.n	401b34 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
  401b36:	4b2a      	ldr	r3, [pc, #168]	; (401be0 <vTaskDelayUntil+0xf4>)
  401b38:	681b      	ldr	r3, [r3, #0]
  401b3a:	2b00      	cmp	r3, #0
  401b3c:	d00b      	beq.n	401b56 <vTaskDelayUntil+0x6a>
  401b3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b42:	b672      	cpsid	i
  401b44:	f383 8811 	msr	BASEPRI, r3
  401b48:	f3bf 8f6f 	isb	sy
  401b4c:	f3bf 8f4f 	dsb	sy
  401b50:	b662      	cpsie	i
  401b52:	60fb      	str	r3, [r7, #12]
  401b54:	e7fe      	b.n	401b54 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
  401b56:	4b23      	ldr	r3, [pc, #140]	; (401be4 <vTaskDelayUntil+0xf8>)
  401b58:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  401b5a:	4b23      	ldr	r3, [pc, #140]	; (401be8 <vTaskDelayUntil+0xfc>)
  401b5c:	681b      	ldr	r3, [r3, #0]
  401b5e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
  401b60:	687b      	ldr	r3, [r7, #4]
  401b62:	681a      	ldr	r2, [r3, #0]
  401b64:	683b      	ldr	r3, [r7, #0]
  401b66:	4413      	add	r3, r2
  401b68:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
  401b6a:	687b      	ldr	r3, [r7, #4]
  401b6c:	681a      	ldr	r2, [r3, #0]
  401b6e:	6a3b      	ldr	r3, [r7, #32]
  401b70:	429a      	cmp	r2, r3
  401b72:	d90b      	bls.n	401b8c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
  401b74:	687b      	ldr	r3, [r7, #4]
  401b76:	681a      	ldr	r2, [r3, #0]
  401b78:	69fb      	ldr	r3, [r7, #28]
  401b7a:	429a      	cmp	r2, r3
  401b7c:	d911      	bls.n	401ba2 <vTaskDelayUntil+0xb6>
  401b7e:	69fa      	ldr	r2, [r7, #28]
  401b80:	6a3b      	ldr	r3, [r7, #32]
  401b82:	429a      	cmp	r2, r3
  401b84:	d90d      	bls.n	401ba2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
  401b86:	2301      	movs	r3, #1
  401b88:	627b      	str	r3, [r7, #36]	; 0x24
  401b8a:	e00a      	b.n	401ba2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
  401b8c:	687b      	ldr	r3, [r7, #4]
  401b8e:	681a      	ldr	r2, [r3, #0]
  401b90:	69fb      	ldr	r3, [r7, #28]
  401b92:	429a      	cmp	r2, r3
  401b94:	d803      	bhi.n	401b9e <vTaskDelayUntil+0xb2>
  401b96:	69fa      	ldr	r2, [r7, #28]
  401b98:	6a3b      	ldr	r3, [r7, #32]
  401b9a:	429a      	cmp	r2, r3
  401b9c:	d901      	bls.n	401ba2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
  401b9e:	2301      	movs	r3, #1
  401ba0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
  401ba2:	687b      	ldr	r3, [r7, #4]
  401ba4:	69fa      	ldr	r2, [r7, #28]
  401ba6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
  401ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401baa:	2b00      	cmp	r3, #0
  401bac:	d006      	beq.n	401bbc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
  401bae:	69fa      	ldr	r2, [r7, #28]
  401bb0:	6a3b      	ldr	r3, [r7, #32]
  401bb2:	1ad3      	subs	r3, r2, r3
  401bb4:	2100      	movs	r1, #0
  401bb6:	4618      	mov	r0, r3
  401bb8:	4b0c      	ldr	r3, [pc, #48]	; (401bec <vTaskDelayUntil+0x100>)
  401bba:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
  401bbc:	4b0c      	ldr	r3, [pc, #48]	; (401bf0 <vTaskDelayUntil+0x104>)
  401bbe:	4798      	blx	r3
  401bc0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401bc2:	69bb      	ldr	r3, [r7, #24]
  401bc4:	2b00      	cmp	r3, #0
  401bc6:	d107      	bne.n	401bd8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
  401bc8:	4b0a      	ldr	r3, [pc, #40]	; (401bf4 <vTaskDelayUntil+0x108>)
  401bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401bce:	601a      	str	r2, [r3, #0]
  401bd0:	f3bf 8f4f 	dsb	sy
  401bd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
  401bd8:	bf00      	nop
  401bda:	3728      	adds	r7, #40	; 0x28
  401bdc:	46bd      	mov	sp, r7
  401bde:	bd80      	pop	{r7, pc}
  401be0:	2040c308 	.word	0x2040c308
  401be4:	00401ca5 	.word	0x00401ca5
  401be8:	2040c2e4 	.word	0x2040c2e4
  401bec:	00402659 	.word	0x00402659
  401bf0:	00401cc1 	.word	0x00401cc1
  401bf4:	e000ed04 	.word	0xe000ed04

00401bf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  401bf8:	b590      	push	{r4, r7, lr}
  401bfa:	b087      	sub	sp, #28
  401bfc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
  401bfe:	4b20      	ldr	r3, [pc, #128]	; (401c80 <vTaskStartScheduler+0x88>)
  401c00:	9301      	str	r3, [sp, #4]
  401c02:	2300      	movs	r3, #0
  401c04:	9300      	str	r3, [sp, #0]
  401c06:	2300      	movs	r3, #0
  401c08:	2282      	movs	r2, #130	; 0x82
  401c0a:	491e      	ldr	r1, [pc, #120]	; (401c84 <vTaskStartScheduler+0x8c>)
  401c0c:	481e      	ldr	r0, [pc, #120]	; (401c88 <vTaskStartScheduler+0x90>)
  401c0e:	4c1f      	ldr	r4, [pc, #124]	; (401c8c <vTaskStartScheduler+0x94>)
  401c10:	47a0      	blx	r4
  401c12:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401c14:	68fb      	ldr	r3, [r7, #12]
  401c16:	2b01      	cmp	r3, #1
  401c18:	d102      	bne.n	401c20 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
  401c1a:	4b1d      	ldr	r3, [pc, #116]	; (401c90 <vTaskStartScheduler+0x98>)
  401c1c:	4798      	blx	r3
  401c1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  401c20:	68fb      	ldr	r3, [r7, #12]
  401c22:	2b01      	cmp	r3, #1
  401c24:	d117      	bne.n	401c56 <vTaskStartScheduler+0x5e>
  401c26:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c2a:	b672      	cpsid	i
  401c2c:	f383 8811 	msr	BASEPRI, r3
  401c30:	f3bf 8f6f 	isb	sy
  401c34:	f3bf 8f4f 	dsb	sy
  401c38:	b662      	cpsie	i
  401c3a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  401c3c:	4b15      	ldr	r3, [pc, #84]	; (401c94 <vTaskStartScheduler+0x9c>)
  401c3e:	f04f 32ff 	mov.w	r2, #4294967295
  401c42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401c44:	4b14      	ldr	r3, [pc, #80]	; (401c98 <vTaskStartScheduler+0xa0>)
  401c46:	2201      	movs	r2, #1
  401c48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401c4a:	4b14      	ldr	r3, [pc, #80]	; (401c9c <vTaskStartScheduler+0xa4>)
  401c4c:	2200      	movs	r2, #0
  401c4e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401c50:	4b13      	ldr	r3, [pc, #76]	; (401ca0 <vTaskStartScheduler+0xa8>)
  401c52:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
  401c54:	e00f      	b.n	401c76 <vTaskStartScheduler+0x7e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401c56:	68fb      	ldr	r3, [r7, #12]
  401c58:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c5c:	d10b      	bne.n	401c76 <vTaskStartScheduler+0x7e>
  401c5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c62:	b672      	cpsid	i
  401c64:	f383 8811 	msr	BASEPRI, r3
  401c68:	f3bf 8f6f 	isb	sy
  401c6c:	f3bf 8f4f 	dsb	sy
  401c70:	b662      	cpsie	i
  401c72:	607b      	str	r3, [r7, #4]
  401c74:	e7fe      	b.n	401c74 <vTaskStartScheduler+0x7c>
}
  401c76:	bf00      	nop
  401c78:	3714      	adds	r7, #20
  401c7a:	46bd      	mov	sp, r7
  401c7c:	bd90      	pop	{r4, r7, pc}
  401c7e:	bf00      	nop
  401c80:	2040c304 	.word	0x2040c304
  401c84:	0040a7d0 	.word	0x0040a7d0
  401c88:	00402375 	.word	0x00402375
  401c8c:	00401851 	.word	0x00401851
  401c90:	00402731 	.word	0x00402731
  401c94:	2040c300 	.word	0x2040c300
  401c98:	2040c2ec 	.word	0x2040c2ec
  401c9c:	2040c2e4 	.word	0x2040c2e4
  401ca0:	00400431 	.word	0x00400431

00401ca4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  401ca4:	b480      	push	{r7}
  401ca6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  401ca8:	4b04      	ldr	r3, [pc, #16]	; (401cbc <vTaskSuspendAll+0x18>)
  401caa:	681b      	ldr	r3, [r3, #0]
  401cac:	3301      	adds	r3, #1
  401cae:	4a03      	ldr	r2, [pc, #12]	; (401cbc <vTaskSuspendAll+0x18>)
  401cb0:	6013      	str	r3, [r2, #0]
}
  401cb2:	bf00      	nop
  401cb4:	46bd      	mov	sp, r7
  401cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cba:	4770      	bx	lr
  401cbc:	2040c308 	.word	0x2040c308

00401cc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  401cc0:	b580      	push	{r7, lr}
  401cc2:	b084      	sub	sp, #16
  401cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
  401cc6:	2300      	movs	r3, #0
  401cc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
  401cca:	2300      	movs	r3, #0
  401ccc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401cce:	4b42      	ldr	r3, [pc, #264]	; (401dd8 <xTaskResumeAll+0x118>)
  401cd0:	681b      	ldr	r3, [r3, #0]
  401cd2:	2b00      	cmp	r3, #0
  401cd4:	d10b      	bne.n	401cee <xTaskResumeAll+0x2e>
  401cd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cda:	b672      	cpsid	i
  401cdc:	f383 8811 	msr	BASEPRI, r3
  401ce0:	f3bf 8f6f 	isb	sy
  401ce4:	f3bf 8f4f 	dsb	sy
  401ce8:	b662      	cpsie	i
  401cea:	603b      	str	r3, [r7, #0]
  401cec:	e7fe      	b.n	401cec <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401cee:	4b3b      	ldr	r3, [pc, #236]	; (401ddc <xTaskResumeAll+0x11c>)
  401cf0:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401cf2:	4b39      	ldr	r3, [pc, #228]	; (401dd8 <xTaskResumeAll+0x118>)
  401cf4:	681b      	ldr	r3, [r3, #0]
  401cf6:	3b01      	subs	r3, #1
  401cf8:	4a37      	ldr	r2, [pc, #220]	; (401dd8 <xTaskResumeAll+0x118>)
  401cfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401cfc:	4b36      	ldr	r3, [pc, #216]	; (401dd8 <xTaskResumeAll+0x118>)
  401cfe:	681b      	ldr	r3, [r3, #0]
  401d00:	2b00      	cmp	r3, #0
  401d02:	d161      	bne.n	401dc8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401d04:	4b36      	ldr	r3, [pc, #216]	; (401de0 <xTaskResumeAll+0x120>)
  401d06:	681b      	ldr	r3, [r3, #0]
  401d08:	2b00      	cmp	r3, #0
  401d0a:	d05d      	beq.n	401dc8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401d0c:	e02e      	b.n	401d6c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401d0e:	4b35      	ldr	r3, [pc, #212]	; (401de4 <xTaskResumeAll+0x124>)
  401d10:	68db      	ldr	r3, [r3, #12]
  401d12:	68db      	ldr	r3, [r3, #12]
  401d14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401d16:	68fb      	ldr	r3, [r7, #12]
  401d18:	3318      	adds	r3, #24
  401d1a:	4618      	mov	r0, r3
  401d1c:	4b32      	ldr	r3, [pc, #200]	; (401de8 <xTaskResumeAll+0x128>)
  401d1e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401d20:	68fb      	ldr	r3, [r7, #12]
  401d22:	3304      	adds	r3, #4
  401d24:	4618      	mov	r0, r3
  401d26:	4b30      	ldr	r3, [pc, #192]	; (401de8 <xTaskResumeAll+0x128>)
  401d28:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  401d2a:	68fb      	ldr	r3, [r7, #12]
  401d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d2e:	2201      	movs	r2, #1
  401d30:	409a      	lsls	r2, r3
  401d32:	4b2e      	ldr	r3, [pc, #184]	; (401dec <xTaskResumeAll+0x12c>)
  401d34:	681b      	ldr	r3, [r3, #0]
  401d36:	4313      	orrs	r3, r2
  401d38:	4a2c      	ldr	r2, [pc, #176]	; (401dec <xTaskResumeAll+0x12c>)
  401d3a:	6013      	str	r3, [r2, #0]
  401d3c:	68fb      	ldr	r3, [r7, #12]
  401d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d40:	4613      	mov	r3, r2
  401d42:	009b      	lsls	r3, r3, #2
  401d44:	4413      	add	r3, r2
  401d46:	009b      	lsls	r3, r3, #2
  401d48:	4a29      	ldr	r2, [pc, #164]	; (401df0 <xTaskResumeAll+0x130>)
  401d4a:	441a      	add	r2, r3
  401d4c:	68fb      	ldr	r3, [r7, #12]
  401d4e:	3304      	adds	r3, #4
  401d50:	4619      	mov	r1, r3
  401d52:	4610      	mov	r0, r2
  401d54:	4b27      	ldr	r3, [pc, #156]	; (401df4 <xTaskResumeAll+0x134>)
  401d56:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401d58:	68fb      	ldr	r3, [r7, #12]
  401d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d5c:	4b26      	ldr	r3, [pc, #152]	; (401df8 <xTaskResumeAll+0x138>)
  401d5e:	681b      	ldr	r3, [r3, #0]
  401d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d62:	429a      	cmp	r2, r3
  401d64:	d302      	bcc.n	401d6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
  401d66:	4b25      	ldr	r3, [pc, #148]	; (401dfc <xTaskResumeAll+0x13c>)
  401d68:	2201      	movs	r2, #1
  401d6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401d6c:	4b1d      	ldr	r3, [pc, #116]	; (401de4 <xTaskResumeAll+0x124>)
  401d6e:	681b      	ldr	r3, [r3, #0]
  401d70:	2b00      	cmp	r3, #0
  401d72:	d1cc      	bne.n	401d0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
  401d74:	68fb      	ldr	r3, [r7, #12]
  401d76:	2b00      	cmp	r3, #0
  401d78:	d001      	beq.n	401d7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
  401d7a:	4b21      	ldr	r3, [pc, #132]	; (401e00 <xTaskResumeAll+0x140>)
  401d7c:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  401d7e:	4b21      	ldr	r3, [pc, #132]	; (401e04 <xTaskResumeAll+0x144>)
  401d80:	681b      	ldr	r3, [r3, #0]
  401d82:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
  401d84:	687b      	ldr	r3, [r7, #4]
  401d86:	2b00      	cmp	r3, #0
  401d88:	d010      	beq.n	401dac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
  401d8a:	4b1f      	ldr	r3, [pc, #124]	; (401e08 <xTaskResumeAll+0x148>)
  401d8c:	4798      	blx	r3
  401d8e:	4603      	mov	r3, r0
  401d90:	2b00      	cmp	r3, #0
  401d92:	d002      	beq.n	401d9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
  401d94:	4b19      	ldr	r3, [pc, #100]	; (401dfc <xTaskResumeAll+0x13c>)
  401d96:	2201      	movs	r2, #1
  401d98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
  401d9a:	687b      	ldr	r3, [r7, #4]
  401d9c:	3b01      	subs	r3, #1
  401d9e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  401da0:	687b      	ldr	r3, [r7, #4]
  401da2:	2b00      	cmp	r3, #0
  401da4:	d1f1      	bne.n	401d8a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
  401da6:	4b17      	ldr	r3, [pc, #92]	; (401e04 <xTaskResumeAll+0x144>)
  401da8:	2200      	movs	r2, #0
  401daa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
  401dac:	4b13      	ldr	r3, [pc, #76]	; (401dfc <xTaskResumeAll+0x13c>)
  401dae:	681b      	ldr	r3, [r3, #0]
  401db0:	2b00      	cmp	r3, #0
  401db2:	d009      	beq.n	401dc8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  401db4:	2301      	movs	r3, #1
  401db6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  401db8:	4b14      	ldr	r3, [pc, #80]	; (401e0c <xTaskResumeAll+0x14c>)
  401dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401dbe:	601a      	str	r2, [r3, #0]
  401dc0:	f3bf 8f4f 	dsb	sy
  401dc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401dc8:	4b11      	ldr	r3, [pc, #68]	; (401e10 <xTaskResumeAll+0x150>)
  401dca:	4798      	blx	r3

	return xAlreadyYielded;
  401dcc:	68bb      	ldr	r3, [r7, #8]
}
  401dce:	4618      	mov	r0, r3
  401dd0:	3710      	adds	r7, #16
  401dd2:	46bd      	mov	sp, r7
  401dd4:	bd80      	pop	{r7, pc}
  401dd6:	bf00      	nop
  401dd8:	2040c308 	.word	0x2040c308
  401ddc:	00400561 	.word	0x00400561
  401de0:	2040c2e0 	.word	0x2040c2e0
  401de4:	2040c2a0 	.word	0x2040c2a0
  401de8:	004002c1 	.word	0x004002c1
  401dec:	2040c2e8 	.word	0x2040c2e8
  401df0:	2040c20c 	.word	0x2040c20c
  401df4:	00400207 	.word	0x00400207
  401df8:	2040c208 	.word	0x2040c208
  401dfc:	2040c2f4 	.word	0x2040c2f4
  401e00:	004024b9 	.word	0x004024b9
  401e04:	2040c2f0 	.word	0x2040c2f0
  401e08:	00401e35 	.word	0x00401e35
  401e0c:	e000ed04 	.word	0xe000ed04
  401e10:	004005c5 	.word	0x004005c5

00401e14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
  401e14:	b480      	push	{r7}
  401e16:	b083      	sub	sp, #12
  401e18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  401e1a:	4b05      	ldr	r3, [pc, #20]	; (401e30 <xTaskGetTickCount+0x1c>)
  401e1c:	681b      	ldr	r3, [r3, #0]
  401e1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
  401e20:	687b      	ldr	r3, [r7, #4]
}
  401e22:	4618      	mov	r0, r3
  401e24:	370c      	adds	r7, #12
  401e26:	46bd      	mov	sp, r7
  401e28:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e2c:	4770      	bx	lr
  401e2e:	bf00      	nop
  401e30:	2040c2e4 	.word	0x2040c2e4

00401e34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  401e34:	b580      	push	{r7, lr}
  401e36:	b086      	sub	sp, #24
  401e38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401e3a:	2300      	movs	r3, #0
  401e3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401e3e:	4b55      	ldr	r3, [pc, #340]	; (401f94 <xTaskIncrementTick+0x160>)
  401e40:	681b      	ldr	r3, [r3, #0]
  401e42:	2b00      	cmp	r3, #0
  401e44:	f040 8094 	bne.w	401f70 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  401e48:	4b53      	ldr	r3, [pc, #332]	; (401f98 <xTaskIncrementTick+0x164>)
  401e4a:	681b      	ldr	r3, [r3, #0]
  401e4c:	3301      	adds	r3, #1
  401e4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
  401e50:	4a51      	ldr	r2, [pc, #324]	; (401f98 <xTaskIncrementTick+0x164>)
  401e52:	693b      	ldr	r3, [r7, #16]
  401e54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  401e56:	693b      	ldr	r3, [r7, #16]
  401e58:	2b00      	cmp	r3, #0
  401e5a:	d121      	bne.n	401ea0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
  401e5c:	4b4f      	ldr	r3, [pc, #316]	; (401f9c <xTaskIncrementTick+0x168>)
  401e5e:	681b      	ldr	r3, [r3, #0]
  401e60:	681b      	ldr	r3, [r3, #0]
  401e62:	2b00      	cmp	r3, #0
  401e64:	d00b      	beq.n	401e7e <xTaskIncrementTick+0x4a>
  401e66:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e6a:	b672      	cpsid	i
  401e6c:	f383 8811 	msr	BASEPRI, r3
  401e70:	f3bf 8f6f 	isb	sy
  401e74:	f3bf 8f4f 	dsb	sy
  401e78:	b662      	cpsie	i
  401e7a:	603b      	str	r3, [r7, #0]
  401e7c:	e7fe      	b.n	401e7c <xTaskIncrementTick+0x48>
  401e7e:	4b47      	ldr	r3, [pc, #284]	; (401f9c <xTaskIncrementTick+0x168>)
  401e80:	681b      	ldr	r3, [r3, #0]
  401e82:	60fb      	str	r3, [r7, #12]
  401e84:	4b46      	ldr	r3, [pc, #280]	; (401fa0 <xTaskIncrementTick+0x16c>)
  401e86:	681b      	ldr	r3, [r3, #0]
  401e88:	4a44      	ldr	r2, [pc, #272]	; (401f9c <xTaskIncrementTick+0x168>)
  401e8a:	6013      	str	r3, [r2, #0]
  401e8c:	4a44      	ldr	r2, [pc, #272]	; (401fa0 <xTaskIncrementTick+0x16c>)
  401e8e:	68fb      	ldr	r3, [r7, #12]
  401e90:	6013      	str	r3, [r2, #0]
  401e92:	4b44      	ldr	r3, [pc, #272]	; (401fa4 <xTaskIncrementTick+0x170>)
  401e94:	681b      	ldr	r3, [r3, #0]
  401e96:	3301      	adds	r3, #1
  401e98:	4a42      	ldr	r2, [pc, #264]	; (401fa4 <xTaskIncrementTick+0x170>)
  401e9a:	6013      	str	r3, [r2, #0]
  401e9c:	4b42      	ldr	r3, [pc, #264]	; (401fa8 <xTaskIncrementTick+0x174>)
  401e9e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
  401ea0:	4b42      	ldr	r3, [pc, #264]	; (401fac <xTaskIncrementTick+0x178>)
  401ea2:	681b      	ldr	r3, [r3, #0]
  401ea4:	693a      	ldr	r2, [r7, #16]
  401ea6:	429a      	cmp	r2, r3
  401ea8:	d34d      	bcc.n	401f46 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401eaa:	4b3c      	ldr	r3, [pc, #240]	; (401f9c <xTaskIncrementTick+0x168>)
  401eac:	681b      	ldr	r3, [r3, #0]
  401eae:	681b      	ldr	r3, [r3, #0]
  401eb0:	2b00      	cmp	r3, #0
  401eb2:	d101      	bne.n	401eb8 <xTaskIncrementTick+0x84>
  401eb4:	2301      	movs	r3, #1
  401eb6:	e000      	b.n	401eba <xTaskIncrementTick+0x86>
  401eb8:	2300      	movs	r3, #0
  401eba:	2b00      	cmp	r3, #0
  401ebc:	d004      	beq.n	401ec8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ebe:	4b3b      	ldr	r3, [pc, #236]	; (401fac <xTaskIncrementTick+0x178>)
  401ec0:	f04f 32ff 	mov.w	r2, #4294967295
  401ec4:	601a      	str	r2, [r3, #0]
					break;
  401ec6:	e03e      	b.n	401f46 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401ec8:	4b34      	ldr	r3, [pc, #208]	; (401f9c <xTaskIncrementTick+0x168>)
  401eca:	681b      	ldr	r3, [r3, #0]
  401ecc:	68db      	ldr	r3, [r3, #12]
  401ece:	68db      	ldr	r3, [r3, #12]
  401ed0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  401ed2:	68bb      	ldr	r3, [r7, #8]
  401ed4:	685b      	ldr	r3, [r3, #4]
  401ed6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
  401ed8:	693a      	ldr	r2, [r7, #16]
  401eda:	687b      	ldr	r3, [r7, #4]
  401edc:	429a      	cmp	r2, r3
  401ede:	d203      	bcs.n	401ee8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
  401ee0:	4a32      	ldr	r2, [pc, #200]	; (401fac <xTaskIncrementTick+0x178>)
  401ee2:	687b      	ldr	r3, [r7, #4]
  401ee4:	6013      	str	r3, [r2, #0]
						break;
  401ee6:	e02e      	b.n	401f46 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401ee8:	68bb      	ldr	r3, [r7, #8]
  401eea:	3304      	adds	r3, #4
  401eec:	4618      	mov	r0, r3
  401eee:	4b30      	ldr	r3, [pc, #192]	; (401fb0 <xTaskIncrementTick+0x17c>)
  401ef0:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401ef2:	68bb      	ldr	r3, [r7, #8]
  401ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401ef6:	2b00      	cmp	r3, #0
  401ef8:	d004      	beq.n	401f04 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401efa:	68bb      	ldr	r3, [r7, #8]
  401efc:	3318      	adds	r3, #24
  401efe:	4618      	mov	r0, r3
  401f00:	4b2b      	ldr	r3, [pc, #172]	; (401fb0 <xTaskIncrementTick+0x17c>)
  401f02:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
  401f04:	68bb      	ldr	r3, [r7, #8]
  401f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f08:	2201      	movs	r2, #1
  401f0a:	409a      	lsls	r2, r3
  401f0c:	4b29      	ldr	r3, [pc, #164]	; (401fb4 <xTaskIncrementTick+0x180>)
  401f0e:	681b      	ldr	r3, [r3, #0]
  401f10:	4313      	orrs	r3, r2
  401f12:	4a28      	ldr	r2, [pc, #160]	; (401fb4 <xTaskIncrementTick+0x180>)
  401f14:	6013      	str	r3, [r2, #0]
  401f16:	68bb      	ldr	r3, [r7, #8]
  401f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401f1a:	4613      	mov	r3, r2
  401f1c:	009b      	lsls	r3, r3, #2
  401f1e:	4413      	add	r3, r2
  401f20:	009b      	lsls	r3, r3, #2
  401f22:	4a25      	ldr	r2, [pc, #148]	; (401fb8 <xTaskIncrementTick+0x184>)
  401f24:	441a      	add	r2, r3
  401f26:	68bb      	ldr	r3, [r7, #8]
  401f28:	3304      	adds	r3, #4
  401f2a:	4619      	mov	r1, r3
  401f2c:	4610      	mov	r0, r2
  401f2e:	4b23      	ldr	r3, [pc, #140]	; (401fbc <xTaskIncrementTick+0x188>)
  401f30:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401f32:	68bb      	ldr	r3, [r7, #8]
  401f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401f36:	4b22      	ldr	r3, [pc, #136]	; (401fc0 <xTaskIncrementTick+0x18c>)
  401f38:	681b      	ldr	r3, [r3, #0]
  401f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f3c:	429a      	cmp	r2, r3
  401f3e:	d3b4      	bcc.n	401eaa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
  401f40:	2301      	movs	r3, #1
  401f42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401f44:	e7b1      	b.n	401eaa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401f46:	4b1e      	ldr	r3, [pc, #120]	; (401fc0 <xTaskIncrementTick+0x18c>)
  401f48:	681b      	ldr	r3, [r3, #0]
  401f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401f4c:	491a      	ldr	r1, [pc, #104]	; (401fb8 <xTaskIncrementTick+0x184>)
  401f4e:	4613      	mov	r3, r2
  401f50:	009b      	lsls	r3, r3, #2
  401f52:	4413      	add	r3, r2
  401f54:	009b      	lsls	r3, r3, #2
  401f56:	440b      	add	r3, r1
  401f58:	681b      	ldr	r3, [r3, #0]
  401f5a:	2b01      	cmp	r3, #1
  401f5c:	d901      	bls.n	401f62 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
  401f5e:	2301      	movs	r3, #1
  401f60:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401f62:	4b18      	ldr	r3, [pc, #96]	; (401fc4 <xTaskIncrementTick+0x190>)
  401f64:	681b      	ldr	r3, [r3, #0]
  401f66:	2b00      	cmp	r3, #0
  401f68:	d109      	bne.n	401f7e <xTaskIncrementTick+0x14a>
			{
				vApplicationTickHook();
  401f6a:	4b17      	ldr	r3, [pc, #92]	; (401fc8 <xTaskIncrementTick+0x194>)
  401f6c:	4798      	blx	r3
  401f6e:	e006      	b.n	401f7e <xTaskIncrementTick+0x14a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  401f70:	4b14      	ldr	r3, [pc, #80]	; (401fc4 <xTaskIncrementTick+0x190>)
  401f72:	681b      	ldr	r3, [r3, #0]
  401f74:	3301      	adds	r3, #1
  401f76:	4a13      	ldr	r2, [pc, #76]	; (401fc4 <xTaskIncrementTick+0x190>)
  401f78:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
  401f7a:	4b13      	ldr	r3, [pc, #76]	; (401fc8 <xTaskIncrementTick+0x194>)
  401f7c:	4798      	blx	r3
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  401f7e:	4b13      	ldr	r3, [pc, #76]	; (401fcc <xTaskIncrementTick+0x198>)
  401f80:	681b      	ldr	r3, [r3, #0]
  401f82:	2b00      	cmp	r3, #0
  401f84:	d001      	beq.n	401f8a <xTaskIncrementTick+0x156>
		{
			xSwitchRequired = pdTRUE;
  401f86:	2301      	movs	r3, #1
  401f88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
  401f8a:	697b      	ldr	r3, [r7, #20]
}
  401f8c:	4618      	mov	r0, r3
  401f8e:	3718      	adds	r7, #24
  401f90:	46bd      	mov	sp, r7
  401f92:	bd80      	pop	{r7, pc}
  401f94:	2040c308 	.word	0x2040c308
  401f98:	2040c2e4 	.word	0x2040c2e4
  401f9c:	2040c298 	.word	0x2040c298
  401fa0:	2040c29c 	.word	0x2040c29c
  401fa4:	2040c2f8 	.word	0x2040c2f8
  401fa8:	004024b9 	.word	0x004024b9
  401fac:	2040c300 	.word	0x2040c300
  401fb0:	004002c1 	.word	0x004002c1
  401fb4:	2040c2e8 	.word	0x2040c2e8
  401fb8:	2040c20c 	.word	0x2040c20c
  401fbc:	00400207 	.word	0x00400207
  401fc0:	2040c208 	.word	0x2040c208
  401fc4:	2040c2f0 	.word	0x2040c2f0
  401fc8:	00404241 	.word	0x00404241
  401fcc:	2040c2f4 	.word	0x2040c2f4

00401fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401fd0:	b580      	push	{r7, lr}
  401fd2:	b088      	sub	sp, #32
  401fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401fd6:	4b3a      	ldr	r3, [pc, #232]	; (4020c0 <vTaskSwitchContext+0xf0>)
  401fd8:	681b      	ldr	r3, [r3, #0]
  401fda:	2b00      	cmp	r3, #0
  401fdc:	d003      	beq.n	401fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  401fde:	4b39      	ldr	r3, [pc, #228]	; (4020c4 <vTaskSwitchContext+0xf4>)
  401fe0:	2201      	movs	r2, #1
  401fe2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
  401fe4:	e067      	b.n	4020b6 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
  401fe6:	4b37      	ldr	r3, [pc, #220]	; (4020c4 <vTaskSwitchContext+0xf4>)
  401fe8:	2200      	movs	r2, #0
  401fea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401fec:	4b36      	ldr	r3, [pc, #216]	; (4020c8 <vTaskSwitchContext+0xf8>)
  401fee:	681b      	ldr	r3, [r3, #0]
  401ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ff2:	61fb      	str	r3, [r7, #28]
  401ff4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
  401ff8:	61bb      	str	r3, [r7, #24]
  401ffa:	69fb      	ldr	r3, [r7, #28]
  401ffc:	681a      	ldr	r2, [r3, #0]
  401ffe:	69bb      	ldr	r3, [r7, #24]
  402000:	429a      	cmp	r2, r3
  402002:	d111      	bne.n	402028 <vTaskSwitchContext+0x58>
  402004:	69fb      	ldr	r3, [r7, #28]
  402006:	3304      	adds	r3, #4
  402008:	681a      	ldr	r2, [r3, #0]
  40200a:	69bb      	ldr	r3, [r7, #24]
  40200c:	429a      	cmp	r2, r3
  40200e:	d10b      	bne.n	402028 <vTaskSwitchContext+0x58>
  402010:	69fb      	ldr	r3, [r7, #28]
  402012:	3308      	adds	r3, #8
  402014:	681a      	ldr	r2, [r3, #0]
  402016:	69bb      	ldr	r3, [r7, #24]
  402018:	429a      	cmp	r2, r3
  40201a:	d105      	bne.n	402028 <vTaskSwitchContext+0x58>
  40201c:	69fb      	ldr	r3, [r7, #28]
  40201e:	330c      	adds	r3, #12
  402020:	681a      	ldr	r2, [r3, #0]
  402022:	69bb      	ldr	r3, [r7, #24]
  402024:	429a      	cmp	r2, r3
  402026:	d008      	beq.n	40203a <vTaskSwitchContext+0x6a>
  402028:	4b27      	ldr	r3, [pc, #156]	; (4020c8 <vTaskSwitchContext+0xf8>)
  40202a:	681a      	ldr	r2, [r3, #0]
  40202c:	4b26      	ldr	r3, [pc, #152]	; (4020c8 <vTaskSwitchContext+0xf8>)
  40202e:	681b      	ldr	r3, [r3, #0]
  402030:	3334      	adds	r3, #52	; 0x34
  402032:	4619      	mov	r1, r3
  402034:	4610      	mov	r0, r2
  402036:	4b25      	ldr	r3, [pc, #148]	; (4020cc <vTaskSwitchContext+0xfc>)
  402038:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40203a:	4b25      	ldr	r3, [pc, #148]	; (4020d0 <vTaskSwitchContext+0x100>)
  40203c:	681b      	ldr	r3, [r3, #0]
  40203e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  402040:	68fb      	ldr	r3, [r7, #12]
  402042:	fab3 f383 	clz	r3, r3
  402046:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
  402048:	7afb      	ldrb	r3, [r7, #11]
  40204a:	f1c3 031f 	rsb	r3, r3, #31
  40204e:	617b      	str	r3, [r7, #20]
  402050:	4920      	ldr	r1, [pc, #128]	; (4020d4 <vTaskSwitchContext+0x104>)
  402052:	697a      	ldr	r2, [r7, #20]
  402054:	4613      	mov	r3, r2
  402056:	009b      	lsls	r3, r3, #2
  402058:	4413      	add	r3, r2
  40205a:	009b      	lsls	r3, r3, #2
  40205c:	440b      	add	r3, r1
  40205e:	681b      	ldr	r3, [r3, #0]
  402060:	2b00      	cmp	r3, #0
  402062:	d10b      	bne.n	40207c <vTaskSwitchContext+0xac>
	__asm volatile
  402064:	f04f 0380 	mov.w	r3, #128	; 0x80
  402068:	b672      	cpsid	i
  40206a:	f383 8811 	msr	BASEPRI, r3
  40206e:	f3bf 8f6f 	isb	sy
  402072:	f3bf 8f4f 	dsb	sy
  402076:	b662      	cpsie	i
  402078:	607b      	str	r3, [r7, #4]
  40207a:	e7fe      	b.n	40207a <vTaskSwitchContext+0xaa>
  40207c:	697a      	ldr	r2, [r7, #20]
  40207e:	4613      	mov	r3, r2
  402080:	009b      	lsls	r3, r3, #2
  402082:	4413      	add	r3, r2
  402084:	009b      	lsls	r3, r3, #2
  402086:	4a13      	ldr	r2, [pc, #76]	; (4020d4 <vTaskSwitchContext+0x104>)
  402088:	4413      	add	r3, r2
  40208a:	613b      	str	r3, [r7, #16]
  40208c:	693b      	ldr	r3, [r7, #16]
  40208e:	685b      	ldr	r3, [r3, #4]
  402090:	685a      	ldr	r2, [r3, #4]
  402092:	693b      	ldr	r3, [r7, #16]
  402094:	605a      	str	r2, [r3, #4]
  402096:	693b      	ldr	r3, [r7, #16]
  402098:	685a      	ldr	r2, [r3, #4]
  40209a:	693b      	ldr	r3, [r7, #16]
  40209c:	3308      	adds	r3, #8
  40209e:	429a      	cmp	r2, r3
  4020a0:	d104      	bne.n	4020ac <vTaskSwitchContext+0xdc>
  4020a2:	693b      	ldr	r3, [r7, #16]
  4020a4:	685b      	ldr	r3, [r3, #4]
  4020a6:	685a      	ldr	r2, [r3, #4]
  4020a8:	693b      	ldr	r3, [r7, #16]
  4020aa:	605a      	str	r2, [r3, #4]
  4020ac:	693b      	ldr	r3, [r7, #16]
  4020ae:	685b      	ldr	r3, [r3, #4]
  4020b0:	68db      	ldr	r3, [r3, #12]
  4020b2:	4a05      	ldr	r2, [pc, #20]	; (4020c8 <vTaskSwitchContext+0xf8>)
  4020b4:	6013      	str	r3, [r2, #0]
}
  4020b6:	bf00      	nop
  4020b8:	3720      	adds	r7, #32
  4020ba:	46bd      	mov	sp, r7
  4020bc:	bd80      	pop	{r7, pc}
  4020be:	bf00      	nop
  4020c0:	2040c308 	.word	0x2040c308
  4020c4:	2040c2f4 	.word	0x2040c2f4
  4020c8:	2040c208 	.word	0x2040c208
  4020cc:	0040421f 	.word	0x0040421f
  4020d0:	2040c2e8 	.word	0x2040c2e8
  4020d4:	2040c20c 	.word	0x2040c20c

004020d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  4020d8:	b580      	push	{r7, lr}
  4020da:	b084      	sub	sp, #16
  4020dc:	af00      	add	r7, sp, #0
  4020de:	6078      	str	r0, [r7, #4]
  4020e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
  4020e2:	687b      	ldr	r3, [r7, #4]
  4020e4:	2b00      	cmp	r3, #0
  4020e6:	d10b      	bne.n	402100 <vTaskPlaceOnEventList+0x28>
  4020e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020ec:	b672      	cpsid	i
  4020ee:	f383 8811 	msr	BASEPRI, r3
  4020f2:	f3bf 8f6f 	isb	sy
  4020f6:	f3bf 8f4f 	dsb	sy
  4020fa:	b662      	cpsie	i
  4020fc:	60fb      	str	r3, [r7, #12]
  4020fe:	e7fe      	b.n	4020fe <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402100:	4b07      	ldr	r3, [pc, #28]	; (402120 <vTaskPlaceOnEventList+0x48>)
  402102:	681b      	ldr	r3, [r3, #0]
  402104:	3318      	adds	r3, #24
  402106:	4619      	mov	r1, r3
  402108:	6878      	ldr	r0, [r7, #4]
  40210a:	4b06      	ldr	r3, [pc, #24]	; (402124 <vTaskPlaceOnEventList+0x4c>)
  40210c:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  40210e:	2101      	movs	r1, #1
  402110:	6838      	ldr	r0, [r7, #0]
  402112:	4b05      	ldr	r3, [pc, #20]	; (402128 <vTaskPlaceOnEventList+0x50>)
  402114:	4798      	blx	r3
}
  402116:	bf00      	nop
  402118:	3710      	adds	r7, #16
  40211a:	46bd      	mov	sp, r7
  40211c:	bd80      	pop	{r7, pc}
  40211e:	bf00      	nop
  402120:	2040c208 	.word	0x2040c208
  402124:	0040024f 	.word	0x0040024f
  402128:	00402659 	.word	0x00402659

0040212c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  40212c:	b580      	push	{r7, lr}
  40212e:	b086      	sub	sp, #24
  402130:	af00      	add	r7, sp, #0
  402132:	60f8      	str	r0, [r7, #12]
  402134:	60b9      	str	r1, [r7, #8]
  402136:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
  402138:	68fb      	ldr	r3, [r7, #12]
  40213a:	2b00      	cmp	r3, #0
  40213c:	d10b      	bne.n	402156 <vTaskPlaceOnEventListRestricted+0x2a>
  40213e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402142:	b672      	cpsid	i
  402144:	f383 8811 	msr	BASEPRI, r3
  402148:	f3bf 8f6f 	isb	sy
  40214c:	f3bf 8f4f 	dsb	sy
  402150:	b662      	cpsie	i
  402152:	617b      	str	r3, [r7, #20]
  402154:	e7fe      	b.n	402154 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402156:	4b0a      	ldr	r3, [pc, #40]	; (402180 <vTaskPlaceOnEventListRestricted+0x54>)
  402158:	681b      	ldr	r3, [r3, #0]
  40215a:	3318      	adds	r3, #24
  40215c:	4619      	mov	r1, r3
  40215e:	68f8      	ldr	r0, [r7, #12]
  402160:	4b08      	ldr	r3, [pc, #32]	; (402184 <vTaskPlaceOnEventListRestricted+0x58>)
  402162:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
  402164:	687b      	ldr	r3, [r7, #4]
  402166:	2b00      	cmp	r3, #0
  402168:	d002      	beq.n	402170 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
  40216a:	f04f 33ff 	mov.w	r3, #4294967295
  40216e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  402170:	6879      	ldr	r1, [r7, #4]
  402172:	68b8      	ldr	r0, [r7, #8]
  402174:	4b04      	ldr	r3, [pc, #16]	; (402188 <vTaskPlaceOnEventListRestricted+0x5c>)
  402176:	4798      	blx	r3
	}
  402178:	bf00      	nop
  40217a:	3718      	adds	r7, #24
  40217c:	46bd      	mov	sp, r7
  40217e:	bd80      	pop	{r7, pc}
  402180:	2040c208 	.word	0x2040c208
  402184:	00400207 	.word	0x00400207
  402188:	00402659 	.word	0x00402659

0040218c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  40218c:	b580      	push	{r7, lr}
  40218e:	b086      	sub	sp, #24
  402190:	af00      	add	r7, sp, #0
  402192:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402194:	687b      	ldr	r3, [r7, #4]
  402196:	68db      	ldr	r3, [r3, #12]
  402198:	68db      	ldr	r3, [r3, #12]
  40219a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
  40219c:	693b      	ldr	r3, [r7, #16]
  40219e:	2b00      	cmp	r3, #0
  4021a0:	d10b      	bne.n	4021ba <xTaskRemoveFromEventList+0x2e>
  4021a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021a6:	b672      	cpsid	i
  4021a8:	f383 8811 	msr	BASEPRI, r3
  4021ac:	f3bf 8f6f 	isb	sy
  4021b0:	f3bf 8f4f 	dsb	sy
  4021b4:	b662      	cpsie	i
  4021b6:	60fb      	str	r3, [r7, #12]
  4021b8:	e7fe      	b.n	4021b8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4021ba:	693b      	ldr	r3, [r7, #16]
  4021bc:	3318      	adds	r3, #24
  4021be:	4618      	mov	r0, r3
  4021c0:	4b1e      	ldr	r3, [pc, #120]	; (40223c <xTaskRemoveFromEventList+0xb0>)
  4021c2:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4021c4:	4b1e      	ldr	r3, [pc, #120]	; (402240 <xTaskRemoveFromEventList+0xb4>)
  4021c6:	681b      	ldr	r3, [r3, #0]
  4021c8:	2b00      	cmp	r3, #0
  4021ca:	d11c      	bne.n	402206 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  4021cc:	693b      	ldr	r3, [r7, #16]
  4021ce:	3304      	adds	r3, #4
  4021d0:	4618      	mov	r0, r3
  4021d2:	4b1a      	ldr	r3, [pc, #104]	; (40223c <xTaskRemoveFromEventList+0xb0>)
  4021d4:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4021d6:	693b      	ldr	r3, [r7, #16]
  4021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4021da:	2201      	movs	r2, #1
  4021dc:	409a      	lsls	r2, r3
  4021de:	4b19      	ldr	r3, [pc, #100]	; (402244 <xTaskRemoveFromEventList+0xb8>)
  4021e0:	681b      	ldr	r3, [r3, #0]
  4021e2:	4313      	orrs	r3, r2
  4021e4:	4a17      	ldr	r2, [pc, #92]	; (402244 <xTaskRemoveFromEventList+0xb8>)
  4021e6:	6013      	str	r3, [r2, #0]
  4021e8:	693b      	ldr	r3, [r7, #16]
  4021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4021ec:	4613      	mov	r3, r2
  4021ee:	009b      	lsls	r3, r3, #2
  4021f0:	4413      	add	r3, r2
  4021f2:	009b      	lsls	r3, r3, #2
  4021f4:	4a14      	ldr	r2, [pc, #80]	; (402248 <xTaskRemoveFromEventList+0xbc>)
  4021f6:	441a      	add	r2, r3
  4021f8:	693b      	ldr	r3, [r7, #16]
  4021fa:	3304      	adds	r3, #4
  4021fc:	4619      	mov	r1, r3
  4021fe:	4610      	mov	r0, r2
  402200:	4b12      	ldr	r3, [pc, #72]	; (40224c <xTaskRemoveFromEventList+0xc0>)
  402202:	4798      	blx	r3
  402204:	e005      	b.n	402212 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402206:	693b      	ldr	r3, [r7, #16]
  402208:	3318      	adds	r3, #24
  40220a:	4619      	mov	r1, r3
  40220c:	4810      	ldr	r0, [pc, #64]	; (402250 <xTaskRemoveFromEventList+0xc4>)
  40220e:	4b0f      	ldr	r3, [pc, #60]	; (40224c <xTaskRemoveFromEventList+0xc0>)
  402210:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402212:	693b      	ldr	r3, [r7, #16]
  402214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402216:	4b0f      	ldr	r3, [pc, #60]	; (402254 <xTaskRemoveFromEventList+0xc8>)
  402218:	681b      	ldr	r3, [r3, #0]
  40221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40221c:	429a      	cmp	r2, r3
  40221e:	d905      	bls.n	40222c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
  402220:	2301      	movs	r3, #1
  402222:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  402224:	4b0c      	ldr	r3, [pc, #48]	; (402258 <xTaskRemoveFromEventList+0xcc>)
  402226:	2201      	movs	r2, #1
  402228:	601a      	str	r2, [r3, #0]
  40222a:	e001      	b.n	402230 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
  40222c:	2300      	movs	r3, #0
  40222e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
  402230:	697b      	ldr	r3, [r7, #20]
}
  402232:	4618      	mov	r0, r3
  402234:	3718      	adds	r7, #24
  402236:	46bd      	mov	sp, r7
  402238:	bd80      	pop	{r7, pc}
  40223a:	bf00      	nop
  40223c:	004002c1 	.word	0x004002c1
  402240:	2040c308 	.word	0x2040c308
  402244:	2040c2e8 	.word	0x2040c2e8
  402248:	2040c20c 	.word	0x2040c20c
  40224c:	00400207 	.word	0x00400207
  402250:	2040c2a0 	.word	0x2040c2a0
  402254:	2040c208 	.word	0x2040c208
  402258:	2040c2f4 	.word	0x2040c2f4

0040225c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
  40225c:	b480      	push	{r7}
  40225e:	b083      	sub	sp, #12
  402260:	af00      	add	r7, sp, #0
  402262:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402264:	4b06      	ldr	r3, [pc, #24]	; (402280 <vTaskInternalSetTimeOutState+0x24>)
  402266:	681a      	ldr	r2, [r3, #0]
  402268:	687b      	ldr	r3, [r7, #4]
  40226a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40226c:	4b05      	ldr	r3, [pc, #20]	; (402284 <vTaskInternalSetTimeOutState+0x28>)
  40226e:	681a      	ldr	r2, [r3, #0]
  402270:	687b      	ldr	r3, [r7, #4]
  402272:	605a      	str	r2, [r3, #4]
}
  402274:	bf00      	nop
  402276:	370c      	adds	r7, #12
  402278:	46bd      	mov	sp, r7
  40227a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40227e:	4770      	bx	lr
  402280:	2040c2f8 	.word	0x2040c2f8
  402284:	2040c2e4 	.word	0x2040c2e4

00402288 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  402288:	b580      	push	{r7, lr}
  40228a:	b088      	sub	sp, #32
  40228c:	af00      	add	r7, sp, #0
  40228e:	6078      	str	r0, [r7, #4]
  402290:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  402292:	687b      	ldr	r3, [r7, #4]
  402294:	2b00      	cmp	r3, #0
  402296:	d10b      	bne.n	4022b0 <xTaskCheckForTimeOut+0x28>
  402298:	f04f 0380 	mov.w	r3, #128	; 0x80
  40229c:	b672      	cpsid	i
  40229e:	f383 8811 	msr	BASEPRI, r3
  4022a2:	f3bf 8f6f 	isb	sy
  4022a6:	f3bf 8f4f 	dsb	sy
  4022aa:	b662      	cpsie	i
  4022ac:	613b      	str	r3, [r7, #16]
  4022ae:	e7fe      	b.n	4022ae <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
  4022b0:	683b      	ldr	r3, [r7, #0]
  4022b2:	2b00      	cmp	r3, #0
  4022b4:	d10b      	bne.n	4022ce <xTaskCheckForTimeOut+0x46>
  4022b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ba:	b672      	cpsid	i
  4022bc:	f383 8811 	msr	BASEPRI, r3
  4022c0:	f3bf 8f6f 	isb	sy
  4022c4:	f3bf 8f4f 	dsb	sy
  4022c8:	b662      	cpsie	i
  4022ca:	60fb      	str	r3, [r7, #12]
  4022cc:	e7fe      	b.n	4022cc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
  4022ce:	4b1e      	ldr	r3, [pc, #120]	; (402348 <xTaskCheckForTimeOut+0xc0>)
  4022d0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  4022d2:	4b1e      	ldr	r3, [pc, #120]	; (40234c <xTaskCheckForTimeOut+0xc4>)
  4022d4:	681b      	ldr	r3, [r3, #0]
  4022d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  4022d8:	687b      	ldr	r3, [r7, #4]
  4022da:	685b      	ldr	r3, [r3, #4]
  4022dc:	69ba      	ldr	r2, [r7, #24]
  4022de:	1ad3      	subs	r3, r2, r3
  4022e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
  4022e2:	683b      	ldr	r3, [r7, #0]
  4022e4:	681b      	ldr	r3, [r3, #0]
  4022e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4022ea:	d102      	bne.n	4022f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
  4022ec:	2300      	movs	r3, #0
  4022ee:	61fb      	str	r3, [r7, #28]
  4022f0:	e023      	b.n	40233a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4022f2:	687b      	ldr	r3, [r7, #4]
  4022f4:	681a      	ldr	r2, [r3, #0]
  4022f6:	4b16      	ldr	r3, [pc, #88]	; (402350 <xTaskCheckForTimeOut+0xc8>)
  4022f8:	681b      	ldr	r3, [r3, #0]
  4022fa:	429a      	cmp	r2, r3
  4022fc:	d007      	beq.n	40230e <xTaskCheckForTimeOut+0x86>
  4022fe:	687b      	ldr	r3, [r7, #4]
  402300:	685a      	ldr	r2, [r3, #4]
  402302:	69bb      	ldr	r3, [r7, #24]
  402304:	429a      	cmp	r2, r3
  402306:	d802      	bhi.n	40230e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
  402308:	2301      	movs	r3, #1
  40230a:	61fb      	str	r3, [r7, #28]
  40230c:	e015      	b.n	40233a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  40230e:	683b      	ldr	r3, [r7, #0]
  402310:	681a      	ldr	r2, [r3, #0]
  402312:	697b      	ldr	r3, [r7, #20]
  402314:	429a      	cmp	r2, r3
  402316:	d90b      	bls.n	402330 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
  402318:	683b      	ldr	r3, [r7, #0]
  40231a:	681a      	ldr	r2, [r3, #0]
  40231c:	697b      	ldr	r3, [r7, #20]
  40231e:	1ad2      	subs	r2, r2, r3
  402320:	683b      	ldr	r3, [r7, #0]
  402322:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  402324:	6878      	ldr	r0, [r7, #4]
  402326:	4b0b      	ldr	r3, [pc, #44]	; (402354 <xTaskCheckForTimeOut+0xcc>)
  402328:	4798      	blx	r3
			xReturn = pdFALSE;
  40232a:	2300      	movs	r3, #0
  40232c:	61fb      	str	r3, [r7, #28]
  40232e:	e004      	b.n	40233a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
  402330:	683b      	ldr	r3, [r7, #0]
  402332:	2200      	movs	r2, #0
  402334:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
  402336:	2301      	movs	r3, #1
  402338:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
  40233a:	4b07      	ldr	r3, [pc, #28]	; (402358 <xTaskCheckForTimeOut+0xd0>)
  40233c:	4798      	blx	r3

	return xReturn;
  40233e:	69fb      	ldr	r3, [r7, #28]
}
  402340:	4618      	mov	r0, r3
  402342:	3720      	adds	r7, #32
  402344:	46bd      	mov	sp, r7
  402346:	bd80      	pop	{r7, pc}
  402348:	00400561 	.word	0x00400561
  40234c:	2040c2e4 	.word	0x2040c2e4
  402350:	2040c2f8 	.word	0x2040c2f8
  402354:	0040225d 	.word	0x0040225d
  402358:	004005c5 	.word	0x004005c5

0040235c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  40235c:	b480      	push	{r7}
  40235e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
  402360:	4b03      	ldr	r3, [pc, #12]	; (402370 <vTaskMissedYield+0x14>)
  402362:	2201      	movs	r2, #1
  402364:	601a      	str	r2, [r3, #0]
}
  402366:	bf00      	nop
  402368:	46bd      	mov	sp, r7
  40236a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40236e:	4770      	bx	lr
  402370:	2040c2f4 	.word	0x2040c2f4

00402374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  402374:	b580      	push	{r7, lr}
  402376:	b082      	sub	sp, #8
  402378:	af00      	add	r7, sp, #0
  40237a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
  40237c:	4b07      	ldr	r3, [pc, #28]	; (40239c <prvIdleTask+0x28>)
  40237e:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402380:	4b07      	ldr	r3, [pc, #28]	; (4023a0 <prvIdleTask+0x2c>)
  402382:	681b      	ldr	r3, [r3, #0]
  402384:	2b01      	cmp	r3, #1
  402386:	d9f9      	bls.n	40237c <prvIdleTask+0x8>
			{
				taskYIELD();
  402388:	4b06      	ldr	r3, [pc, #24]	; (4023a4 <prvIdleTask+0x30>)
  40238a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40238e:	601a      	str	r2, [r3, #0]
  402390:	f3bf 8f4f 	dsb	sy
  402394:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
  402398:	e7f0      	b.n	40237c <prvIdleTask+0x8>
  40239a:	bf00      	nop
  40239c:	0040242d 	.word	0x0040242d
  4023a0:	2040c20c 	.word	0x2040c20c
  4023a4:	e000ed04 	.word	0xe000ed04

004023a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
  4023a8:	b580      	push	{r7, lr}
  4023aa:	b082      	sub	sp, #8
  4023ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4023ae:	2300      	movs	r3, #0
  4023b0:	607b      	str	r3, [r7, #4]
  4023b2:	e00c      	b.n	4023ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4023b4:	687a      	ldr	r2, [r7, #4]
  4023b6:	4613      	mov	r3, r2
  4023b8:	009b      	lsls	r3, r3, #2
  4023ba:	4413      	add	r3, r2
  4023bc:	009b      	lsls	r3, r3, #2
  4023be:	4a12      	ldr	r2, [pc, #72]	; (402408 <prvInitialiseTaskLists+0x60>)
  4023c0:	4413      	add	r3, r2
  4023c2:	4618      	mov	r0, r3
  4023c4:	4b11      	ldr	r3, [pc, #68]	; (40240c <prvInitialiseTaskLists+0x64>)
  4023c6:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4023c8:	687b      	ldr	r3, [r7, #4]
  4023ca:	3301      	adds	r3, #1
  4023cc:	607b      	str	r3, [r7, #4]
  4023ce:	687b      	ldr	r3, [r7, #4]
  4023d0:	2b04      	cmp	r3, #4
  4023d2:	d9ef      	bls.n	4023b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
  4023d4:	480e      	ldr	r0, [pc, #56]	; (402410 <prvInitialiseTaskLists+0x68>)
  4023d6:	4b0d      	ldr	r3, [pc, #52]	; (40240c <prvInitialiseTaskLists+0x64>)
  4023d8:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
  4023da:	480e      	ldr	r0, [pc, #56]	; (402414 <prvInitialiseTaskLists+0x6c>)
  4023dc:	4b0b      	ldr	r3, [pc, #44]	; (40240c <prvInitialiseTaskLists+0x64>)
  4023de:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
  4023e0:	480d      	ldr	r0, [pc, #52]	; (402418 <prvInitialiseTaskLists+0x70>)
  4023e2:	4b0a      	ldr	r3, [pc, #40]	; (40240c <prvInitialiseTaskLists+0x64>)
  4023e4:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  4023e6:	480d      	ldr	r0, [pc, #52]	; (40241c <prvInitialiseTaskLists+0x74>)
  4023e8:	4b08      	ldr	r3, [pc, #32]	; (40240c <prvInitialiseTaskLists+0x64>)
  4023ea:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  4023ec:	480c      	ldr	r0, [pc, #48]	; (402420 <prvInitialiseTaskLists+0x78>)
  4023ee:	4b07      	ldr	r3, [pc, #28]	; (40240c <prvInitialiseTaskLists+0x64>)
  4023f0:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  4023f2:	4b0c      	ldr	r3, [pc, #48]	; (402424 <prvInitialiseTaskLists+0x7c>)
  4023f4:	4a06      	ldr	r2, [pc, #24]	; (402410 <prvInitialiseTaskLists+0x68>)
  4023f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4023f8:	4b0b      	ldr	r3, [pc, #44]	; (402428 <prvInitialiseTaskLists+0x80>)
  4023fa:	4a06      	ldr	r2, [pc, #24]	; (402414 <prvInitialiseTaskLists+0x6c>)
  4023fc:	601a      	str	r2, [r3, #0]
}
  4023fe:	bf00      	nop
  402400:	3708      	adds	r7, #8
  402402:	46bd      	mov	sp, r7
  402404:	bd80      	pop	{r7, pc}
  402406:	bf00      	nop
  402408:	2040c20c 	.word	0x2040c20c
  40240c:	004001ad 	.word	0x004001ad
  402410:	2040c270 	.word	0x2040c270
  402414:	2040c284 	.word	0x2040c284
  402418:	2040c2a0 	.word	0x2040c2a0
  40241c:	2040c2b4 	.word	0x2040c2b4
  402420:	2040c2cc 	.word	0x2040c2cc
  402424:	2040c298 	.word	0x2040c298
  402428:	2040c29c 	.word	0x2040c29c

0040242c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  40242c:	b580      	push	{r7, lr}
  40242e:	b082      	sub	sp, #8
  402430:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  402432:	e019      	b.n	402468 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
  402434:	4b10      	ldr	r3, [pc, #64]	; (402478 <prvCheckTasksWaitingTermination+0x4c>)
  402436:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402438:	4b10      	ldr	r3, [pc, #64]	; (40247c <prvCheckTasksWaitingTermination+0x50>)
  40243a:	68db      	ldr	r3, [r3, #12]
  40243c:	68db      	ldr	r3, [r3, #12]
  40243e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402440:	687b      	ldr	r3, [r7, #4]
  402442:	3304      	adds	r3, #4
  402444:	4618      	mov	r0, r3
  402446:	4b0e      	ldr	r3, [pc, #56]	; (402480 <prvCheckTasksWaitingTermination+0x54>)
  402448:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
  40244a:	4b0e      	ldr	r3, [pc, #56]	; (402484 <prvCheckTasksWaitingTermination+0x58>)
  40244c:	681b      	ldr	r3, [r3, #0]
  40244e:	3b01      	subs	r3, #1
  402450:	4a0c      	ldr	r2, [pc, #48]	; (402484 <prvCheckTasksWaitingTermination+0x58>)
  402452:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  402454:	4b0c      	ldr	r3, [pc, #48]	; (402488 <prvCheckTasksWaitingTermination+0x5c>)
  402456:	681b      	ldr	r3, [r3, #0]
  402458:	3b01      	subs	r3, #1
  40245a:	4a0b      	ldr	r2, [pc, #44]	; (402488 <prvCheckTasksWaitingTermination+0x5c>)
  40245c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
  40245e:	4b0b      	ldr	r3, [pc, #44]	; (40248c <prvCheckTasksWaitingTermination+0x60>)
  402460:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
  402462:	6878      	ldr	r0, [r7, #4]
  402464:	4b0a      	ldr	r3, [pc, #40]	; (402490 <prvCheckTasksWaitingTermination+0x64>)
  402466:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  402468:	4b07      	ldr	r3, [pc, #28]	; (402488 <prvCheckTasksWaitingTermination+0x5c>)
  40246a:	681b      	ldr	r3, [r3, #0]
  40246c:	2b00      	cmp	r3, #0
  40246e:	d1e1      	bne.n	402434 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
  402470:	bf00      	nop
  402472:	3708      	adds	r7, #8
  402474:	46bd      	mov	sp, r7
  402476:	bd80      	pop	{r7, pc}
  402478:	00400561 	.word	0x00400561
  40247c:	2040c2b4 	.word	0x2040c2b4
  402480:	004002c1 	.word	0x004002c1
  402484:	2040c2e0 	.word	0x2040c2e0
  402488:	2040c2c8 	.word	0x2040c2c8
  40248c:	004005c5 	.word	0x004005c5
  402490:	00402495 	.word	0x00402495

00402494 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
  402494:	b580      	push	{r7, lr}
  402496:	b082      	sub	sp, #8
  402498:	af00      	add	r7, sp, #0
  40249a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
  40249c:	687b      	ldr	r3, [r7, #4]
  40249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024a0:	4618      	mov	r0, r3
  4024a2:	4b04      	ldr	r3, [pc, #16]	; (4024b4 <prvDeleteTCB+0x20>)
  4024a4:	4798      	blx	r3
			vPortFree( pxTCB );
  4024a6:	6878      	ldr	r0, [r7, #4]
  4024a8:	4b02      	ldr	r3, [pc, #8]	; (4024b4 <prvDeleteTCB+0x20>)
  4024aa:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
  4024ac:	bf00      	nop
  4024ae:	3708      	adds	r7, #8
  4024b0:	46bd      	mov	sp, r7
  4024b2:	bd80      	pop	{r7, pc}
  4024b4:	0040094d 	.word	0x0040094d

004024b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
  4024b8:	b480      	push	{r7}
  4024ba:	b083      	sub	sp, #12
  4024bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4024be:	4b0f      	ldr	r3, [pc, #60]	; (4024fc <prvResetNextTaskUnblockTime+0x44>)
  4024c0:	681b      	ldr	r3, [r3, #0]
  4024c2:	681b      	ldr	r3, [r3, #0]
  4024c4:	2b00      	cmp	r3, #0
  4024c6:	d101      	bne.n	4024cc <prvResetNextTaskUnblockTime+0x14>
  4024c8:	2301      	movs	r3, #1
  4024ca:	e000      	b.n	4024ce <prvResetNextTaskUnblockTime+0x16>
  4024cc:	2300      	movs	r3, #0
  4024ce:	2b00      	cmp	r3, #0
  4024d0:	d004      	beq.n	4024dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  4024d2:	4b0b      	ldr	r3, [pc, #44]	; (402500 <prvResetNextTaskUnblockTime+0x48>)
  4024d4:	f04f 32ff 	mov.w	r2, #4294967295
  4024d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
  4024da:	e008      	b.n	4024ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4024dc:	4b07      	ldr	r3, [pc, #28]	; (4024fc <prvResetNextTaskUnblockTime+0x44>)
  4024de:	681b      	ldr	r3, [r3, #0]
  4024e0:	68db      	ldr	r3, [r3, #12]
  4024e2:	68db      	ldr	r3, [r3, #12]
  4024e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  4024e6:	687b      	ldr	r3, [r7, #4]
  4024e8:	685b      	ldr	r3, [r3, #4]
  4024ea:	4a05      	ldr	r2, [pc, #20]	; (402500 <prvResetNextTaskUnblockTime+0x48>)
  4024ec:	6013      	str	r3, [r2, #0]
}
  4024ee:	bf00      	nop
  4024f0:	370c      	adds	r7, #12
  4024f2:	46bd      	mov	sp, r7
  4024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024f8:	4770      	bx	lr
  4024fa:	bf00      	nop
  4024fc:	2040c298 	.word	0x2040c298
  402500:	2040c300 	.word	0x2040c300

00402504 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
  402504:	b480      	push	{r7}
  402506:	b083      	sub	sp, #12
  402508:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  40250a:	4b0b      	ldr	r3, [pc, #44]	; (402538 <xTaskGetSchedulerState+0x34>)
  40250c:	681b      	ldr	r3, [r3, #0]
  40250e:	2b00      	cmp	r3, #0
  402510:	d102      	bne.n	402518 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  402512:	2301      	movs	r3, #1
  402514:	607b      	str	r3, [r7, #4]
  402516:	e008      	b.n	40252a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402518:	4b08      	ldr	r3, [pc, #32]	; (40253c <xTaskGetSchedulerState+0x38>)
  40251a:	681b      	ldr	r3, [r3, #0]
  40251c:	2b00      	cmp	r3, #0
  40251e:	d102      	bne.n	402526 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  402520:	2302      	movs	r3, #2
  402522:	607b      	str	r3, [r7, #4]
  402524:	e001      	b.n	40252a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402526:	2300      	movs	r3, #0
  402528:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  40252a:	687b      	ldr	r3, [r7, #4]
	}
  40252c:	4618      	mov	r0, r3
  40252e:	370c      	adds	r7, #12
  402530:	46bd      	mov	sp, r7
  402532:	f85d 7b04 	ldr.w	r7, [sp], #4
  402536:	4770      	bx	lr
  402538:	2040c2ec 	.word	0x2040c2ec
  40253c:	2040c308 	.word	0x2040c308

00402540 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  402540:	b580      	push	{r7, lr}
  402542:	b086      	sub	sp, #24
  402544:	af00      	add	r7, sp, #0
  402546:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
  402548:	687b      	ldr	r3, [r7, #4]
  40254a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
  40254c:	2300      	movs	r3, #0
  40254e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
  402550:	687b      	ldr	r3, [r7, #4]
  402552:	2b00      	cmp	r3, #0
  402554:	d070      	beq.n	402638 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402556:	4b3b      	ldr	r3, [pc, #236]	; (402644 <xTaskPriorityDisinherit+0x104>)
  402558:	681b      	ldr	r3, [r3, #0]
  40255a:	693a      	ldr	r2, [r7, #16]
  40255c:	429a      	cmp	r2, r3
  40255e:	d00b      	beq.n	402578 <xTaskPriorityDisinherit+0x38>
  402560:	f04f 0380 	mov.w	r3, #128	; 0x80
  402564:	b672      	cpsid	i
  402566:	f383 8811 	msr	BASEPRI, r3
  40256a:	f3bf 8f6f 	isb	sy
  40256e:	f3bf 8f4f 	dsb	sy
  402572:	b662      	cpsie	i
  402574:	60fb      	str	r3, [r7, #12]
  402576:	e7fe      	b.n	402576 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
  402578:	693b      	ldr	r3, [r7, #16]
  40257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40257c:	2b00      	cmp	r3, #0
  40257e:	d10b      	bne.n	402598 <xTaskPriorityDisinherit+0x58>
  402580:	f04f 0380 	mov.w	r3, #128	; 0x80
  402584:	b672      	cpsid	i
  402586:	f383 8811 	msr	BASEPRI, r3
  40258a:	f3bf 8f6f 	isb	sy
  40258e:	f3bf 8f4f 	dsb	sy
  402592:	b662      	cpsie	i
  402594:	60bb      	str	r3, [r7, #8]
  402596:	e7fe      	b.n	402596 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
  402598:	693b      	ldr	r3, [r7, #16]
  40259a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40259c:	1e5a      	subs	r2, r3, #1
  40259e:	693b      	ldr	r3, [r7, #16]
  4025a0:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4025a2:	693b      	ldr	r3, [r7, #16]
  4025a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4025a6:	693b      	ldr	r3, [r7, #16]
  4025a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4025aa:	429a      	cmp	r2, r3
  4025ac:	d044      	beq.n	402638 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4025ae:	693b      	ldr	r3, [r7, #16]
  4025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  4025b2:	2b00      	cmp	r3, #0
  4025b4:	d140      	bne.n	402638 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4025b6:	693b      	ldr	r3, [r7, #16]
  4025b8:	3304      	adds	r3, #4
  4025ba:	4618      	mov	r0, r3
  4025bc:	4b22      	ldr	r3, [pc, #136]	; (402648 <xTaskPriorityDisinherit+0x108>)
  4025be:	4798      	blx	r3
  4025c0:	4603      	mov	r3, r0
  4025c2:	2b00      	cmp	r3, #0
  4025c4:	d115      	bne.n	4025f2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4025c6:	693b      	ldr	r3, [r7, #16]
  4025c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4025ca:	4920      	ldr	r1, [pc, #128]	; (40264c <xTaskPriorityDisinherit+0x10c>)
  4025cc:	4613      	mov	r3, r2
  4025ce:	009b      	lsls	r3, r3, #2
  4025d0:	4413      	add	r3, r2
  4025d2:	009b      	lsls	r3, r3, #2
  4025d4:	440b      	add	r3, r1
  4025d6:	681b      	ldr	r3, [r3, #0]
  4025d8:	2b00      	cmp	r3, #0
  4025da:	d10a      	bne.n	4025f2 <xTaskPriorityDisinherit+0xb2>
  4025dc:	693b      	ldr	r3, [r7, #16]
  4025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4025e0:	2201      	movs	r2, #1
  4025e2:	fa02 f303 	lsl.w	r3, r2, r3
  4025e6:	43da      	mvns	r2, r3
  4025e8:	4b19      	ldr	r3, [pc, #100]	; (402650 <xTaskPriorityDisinherit+0x110>)
  4025ea:	681b      	ldr	r3, [r3, #0]
  4025ec:	4013      	ands	r3, r2
  4025ee:	4a18      	ldr	r2, [pc, #96]	; (402650 <xTaskPriorityDisinherit+0x110>)
  4025f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4025f2:	693b      	ldr	r3, [r7, #16]
  4025f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4025f6:	693b      	ldr	r3, [r7, #16]
  4025f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4025fa:	693b      	ldr	r3, [r7, #16]
  4025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4025fe:	f1c3 0205 	rsb	r2, r3, #5
  402602:	693b      	ldr	r3, [r7, #16]
  402604:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
  402606:	693b      	ldr	r3, [r7, #16]
  402608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40260a:	2201      	movs	r2, #1
  40260c:	409a      	lsls	r2, r3
  40260e:	4b10      	ldr	r3, [pc, #64]	; (402650 <xTaskPriorityDisinherit+0x110>)
  402610:	681b      	ldr	r3, [r3, #0]
  402612:	4313      	orrs	r3, r2
  402614:	4a0e      	ldr	r2, [pc, #56]	; (402650 <xTaskPriorityDisinherit+0x110>)
  402616:	6013      	str	r3, [r2, #0]
  402618:	693b      	ldr	r3, [r7, #16]
  40261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40261c:	4613      	mov	r3, r2
  40261e:	009b      	lsls	r3, r3, #2
  402620:	4413      	add	r3, r2
  402622:	009b      	lsls	r3, r3, #2
  402624:	4a09      	ldr	r2, [pc, #36]	; (40264c <xTaskPriorityDisinherit+0x10c>)
  402626:	441a      	add	r2, r3
  402628:	693b      	ldr	r3, [r7, #16]
  40262a:	3304      	adds	r3, #4
  40262c:	4619      	mov	r1, r3
  40262e:	4610      	mov	r0, r2
  402630:	4b08      	ldr	r3, [pc, #32]	; (402654 <xTaskPriorityDisinherit+0x114>)
  402632:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402634:	2301      	movs	r3, #1
  402636:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
  402638:	697b      	ldr	r3, [r7, #20]
	}
  40263a:	4618      	mov	r0, r3
  40263c:	3718      	adds	r7, #24
  40263e:	46bd      	mov	sp, r7
  402640:	bd80      	pop	{r7, pc}
  402642:	bf00      	nop
  402644:	2040c208 	.word	0x2040c208
  402648:	004002c1 	.word	0x004002c1
  40264c:	2040c20c 	.word	0x2040c20c
  402650:	2040c2e8 	.word	0x2040c2e8
  402654:	00400207 	.word	0x00400207

00402658 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  402658:	b580      	push	{r7, lr}
  40265a:	b084      	sub	sp, #16
  40265c:	af00      	add	r7, sp, #0
  40265e:	6078      	str	r0, [r7, #4]
  402660:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  402662:	4b29      	ldr	r3, [pc, #164]	; (402708 <prvAddCurrentTaskToDelayedList+0xb0>)
  402664:	681b      	ldr	r3, [r3, #0]
  402666:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402668:	4b28      	ldr	r3, [pc, #160]	; (40270c <prvAddCurrentTaskToDelayedList+0xb4>)
  40266a:	681b      	ldr	r3, [r3, #0]
  40266c:	3304      	adds	r3, #4
  40266e:	4618      	mov	r0, r3
  402670:	4b27      	ldr	r3, [pc, #156]	; (402710 <prvAddCurrentTaskToDelayedList+0xb8>)
  402672:	4798      	blx	r3
  402674:	4603      	mov	r3, r0
  402676:	2b00      	cmp	r3, #0
  402678:	d10b      	bne.n	402692 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40267a:	4b24      	ldr	r3, [pc, #144]	; (40270c <prvAddCurrentTaskToDelayedList+0xb4>)
  40267c:	681b      	ldr	r3, [r3, #0]
  40267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402680:	2201      	movs	r2, #1
  402682:	fa02 f303 	lsl.w	r3, r2, r3
  402686:	43da      	mvns	r2, r3
  402688:	4b22      	ldr	r3, [pc, #136]	; (402714 <prvAddCurrentTaskToDelayedList+0xbc>)
  40268a:	681b      	ldr	r3, [r3, #0]
  40268c:	4013      	ands	r3, r2
  40268e:	4a21      	ldr	r2, [pc, #132]	; (402714 <prvAddCurrentTaskToDelayedList+0xbc>)
  402690:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  402692:	687b      	ldr	r3, [r7, #4]
  402694:	f1b3 3fff 	cmp.w	r3, #4294967295
  402698:	d10a      	bne.n	4026b0 <prvAddCurrentTaskToDelayedList+0x58>
  40269a:	683b      	ldr	r3, [r7, #0]
  40269c:	2b00      	cmp	r3, #0
  40269e:	d007      	beq.n	4026b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4026a0:	4b1a      	ldr	r3, [pc, #104]	; (40270c <prvAddCurrentTaskToDelayedList+0xb4>)
  4026a2:	681b      	ldr	r3, [r3, #0]
  4026a4:	3304      	adds	r3, #4
  4026a6:	4619      	mov	r1, r3
  4026a8:	481b      	ldr	r0, [pc, #108]	; (402718 <prvAddCurrentTaskToDelayedList+0xc0>)
  4026aa:	4b1c      	ldr	r3, [pc, #112]	; (40271c <prvAddCurrentTaskToDelayedList+0xc4>)
  4026ac:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
  4026ae:	e026      	b.n	4026fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
  4026b0:	68fa      	ldr	r2, [r7, #12]
  4026b2:	687b      	ldr	r3, [r7, #4]
  4026b4:	4413      	add	r3, r2
  4026b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  4026b8:	4b14      	ldr	r3, [pc, #80]	; (40270c <prvAddCurrentTaskToDelayedList+0xb4>)
  4026ba:	681b      	ldr	r3, [r3, #0]
  4026bc:	68ba      	ldr	r2, [r7, #8]
  4026be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
  4026c0:	68ba      	ldr	r2, [r7, #8]
  4026c2:	68fb      	ldr	r3, [r7, #12]
  4026c4:	429a      	cmp	r2, r3
  4026c6:	d209      	bcs.n	4026dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4026c8:	4b15      	ldr	r3, [pc, #84]	; (402720 <prvAddCurrentTaskToDelayedList+0xc8>)
  4026ca:	681a      	ldr	r2, [r3, #0]
  4026cc:	4b0f      	ldr	r3, [pc, #60]	; (40270c <prvAddCurrentTaskToDelayedList+0xb4>)
  4026ce:	681b      	ldr	r3, [r3, #0]
  4026d0:	3304      	adds	r3, #4
  4026d2:	4619      	mov	r1, r3
  4026d4:	4610      	mov	r0, r2
  4026d6:	4b13      	ldr	r3, [pc, #76]	; (402724 <prvAddCurrentTaskToDelayedList+0xcc>)
  4026d8:	4798      	blx	r3
}
  4026da:	e010      	b.n	4026fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4026dc:	4b12      	ldr	r3, [pc, #72]	; (402728 <prvAddCurrentTaskToDelayedList+0xd0>)
  4026de:	681a      	ldr	r2, [r3, #0]
  4026e0:	4b0a      	ldr	r3, [pc, #40]	; (40270c <prvAddCurrentTaskToDelayedList+0xb4>)
  4026e2:	681b      	ldr	r3, [r3, #0]
  4026e4:	3304      	adds	r3, #4
  4026e6:	4619      	mov	r1, r3
  4026e8:	4610      	mov	r0, r2
  4026ea:	4b0e      	ldr	r3, [pc, #56]	; (402724 <prvAddCurrentTaskToDelayedList+0xcc>)
  4026ec:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
  4026ee:	4b0f      	ldr	r3, [pc, #60]	; (40272c <prvAddCurrentTaskToDelayedList+0xd4>)
  4026f0:	681b      	ldr	r3, [r3, #0]
  4026f2:	68ba      	ldr	r2, [r7, #8]
  4026f4:	429a      	cmp	r2, r3
  4026f6:	d202      	bcs.n	4026fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
  4026f8:	4a0c      	ldr	r2, [pc, #48]	; (40272c <prvAddCurrentTaskToDelayedList+0xd4>)
  4026fa:	68bb      	ldr	r3, [r7, #8]
  4026fc:	6013      	str	r3, [r2, #0]
}
  4026fe:	bf00      	nop
  402700:	3710      	adds	r7, #16
  402702:	46bd      	mov	sp, r7
  402704:	bd80      	pop	{r7, pc}
  402706:	bf00      	nop
  402708:	2040c2e4 	.word	0x2040c2e4
  40270c:	2040c208 	.word	0x2040c208
  402710:	004002c1 	.word	0x004002c1
  402714:	2040c2e8 	.word	0x2040c2e8
  402718:	2040c2cc 	.word	0x2040c2cc
  40271c:	00400207 	.word	0x00400207
  402720:	2040c29c 	.word	0x2040c29c
  402724:	0040024f 	.word	0x0040024f
  402728:	2040c298 	.word	0x2040c298
  40272c:	2040c300 	.word	0x2040c300

00402730 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  402730:	b590      	push	{r4, r7, lr}
  402732:	b085      	sub	sp, #20
  402734:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
  402736:	2300      	movs	r3, #0
  402738:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  40273a:	4b13      	ldr	r3, [pc, #76]	; (402788 <xTimerCreateTimerTask+0x58>)
  40273c:	4798      	blx	r3

	if( xTimerQueue != NULL )
  40273e:	4b13      	ldr	r3, [pc, #76]	; (40278c <xTimerCreateTimerTask+0x5c>)
  402740:	681b      	ldr	r3, [r3, #0]
  402742:	2b00      	cmp	r3, #0
  402744:	d00b      	beq.n	40275e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
  402746:	4b12      	ldr	r3, [pc, #72]	; (402790 <xTimerCreateTimerTask+0x60>)
  402748:	9301      	str	r3, [sp, #4]
  40274a:	2304      	movs	r3, #4
  40274c:	9300      	str	r3, [sp, #0]
  40274e:	2300      	movs	r3, #0
  402750:	f44f 7282 	mov.w	r2, #260	; 0x104
  402754:	490f      	ldr	r1, [pc, #60]	; (402794 <xTimerCreateTimerTask+0x64>)
  402756:	4810      	ldr	r0, [pc, #64]	; (402798 <xTimerCreateTimerTask+0x68>)
  402758:	4c10      	ldr	r4, [pc, #64]	; (40279c <xTimerCreateTimerTask+0x6c>)
  40275a:	47a0      	blx	r4
  40275c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  40275e:	687b      	ldr	r3, [r7, #4]
  402760:	2b00      	cmp	r3, #0
  402762:	d10b      	bne.n	40277c <xTimerCreateTimerTask+0x4c>
  402764:	f04f 0380 	mov.w	r3, #128	; 0x80
  402768:	b672      	cpsid	i
  40276a:	f383 8811 	msr	BASEPRI, r3
  40276e:	f3bf 8f6f 	isb	sy
  402772:	f3bf 8f4f 	dsb	sy
  402776:	b662      	cpsie	i
  402778:	603b      	str	r3, [r7, #0]
  40277a:	e7fe      	b.n	40277a <xTimerCreateTimerTask+0x4a>
	return xReturn;
  40277c:	687b      	ldr	r3, [r7, #4]
}
  40277e:	4618      	mov	r0, r3
  402780:	370c      	adds	r7, #12
  402782:	46bd      	mov	sp, r7
  402784:	bd90      	pop	{r4, r7, pc}
  402786:	bf00      	nop
  402788:	00402d19 	.word	0x00402d19
  40278c:	2040c344 	.word	0x2040c344
  402790:	2040c348 	.word	0x2040c348
  402794:	0040a7e8 	.word	0x0040a7e8
  402798:	004028d9 	.word	0x004028d9
  40279c:	00401851 	.word	0x00401851

004027a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  4027a0:	b590      	push	{r4, r7, lr}
  4027a2:	b08b      	sub	sp, #44	; 0x2c
  4027a4:	af00      	add	r7, sp, #0
  4027a6:	60f8      	str	r0, [r7, #12]
  4027a8:	60b9      	str	r1, [r7, #8]
  4027aa:	607a      	str	r2, [r7, #4]
  4027ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
  4027ae:	2300      	movs	r3, #0
  4027b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  4027b2:	68fb      	ldr	r3, [r7, #12]
  4027b4:	2b00      	cmp	r3, #0
  4027b6:	d10b      	bne.n	4027d0 <xTimerGenericCommand+0x30>
  4027b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027bc:	b672      	cpsid	i
  4027be:	f383 8811 	msr	BASEPRI, r3
  4027c2:	f3bf 8f6f 	isb	sy
  4027c6:	f3bf 8f4f 	dsb	sy
  4027ca:	b662      	cpsie	i
  4027cc:	623b      	str	r3, [r7, #32]
  4027ce:	e7fe      	b.n	4027ce <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  4027d0:	4b19      	ldr	r3, [pc, #100]	; (402838 <xTimerGenericCommand+0x98>)
  4027d2:	681b      	ldr	r3, [r3, #0]
  4027d4:	2b00      	cmp	r3, #0
  4027d6:	d02a      	beq.n	40282e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  4027d8:	68bb      	ldr	r3, [r7, #8]
  4027da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4027dc:	687b      	ldr	r3, [r7, #4]
  4027de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4027e0:	68fb      	ldr	r3, [r7, #12]
  4027e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4027e4:	68bb      	ldr	r3, [r7, #8]
  4027e6:	2b05      	cmp	r3, #5
  4027e8:	dc18      	bgt.n	40281c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4027ea:	4b14      	ldr	r3, [pc, #80]	; (40283c <xTimerGenericCommand+0x9c>)
  4027ec:	4798      	blx	r3
  4027ee:	4603      	mov	r3, r0
  4027f0:	2b02      	cmp	r3, #2
  4027f2:	d109      	bne.n	402808 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4027f4:	4b10      	ldr	r3, [pc, #64]	; (402838 <xTimerGenericCommand+0x98>)
  4027f6:	6818      	ldr	r0, [r3, #0]
  4027f8:	f107 0110 	add.w	r1, r7, #16
  4027fc:	2300      	movs	r3, #0
  4027fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
  402800:	4c0f      	ldr	r4, [pc, #60]	; (402840 <xTimerGenericCommand+0xa0>)
  402802:	47a0      	blx	r4
  402804:	6278      	str	r0, [r7, #36]	; 0x24
  402806:	e012      	b.n	40282e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402808:	4b0b      	ldr	r3, [pc, #44]	; (402838 <xTimerGenericCommand+0x98>)
  40280a:	6818      	ldr	r0, [r3, #0]
  40280c:	f107 0110 	add.w	r1, r7, #16
  402810:	2300      	movs	r3, #0
  402812:	2200      	movs	r2, #0
  402814:	4c0a      	ldr	r4, [pc, #40]	; (402840 <xTimerGenericCommand+0xa0>)
  402816:	47a0      	blx	r4
  402818:	6278      	str	r0, [r7, #36]	; 0x24
  40281a:	e008      	b.n	40282e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40281c:	4b06      	ldr	r3, [pc, #24]	; (402838 <xTimerGenericCommand+0x98>)
  40281e:	6818      	ldr	r0, [r3, #0]
  402820:	f107 0110 	add.w	r1, r7, #16
  402824:	2300      	movs	r3, #0
  402826:	683a      	ldr	r2, [r7, #0]
  402828:	4c06      	ldr	r4, [pc, #24]	; (402844 <xTimerGenericCommand+0xa4>)
  40282a:	47a0      	blx	r4
  40282c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
  40282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  402830:	4618      	mov	r0, r3
  402832:	372c      	adds	r7, #44	; 0x2c
  402834:	46bd      	mov	sp, r7
  402836:	bd90      	pop	{r4, r7, pc}
  402838:	2040c344 	.word	0x2040c344
  40283c:	00402505 	.word	0x00402505
  402840:	00400d3d 	.word	0x00400d3d
  402844:	00400f9d 	.word	0x00400f9d

00402848 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
  402848:	b590      	push	{r4, r7, lr}
  40284a:	b089      	sub	sp, #36	; 0x24
  40284c:	af02      	add	r7, sp, #8
  40284e:	6078      	str	r0, [r7, #4]
  402850:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402852:	4b1d      	ldr	r3, [pc, #116]	; (4028c8 <prvProcessExpiredTimer+0x80>)
  402854:	681b      	ldr	r3, [r3, #0]
  402856:	68db      	ldr	r3, [r3, #12]
  402858:	68db      	ldr	r3, [r3, #12]
  40285a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40285c:	697b      	ldr	r3, [r7, #20]
  40285e:	3304      	adds	r3, #4
  402860:	4618      	mov	r0, r3
  402862:	4b1a      	ldr	r3, [pc, #104]	; (4028cc <prvProcessExpiredTimer+0x84>)
  402864:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402866:	697b      	ldr	r3, [r7, #20]
  402868:	69db      	ldr	r3, [r3, #28]
  40286a:	2b01      	cmp	r3, #1
  40286c:	d123      	bne.n	4028b6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  40286e:	697b      	ldr	r3, [r7, #20]
  402870:	699a      	ldr	r2, [r3, #24]
  402872:	687b      	ldr	r3, [r7, #4]
  402874:	18d1      	adds	r1, r2, r3
  402876:	687b      	ldr	r3, [r7, #4]
  402878:	683a      	ldr	r2, [r7, #0]
  40287a:	6978      	ldr	r0, [r7, #20]
  40287c:	4c14      	ldr	r4, [pc, #80]	; (4028d0 <prvProcessExpiredTimer+0x88>)
  40287e:	47a0      	blx	r4
  402880:	4603      	mov	r3, r0
  402882:	2b00      	cmp	r3, #0
  402884:	d017      	beq.n	4028b6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402886:	2300      	movs	r3, #0
  402888:	9300      	str	r3, [sp, #0]
  40288a:	2300      	movs	r3, #0
  40288c:	687a      	ldr	r2, [r7, #4]
  40288e:	2100      	movs	r1, #0
  402890:	6978      	ldr	r0, [r7, #20]
  402892:	4c10      	ldr	r4, [pc, #64]	; (4028d4 <prvProcessExpiredTimer+0x8c>)
  402894:	47a0      	blx	r4
  402896:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
  402898:	693b      	ldr	r3, [r7, #16]
  40289a:	2b00      	cmp	r3, #0
  40289c:	d10b      	bne.n	4028b6 <prvProcessExpiredTimer+0x6e>
  40289e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028a2:	b672      	cpsid	i
  4028a4:	f383 8811 	msr	BASEPRI, r3
  4028a8:	f3bf 8f6f 	isb	sy
  4028ac:	f3bf 8f4f 	dsb	sy
  4028b0:	b662      	cpsie	i
  4028b2:	60fb      	str	r3, [r7, #12]
  4028b4:	e7fe      	b.n	4028b4 <prvProcessExpiredTimer+0x6c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4028b6:	697b      	ldr	r3, [r7, #20]
  4028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4028ba:	6978      	ldr	r0, [r7, #20]
  4028bc:	4798      	blx	r3
}
  4028be:	bf00      	nop
  4028c0:	371c      	adds	r7, #28
  4028c2:	46bd      	mov	sp, r7
  4028c4:	bd90      	pop	{r4, r7, pc}
  4028c6:	bf00      	nop
  4028c8:	2040c33c 	.word	0x2040c33c
  4028cc:	004002c1 	.word	0x004002c1
  4028d0:	00402a49 	.word	0x00402a49
  4028d4:	004027a1 	.word	0x004027a1

004028d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  4028d8:	b580      	push	{r7, lr}
  4028da:	b084      	sub	sp, #16
  4028dc:	af00      	add	r7, sp, #0
  4028de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  4028e0:	f107 0308 	add.w	r3, r7, #8
  4028e4:	4618      	mov	r0, r3
  4028e6:	4b05      	ldr	r3, [pc, #20]	; (4028fc <prvTimerTask+0x24>)
  4028e8:	4798      	blx	r3
  4028ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  4028ec:	68bb      	ldr	r3, [r7, #8]
  4028ee:	4619      	mov	r1, r3
  4028f0:	68f8      	ldr	r0, [r7, #12]
  4028f2:	4b03      	ldr	r3, [pc, #12]	; (402900 <prvTimerTask+0x28>)
  4028f4:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  4028f6:	4b03      	ldr	r3, [pc, #12]	; (402904 <prvTimerTask+0x2c>)
  4028f8:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  4028fa:	e7f1      	b.n	4028e0 <prvTimerTask+0x8>
  4028fc:	004029b9 	.word	0x004029b9
  402900:	00402909 	.word	0x00402909
  402904:	00402ad1 	.word	0x00402ad1

00402908 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
  402908:	b580      	push	{r7, lr}
  40290a:	b084      	sub	sp, #16
  40290c:	af00      	add	r7, sp, #0
  40290e:	6078      	str	r0, [r7, #4]
  402910:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402912:	4b21      	ldr	r3, [pc, #132]	; (402998 <prvProcessTimerOrBlockTask+0x90>)
  402914:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402916:	f107 0308 	add.w	r3, r7, #8
  40291a:	4618      	mov	r0, r3
  40291c:	4b1f      	ldr	r3, [pc, #124]	; (40299c <prvProcessTimerOrBlockTask+0x94>)
  40291e:	4798      	blx	r3
  402920:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  402922:	68bb      	ldr	r3, [r7, #8]
  402924:	2b00      	cmp	r3, #0
  402926:	d130      	bne.n	40298a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402928:	683b      	ldr	r3, [r7, #0]
  40292a:	2b00      	cmp	r3, #0
  40292c:	d10a      	bne.n	402944 <prvProcessTimerOrBlockTask+0x3c>
  40292e:	687a      	ldr	r2, [r7, #4]
  402930:	68fb      	ldr	r3, [r7, #12]
  402932:	429a      	cmp	r2, r3
  402934:	d806      	bhi.n	402944 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
  402936:	4b1a      	ldr	r3, [pc, #104]	; (4029a0 <prvProcessTimerOrBlockTask+0x98>)
  402938:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  40293a:	68f9      	ldr	r1, [r7, #12]
  40293c:	6878      	ldr	r0, [r7, #4]
  40293e:	4b19      	ldr	r3, [pc, #100]	; (4029a4 <prvProcessTimerOrBlockTask+0x9c>)
  402940:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
  402942:	e024      	b.n	40298e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
  402944:	683b      	ldr	r3, [r7, #0]
  402946:	2b00      	cmp	r3, #0
  402948:	d008      	beq.n	40295c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40294a:	4b17      	ldr	r3, [pc, #92]	; (4029a8 <prvProcessTimerOrBlockTask+0xa0>)
  40294c:	681b      	ldr	r3, [r3, #0]
  40294e:	681b      	ldr	r3, [r3, #0]
  402950:	2b00      	cmp	r3, #0
  402952:	bf0c      	ite	eq
  402954:	2301      	moveq	r3, #1
  402956:	2300      	movne	r3, #0
  402958:	b2db      	uxtb	r3, r3
  40295a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40295c:	4b13      	ldr	r3, [pc, #76]	; (4029ac <prvProcessTimerOrBlockTask+0xa4>)
  40295e:	6818      	ldr	r0, [r3, #0]
  402960:	687a      	ldr	r2, [r7, #4]
  402962:	68fb      	ldr	r3, [r7, #12]
  402964:	1ad3      	subs	r3, r2, r3
  402966:	683a      	ldr	r2, [r7, #0]
  402968:	4619      	mov	r1, r3
  40296a:	4b11      	ldr	r3, [pc, #68]	; (4029b0 <prvProcessTimerOrBlockTask+0xa8>)
  40296c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40296e:	4b0c      	ldr	r3, [pc, #48]	; (4029a0 <prvProcessTimerOrBlockTask+0x98>)
  402970:	4798      	blx	r3
  402972:	4603      	mov	r3, r0
  402974:	2b00      	cmp	r3, #0
  402976:	d10a      	bne.n	40298e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
  402978:	4b0e      	ldr	r3, [pc, #56]	; (4029b4 <prvProcessTimerOrBlockTask+0xac>)
  40297a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40297e:	601a      	str	r2, [r3, #0]
  402980:	f3bf 8f4f 	dsb	sy
  402984:	f3bf 8f6f 	isb	sy
}
  402988:	e001      	b.n	40298e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
  40298a:	4b05      	ldr	r3, [pc, #20]	; (4029a0 <prvProcessTimerOrBlockTask+0x98>)
  40298c:	4798      	blx	r3
}
  40298e:	bf00      	nop
  402990:	3710      	adds	r7, #16
  402992:	46bd      	mov	sp, r7
  402994:	bd80      	pop	{r7, pc}
  402996:	bf00      	nop
  402998:	00401ca5 	.word	0x00401ca5
  40299c:	00402a01 	.word	0x00402a01
  4029a0:	00401cc1 	.word	0x00401cc1
  4029a4:	00402849 	.word	0x00402849
  4029a8:	2040c340 	.word	0x2040c340
  4029ac:	2040c344 	.word	0x2040c344
  4029b0:	00401719 	.word	0x00401719
  4029b4:	e000ed04 	.word	0xe000ed04

004029b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
  4029b8:	b480      	push	{r7}
  4029ba:	b085      	sub	sp, #20
  4029bc:	af00      	add	r7, sp, #0
  4029be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4029c0:	4b0e      	ldr	r3, [pc, #56]	; (4029fc <prvGetNextExpireTime+0x44>)
  4029c2:	681b      	ldr	r3, [r3, #0]
  4029c4:	681b      	ldr	r3, [r3, #0]
  4029c6:	2b00      	cmp	r3, #0
  4029c8:	bf0c      	ite	eq
  4029ca:	2301      	moveq	r3, #1
  4029cc:	2300      	movne	r3, #0
  4029ce:	b2db      	uxtb	r3, r3
  4029d0:	461a      	mov	r2, r3
  4029d2:	687b      	ldr	r3, [r7, #4]
  4029d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4029d6:	687b      	ldr	r3, [r7, #4]
  4029d8:	681b      	ldr	r3, [r3, #0]
  4029da:	2b00      	cmp	r3, #0
  4029dc:	d105      	bne.n	4029ea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4029de:	4b07      	ldr	r3, [pc, #28]	; (4029fc <prvGetNextExpireTime+0x44>)
  4029e0:	681b      	ldr	r3, [r3, #0]
  4029e2:	68db      	ldr	r3, [r3, #12]
  4029e4:	681b      	ldr	r3, [r3, #0]
  4029e6:	60fb      	str	r3, [r7, #12]
  4029e8:	e001      	b.n	4029ee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  4029ea:	2300      	movs	r3, #0
  4029ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  4029ee:	68fb      	ldr	r3, [r7, #12]
}
  4029f0:	4618      	mov	r0, r3
  4029f2:	3714      	adds	r7, #20
  4029f4:	46bd      	mov	sp, r7
  4029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029fa:	4770      	bx	lr
  4029fc:	2040c33c 	.word	0x2040c33c

00402a00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  402a00:	b580      	push	{r7, lr}
  402a02:	b084      	sub	sp, #16
  402a04:	af00      	add	r7, sp, #0
  402a06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  402a08:	4b0c      	ldr	r3, [pc, #48]	; (402a3c <prvSampleTimeNow+0x3c>)
  402a0a:	4798      	blx	r3
  402a0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  402a0e:	4b0c      	ldr	r3, [pc, #48]	; (402a40 <prvSampleTimeNow+0x40>)
  402a10:	681b      	ldr	r3, [r3, #0]
  402a12:	68fa      	ldr	r2, [r7, #12]
  402a14:	429a      	cmp	r2, r3
  402a16:	d205      	bcs.n	402a24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
  402a18:	4b0a      	ldr	r3, [pc, #40]	; (402a44 <prvSampleTimeNow+0x44>)
  402a1a:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  402a1c:	687b      	ldr	r3, [r7, #4]
  402a1e:	2201      	movs	r2, #1
  402a20:	601a      	str	r2, [r3, #0]
  402a22:	e002      	b.n	402a2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402a24:	687b      	ldr	r3, [r7, #4]
  402a26:	2200      	movs	r2, #0
  402a28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  402a2a:	4a05      	ldr	r2, [pc, #20]	; (402a40 <prvSampleTimeNow+0x40>)
  402a2c:	68fb      	ldr	r3, [r7, #12]
  402a2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  402a30:	68fb      	ldr	r3, [r7, #12]
}
  402a32:	4618      	mov	r0, r3
  402a34:	3710      	adds	r7, #16
  402a36:	46bd      	mov	sp, r7
  402a38:	bd80      	pop	{r7, pc}
  402a3a:	bf00      	nop
  402a3c:	00401e15 	.word	0x00401e15
  402a40:	2040c34c 	.word	0x2040c34c
  402a44:	00402c49 	.word	0x00402c49

00402a48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402a48:	b580      	push	{r7, lr}
  402a4a:	b086      	sub	sp, #24
  402a4c:	af00      	add	r7, sp, #0
  402a4e:	60f8      	str	r0, [r7, #12]
  402a50:	60b9      	str	r1, [r7, #8]
  402a52:	607a      	str	r2, [r7, #4]
  402a54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
  402a56:	2300      	movs	r3, #0
  402a58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402a5a:	68fb      	ldr	r3, [r7, #12]
  402a5c:	68ba      	ldr	r2, [r7, #8]
  402a5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402a60:	68fb      	ldr	r3, [r7, #12]
  402a62:	68fa      	ldr	r2, [r7, #12]
  402a64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  402a66:	68ba      	ldr	r2, [r7, #8]
  402a68:	687b      	ldr	r3, [r7, #4]
  402a6a:	429a      	cmp	r2, r3
  402a6c:	d812      	bhi.n	402a94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402a6e:	687a      	ldr	r2, [r7, #4]
  402a70:	683b      	ldr	r3, [r7, #0]
  402a72:	1ad2      	subs	r2, r2, r3
  402a74:	68fb      	ldr	r3, [r7, #12]
  402a76:	699b      	ldr	r3, [r3, #24]
  402a78:	429a      	cmp	r2, r3
  402a7a:	d302      	bcc.n	402a82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402a7c:	2301      	movs	r3, #1
  402a7e:	617b      	str	r3, [r7, #20]
  402a80:	e01b      	b.n	402aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402a82:	4b10      	ldr	r3, [pc, #64]	; (402ac4 <prvInsertTimerInActiveList+0x7c>)
  402a84:	681a      	ldr	r2, [r3, #0]
  402a86:	68fb      	ldr	r3, [r7, #12]
  402a88:	3304      	adds	r3, #4
  402a8a:	4619      	mov	r1, r3
  402a8c:	4610      	mov	r0, r2
  402a8e:	4b0e      	ldr	r3, [pc, #56]	; (402ac8 <prvInsertTimerInActiveList+0x80>)
  402a90:	4798      	blx	r3
  402a92:	e012      	b.n	402aba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402a94:	687a      	ldr	r2, [r7, #4]
  402a96:	683b      	ldr	r3, [r7, #0]
  402a98:	429a      	cmp	r2, r3
  402a9a:	d206      	bcs.n	402aaa <prvInsertTimerInActiveList+0x62>
  402a9c:	68ba      	ldr	r2, [r7, #8]
  402a9e:	683b      	ldr	r3, [r7, #0]
  402aa0:	429a      	cmp	r2, r3
  402aa2:	d302      	bcc.n	402aaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402aa4:	2301      	movs	r3, #1
  402aa6:	617b      	str	r3, [r7, #20]
  402aa8:	e007      	b.n	402aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402aaa:	4b08      	ldr	r3, [pc, #32]	; (402acc <prvInsertTimerInActiveList+0x84>)
  402aac:	681a      	ldr	r2, [r3, #0]
  402aae:	68fb      	ldr	r3, [r7, #12]
  402ab0:	3304      	adds	r3, #4
  402ab2:	4619      	mov	r1, r3
  402ab4:	4610      	mov	r0, r2
  402ab6:	4b04      	ldr	r3, [pc, #16]	; (402ac8 <prvInsertTimerInActiveList+0x80>)
  402ab8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  402aba:	697b      	ldr	r3, [r7, #20]
}
  402abc:	4618      	mov	r0, r3
  402abe:	3718      	adds	r7, #24
  402ac0:	46bd      	mov	sp, r7
  402ac2:	bd80      	pop	{r7, pc}
  402ac4:	2040c340 	.word	0x2040c340
  402ac8:	0040024f 	.word	0x0040024f
  402acc:	2040c33c 	.word	0x2040c33c

00402ad0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  402ad0:	b590      	push	{r4, r7, lr}
  402ad2:	b08f      	sub	sp, #60	; 0x3c
  402ad4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402ad6:	e09a      	b.n	402c0e <prvProcessReceivedCommands+0x13e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402ad8:	687b      	ldr	r3, [r7, #4]
  402ada:	2b00      	cmp	r3, #0
  402adc:	da19      	bge.n	402b12 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
  402ade:	1d3b      	adds	r3, r7, #4
  402ae0:	3304      	adds	r3, #4
  402ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
  402ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402ae6:	2b00      	cmp	r3, #0
  402ae8:	d10b      	bne.n	402b02 <prvProcessReceivedCommands+0x32>
  402aea:	f04f 0380 	mov.w	r3, #128	; 0x80
  402aee:	b672      	cpsid	i
  402af0:	f383 8811 	msr	BASEPRI, r3
  402af4:	f3bf 8f6f 	isb	sy
  402af8:	f3bf 8f4f 	dsb	sy
  402afc:	b662      	cpsie	i
  402afe:	61fb      	str	r3, [r7, #28]
  402b00:	e7fe      	b.n	402b00 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402b04:	681b      	ldr	r3, [r3, #0]
  402b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  402b08:	6850      	ldr	r0, [r2, #4]
  402b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  402b0c:	6892      	ldr	r2, [r2, #8]
  402b0e:	4611      	mov	r1, r2
  402b10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402b12:	687b      	ldr	r3, [r7, #4]
  402b14:	2b00      	cmp	r3, #0
  402b16:	db7a      	blt.n	402c0e <prvProcessReceivedCommands+0x13e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402b18:	68fb      	ldr	r3, [r7, #12]
  402b1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  402b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402b1e:	695b      	ldr	r3, [r3, #20]
  402b20:	2b00      	cmp	r3, #0
  402b22:	d004      	beq.n	402b2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402b26:	3304      	adds	r3, #4
  402b28:	4618      	mov	r0, r3
  402b2a:	4b40      	ldr	r3, [pc, #256]	; (402c2c <prvProcessReceivedCommands+0x15c>)
  402b2c:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402b2e:	463b      	mov	r3, r7
  402b30:	4618      	mov	r0, r3
  402b32:	4b3f      	ldr	r3, [pc, #252]	; (402c30 <prvProcessReceivedCommands+0x160>)
  402b34:	4798      	blx	r3
  402b36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
  402b38:	687b      	ldr	r3, [r7, #4]
  402b3a:	2b09      	cmp	r3, #9
  402b3c:	d866      	bhi.n	402c0c <prvProcessReceivedCommands+0x13c>
  402b3e:	a201      	add	r2, pc, #4	; (adr r2, 402b44 <prvProcessReceivedCommands+0x74>)
  402b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402b44:	00402b6d 	.word	0x00402b6d
  402b48:	00402b6d 	.word	0x00402b6d
  402b4c:	00402b6d 	.word	0x00402b6d
  402b50:	00402c0f 	.word	0x00402c0f
  402b54:	00402bcb 	.word	0x00402bcb
  402b58:	00402c05 	.word	0x00402c05
  402b5c:	00402b6d 	.word	0x00402b6d
  402b60:	00402b6d 	.word	0x00402b6d
  402b64:	00402c0f 	.word	0x00402c0f
  402b68:	00402bcb 	.word	0x00402bcb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  402b6c:	68ba      	ldr	r2, [r7, #8]
  402b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402b70:	699b      	ldr	r3, [r3, #24]
  402b72:	18d1      	adds	r1, r2, r3
  402b74:	68bb      	ldr	r3, [r7, #8]
  402b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  402b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  402b7a:	4c2e      	ldr	r4, [pc, #184]	; (402c34 <prvProcessReceivedCommands+0x164>)
  402b7c:	47a0      	blx	r4
  402b7e:	4603      	mov	r3, r0
  402b80:	2b00      	cmp	r3, #0
  402b82:	d044      	beq.n	402c0e <prvProcessReceivedCommands+0x13e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  402b8a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402b8e:	69db      	ldr	r3, [r3, #28]
  402b90:	2b01      	cmp	r3, #1
  402b92:	d13c      	bne.n	402c0e <prvProcessReceivedCommands+0x13e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402b94:	68ba      	ldr	r2, [r7, #8]
  402b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402b98:	699b      	ldr	r3, [r3, #24]
  402b9a:	441a      	add	r2, r3
  402b9c:	2300      	movs	r3, #0
  402b9e:	9300      	str	r3, [sp, #0]
  402ba0:	2300      	movs	r3, #0
  402ba2:	2100      	movs	r1, #0
  402ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  402ba6:	4c24      	ldr	r4, [pc, #144]	; (402c38 <prvProcessReceivedCommands+0x168>)
  402ba8:	47a0      	blx	r4
  402baa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
  402bac:	6a3b      	ldr	r3, [r7, #32]
  402bae:	2b00      	cmp	r3, #0
  402bb0:	d12d      	bne.n	402c0e <prvProcessReceivedCommands+0x13e>
  402bb2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bb6:	b672      	cpsid	i
  402bb8:	f383 8811 	msr	BASEPRI, r3
  402bbc:	f3bf 8f6f 	isb	sy
  402bc0:	f3bf 8f4f 	dsb	sy
  402bc4:	b662      	cpsie	i
  402bc6:	61bb      	str	r3, [r7, #24]
  402bc8:	e7fe      	b.n	402bc8 <prvProcessReceivedCommands+0xf8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402bca:	68ba      	ldr	r2, [r7, #8]
  402bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402bce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402bd2:	699b      	ldr	r3, [r3, #24]
  402bd4:	2b00      	cmp	r3, #0
  402bd6:	d10b      	bne.n	402bf0 <prvProcessReceivedCommands+0x120>
  402bd8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bdc:	b672      	cpsid	i
  402bde:	f383 8811 	msr	BASEPRI, r3
  402be2:	f3bf 8f6f 	isb	sy
  402be6:	f3bf 8f4f 	dsb	sy
  402bea:	b662      	cpsie	i
  402bec:	617b      	str	r3, [r7, #20]
  402bee:	e7fe      	b.n	402bee <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402bf2:	699a      	ldr	r2, [r3, #24]
  402bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402bf6:	18d1      	adds	r1, r2, r3
  402bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  402bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  402bfe:	4c0d      	ldr	r4, [pc, #52]	; (402c34 <prvProcessReceivedCommands+0x164>)
  402c00:	47a0      	blx	r4
					break;
  402c02:	e004      	b.n	402c0e <prvProcessReceivedCommands+0x13e>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
  402c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  402c06:	4b0d      	ldr	r3, [pc, #52]	; (402c3c <prvProcessReceivedCommands+0x16c>)
  402c08:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
  402c0a:	e000      	b.n	402c0e <prvProcessReceivedCommands+0x13e>

				default	:
					/* Don't expect to get here. */
					break;
  402c0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402c0e:	4b0c      	ldr	r3, [pc, #48]	; (402c40 <prvProcessReceivedCommands+0x170>)
  402c10:	681b      	ldr	r3, [r3, #0]
  402c12:	1d39      	adds	r1, r7, #4
  402c14:	2200      	movs	r2, #0
  402c16:	4618      	mov	r0, r3
  402c18:	4b0a      	ldr	r3, [pc, #40]	; (402c44 <prvProcessReceivedCommands+0x174>)
  402c1a:	4798      	blx	r3
  402c1c:	4603      	mov	r3, r0
  402c1e:	2b00      	cmp	r3, #0
  402c20:	f47f af5a 	bne.w	402ad8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
  402c24:	bf00      	nop
  402c26:	3734      	adds	r7, #52	; 0x34
  402c28:	46bd      	mov	sp, r7
  402c2a:	bd90      	pop	{r4, r7, pc}
  402c2c:	004002c1 	.word	0x004002c1
  402c30:	00402a01 	.word	0x00402a01
  402c34:	00402a49 	.word	0x00402a49
  402c38:	004027a1 	.word	0x004027a1
  402c3c:	0040094d 	.word	0x0040094d
  402c40:	2040c344 	.word	0x2040c344
  402c44:	00401109 	.word	0x00401109

00402c48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
  402c48:	b590      	push	{r4, r7, lr}
  402c4a:	b089      	sub	sp, #36	; 0x24
  402c4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402c4e:	e046      	b.n	402cde <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402c50:	4b2c      	ldr	r3, [pc, #176]	; (402d04 <prvSwitchTimerLists+0xbc>)
  402c52:	681b      	ldr	r3, [r3, #0]
  402c54:	68db      	ldr	r3, [r3, #12]
  402c56:	681b      	ldr	r3, [r3, #0]
  402c58:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402c5a:	4b2a      	ldr	r3, [pc, #168]	; (402d04 <prvSwitchTimerLists+0xbc>)
  402c5c:	681b      	ldr	r3, [r3, #0]
  402c5e:	68db      	ldr	r3, [r3, #12]
  402c60:	68db      	ldr	r3, [r3, #12]
  402c62:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402c64:	693b      	ldr	r3, [r7, #16]
  402c66:	3304      	adds	r3, #4
  402c68:	4618      	mov	r0, r3
  402c6a:	4b27      	ldr	r3, [pc, #156]	; (402d08 <prvSwitchTimerLists+0xc0>)
  402c6c:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402c6e:	693b      	ldr	r3, [r7, #16]
  402c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402c72:	6938      	ldr	r0, [r7, #16]
  402c74:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402c76:	693b      	ldr	r3, [r7, #16]
  402c78:	69db      	ldr	r3, [r3, #28]
  402c7a:	2b01      	cmp	r3, #1
  402c7c:	d12f      	bne.n	402cde <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402c7e:	693b      	ldr	r3, [r7, #16]
  402c80:	699a      	ldr	r2, [r3, #24]
  402c82:	697b      	ldr	r3, [r7, #20]
  402c84:	4413      	add	r3, r2
  402c86:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
  402c88:	68fa      	ldr	r2, [r7, #12]
  402c8a:	697b      	ldr	r3, [r7, #20]
  402c8c:	429a      	cmp	r2, r3
  402c8e:	d90e      	bls.n	402cae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402c90:	693b      	ldr	r3, [r7, #16]
  402c92:	68fa      	ldr	r2, [r7, #12]
  402c94:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402c96:	693b      	ldr	r3, [r7, #16]
  402c98:	693a      	ldr	r2, [r7, #16]
  402c9a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402c9c:	4b19      	ldr	r3, [pc, #100]	; (402d04 <prvSwitchTimerLists+0xbc>)
  402c9e:	681a      	ldr	r2, [r3, #0]
  402ca0:	693b      	ldr	r3, [r7, #16]
  402ca2:	3304      	adds	r3, #4
  402ca4:	4619      	mov	r1, r3
  402ca6:	4610      	mov	r0, r2
  402ca8:	4b18      	ldr	r3, [pc, #96]	; (402d0c <prvSwitchTimerLists+0xc4>)
  402caa:	4798      	blx	r3
  402cac:	e017      	b.n	402cde <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402cae:	2300      	movs	r3, #0
  402cb0:	9300      	str	r3, [sp, #0]
  402cb2:	2300      	movs	r3, #0
  402cb4:	697a      	ldr	r2, [r7, #20]
  402cb6:	2100      	movs	r1, #0
  402cb8:	6938      	ldr	r0, [r7, #16]
  402cba:	4c15      	ldr	r4, [pc, #84]	; (402d10 <prvSwitchTimerLists+0xc8>)
  402cbc:	47a0      	blx	r4
  402cbe:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
  402cc0:	68bb      	ldr	r3, [r7, #8]
  402cc2:	2b00      	cmp	r3, #0
  402cc4:	d10b      	bne.n	402cde <prvSwitchTimerLists+0x96>
  402cc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cca:	b672      	cpsid	i
  402ccc:	f383 8811 	msr	BASEPRI, r3
  402cd0:	f3bf 8f6f 	isb	sy
  402cd4:	f3bf 8f4f 	dsb	sy
  402cd8:	b662      	cpsie	i
  402cda:	603b      	str	r3, [r7, #0]
  402cdc:	e7fe      	b.n	402cdc <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402cde:	4b09      	ldr	r3, [pc, #36]	; (402d04 <prvSwitchTimerLists+0xbc>)
  402ce0:	681b      	ldr	r3, [r3, #0]
  402ce2:	681b      	ldr	r3, [r3, #0]
  402ce4:	2b00      	cmp	r3, #0
  402ce6:	d1b3      	bne.n	402c50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
  402ce8:	4b06      	ldr	r3, [pc, #24]	; (402d04 <prvSwitchTimerLists+0xbc>)
  402cea:	681b      	ldr	r3, [r3, #0]
  402cec:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
  402cee:	4b09      	ldr	r3, [pc, #36]	; (402d14 <prvSwitchTimerLists+0xcc>)
  402cf0:	681b      	ldr	r3, [r3, #0]
  402cf2:	4a04      	ldr	r2, [pc, #16]	; (402d04 <prvSwitchTimerLists+0xbc>)
  402cf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  402cf6:	4a07      	ldr	r2, [pc, #28]	; (402d14 <prvSwitchTimerLists+0xcc>)
  402cf8:	687b      	ldr	r3, [r7, #4]
  402cfa:	6013      	str	r3, [r2, #0]
}
  402cfc:	bf00      	nop
  402cfe:	371c      	adds	r7, #28
  402d00:	46bd      	mov	sp, r7
  402d02:	bd90      	pop	{r4, r7, pc}
  402d04:	2040c33c 	.word	0x2040c33c
  402d08:	004002c1 	.word	0x004002c1
  402d0c:	0040024f 	.word	0x0040024f
  402d10:	004027a1 	.word	0x004027a1
  402d14:	2040c340 	.word	0x2040c340

00402d18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402d18:	b580      	push	{r7, lr}
  402d1a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402d1c:	4b13      	ldr	r3, [pc, #76]	; (402d6c <prvCheckForValidListAndQueue+0x54>)
  402d1e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402d20:	4b13      	ldr	r3, [pc, #76]	; (402d70 <prvCheckForValidListAndQueue+0x58>)
  402d22:	681b      	ldr	r3, [r3, #0]
  402d24:	2b00      	cmp	r3, #0
  402d26:	d11d      	bne.n	402d64 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
  402d28:	4812      	ldr	r0, [pc, #72]	; (402d74 <prvCheckForValidListAndQueue+0x5c>)
  402d2a:	4b13      	ldr	r3, [pc, #76]	; (402d78 <prvCheckForValidListAndQueue+0x60>)
  402d2c:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  402d2e:	4813      	ldr	r0, [pc, #76]	; (402d7c <prvCheckForValidListAndQueue+0x64>)
  402d30:	4b11      	ldr	r3, [pc, #68]	; (402d78 <prvCheckForValidListAndQueue+0x60>)
  402d32:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  402d34:	4b12      	ldr	r3, [pc, #72]	; (402d80 <prvCheckForValidListAndQueue+0x68>)
  402d36:	4a0f      	ldr	r2, [pc, #60]	; (402d74 <prvCheckForValidListAndQueue+0x5c>)
  402d38:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402d3a:	4b12      	ldr	r3, [pc, #72]	; (402d84 <prvCheckForValidListAndQueue+0x6c>)
  402d3c:	4a0f      	ldr	r2, [pc, #60]	; (402d7c <prvCheckForValidListAndQueue+0x64>)
  402d3e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402d40:	2200      	movs	r2, #0
  402d42:	2110      	movs	r1, #16
  402d44:	2005      	movs	r0, #5
  402d46:	4b10      	ldr	r3, [pc, #64]	; (402d88 <prvCheckForValidListAndQueue+0x70>)
  402d48:	4798      	blx	r3
  402d4a:	4602      	mov	r2, r0
  402d4c:	4b08      	ldr	r3, [pc, #32]	; (402d70 <prvCheckForValidListAndQueue+0x58>)
  402d4e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
  402d50:	4b07      	ldr	r3, [pc, #28]	; (402d70 <prvCheckForValidListAndQueue+0x58>)
  402d52:	681b      	ldr	r3, [r3, #0]
  402d54:	2b00      	cmp	r3, #0
  402d56:	d005      	beq.n	402d64 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402d58:	4b05      	ldr	r3, [pc, #20]	; (402d70 <prvCheckForValidListAndQueue+0x58>)
  402d5a:	681b      	ldr	r3, [r3, #0]
  402d5c:	490b      	ldr	r1, [pc, #44]	; (402d8c <prvCheckForValidListAndQueue+0x74>)
  402d5e:	4618      	mov	r0, r3
  402d60:	4b0b      	ldr	r3, [pc, #44]	; (402d90 <prvCheckForValidListAndQueue+0x78>)
  402d62:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402d64:	4b0b      	ldr	r3, [pc, #44]	; (402d94 <prvCheckForValidListAndQueue+0x7c>)
  402d66:	4798      	blx	r3
}
  402d68:	bf00      	nop
  402d6a:	bd80      	pop	{r7, pc}
  402d6c:	00400561 	.word	0x00400561
  402d70:	2040c344 	.word	0x2040c344
  402d74:	2040c314 	.word	0x2040c314
  402d78:	004001ad 	.word	0x004001ad
  402d7c:	2040c328 	.word	0x2040c328
  402d80:	2040c33c 	.word	0x2040c33c
  402d84:	2040c340 	.word	0x2040c340
  402d88:	00400c6d 	.word	0x00400c6d
  402d8c:	0040a7f0 	.word	0x0040a7f0
  402d90:	004016c9 	.word	0x004016c9
  402d94:	004005c5 	.word	0x004005c5

00402d98 <prvRecordValue_NormallyFull>:
	vQueueAddToRegistry( xNormallyEmptyQueue, "NormallyEmpty" );
}
/*-----------------------------------------------------------*/

static void prvRecordValue_NormallyFull( UBaseType_t uxValue, UBaseType_t uxSource )
{
  402d98:	b580      	push	{r7, lr}
  402d9a:	b082      	sub	sp, #8
  402d9c:	af00      	add	r7, sp, #0
  402d9e:	6078      	str	r0, [r7, #4]
  402da0:	6039      	str	r1, [r7, #0]
	if( uxValue < intqNUM_VALUES_TO_LOG )
  402da2:	687b      	ldr	r3, [r7, #4]
  402da4:	2bc7      	cmp	r3, #199	; 0xc7
  402da6:	d80f      	bhi.n	402dc8 <prvRecordValue_NormallyFull+0x30>
	{
		/* We don't expect to receive the same value twice, so if the value
		has already been marked as received an error has occurred. */
		if( ucNormallyFullReceivedValues[ uxValue ] != 0x00 )
  402da8:	4a09      	ldr	r2, [pc, #36]	; (402dd0 <prvRecordValue_NormallyFull+0x38>)
  402daa:	687b      	ldr	r3, [r7, #4]
  402dac:	4413      	add	r3, r2
  402dae:	781b      	ldrb	r3, [r3, #0]
  402db0:	2b00      	cmp	r3, #0
  402db2:	d002      	beq.n	402dba <prvRecordValue_NormallyFull+0x22>
		{
			prvQueueAccessLogError( __LINE__ );
  402db4:	20e8      	movs	r0, #232	; 0xe8
  402db6:	4b07      	ldr	r3, [pc, #28]	; (402dd4 <prvRecordValue_NormallyFull+0x3c>)
  402db8:	4798      	blx	r3
		}

		/* Log that this value has been received. */
		ucNormallyFullReceivedValues[ uxValue ] = ( uint8_t ) uxSource;
  402dba:	683b      	ldr	r3, [r7, #0]
  402dbc:	b2d9      	uxtb	r1, r3
  402dbe:	4a04      	ldr	r2, [pc, #16]	; (402dd0 <prvRecordValue_NormallyFull+0x38>)
  402dc0:	687b      	ldr	r3, [r7, #4]
  402dc2:	4413      	add	r3, r2
  402dc4:	460a      	mov	r2, r1
  402dc6:	701a      	strb	r2, [r3, #0]
	}
}
  402dc8:	bf00      	nop
  402dca:	3708      	adds	r7, #8
  402dcc:	46bd      	mov	sp, r7
  402dce:	bd80      	pop	{r7, pc}
  402dd0:	2040c448 	.word	0x2040c448
  402dd4:	00402e19 	.word	0x00402e19

00402dd8 <prvRecordValue_NormallyEmpty>:
/*-----------------------------------------------------------*/

static void prvRecordValue_NormallyEmpty( UBaseType_t uxValue, UBaseType_t uxSource )
{
  402dd8:	b580      	push	{r7, lr}
  402dda:	b082      	sub	sp, #8
  402ddc:	af00      	add	r7, sp, #0
  402dde:	6078      	str	r0, [r7, #4]
  402de0:	6039      	str	r1, [r7, #0]
	if( uxValue < intqNUM_VALUES_TO_LOG )
  402de2:	687b      	ldr	r3, [r7, #4]
  402de4:	2bc7      	cmp	r3, #199	; 0xc7
  402de6:	d80f      	bhi.n	402e08 <prvRecordValue_NormallyEmpty+0x30>
	{
		/* We don't expect to receive the same value twice, so if the value
		has already been marked as received an error has occurred. */
		if( ucNormallyEmptyReceivedValues[ uxValue ] != 0x00 )
  402de8:	4a09      	ldr	r2, [pc, #36]	; (402e10 <prvRecordValue_NormallyEmpty+0x38>)
  402dea:	687b      	ldr	r3, [r7, #4]
  402dec:	4413      	add	r3, r2
  402dee:	781b      	ldrb	r3, [r3, #0]
  402df0:	2b00      	cmp	r3, #0
  402df2:	d002      	beq.n	402dfa <prvRecordValue_NormallyEmpty+0x22>
		{
			prvQueueAccessLogError( __LINE__ );
  402df4:	20f9      	movs	r0, #249	; 0xf9
  402df6:	4b07      	ldr	r3, [pc, #28]	; (402e14 <prvRecordValue_NormallyEmpty+0x3c>)
  402df8:	4798      	blx	r3
		}

		/* Log that this value has been received. */
		ucNormallyEmptyReceivedValues[ uxValue ] = ( uint8_t ) uxSource;
  402dfa:	683b      	ldr	r3, [r7, #0]
  402dfc:	b2d9      	uxtb	r1, r3
  402dfe:	4a04      	ldr	r2, [pc, #16]	; (402e10 <prvRecordValue_NormallyEmpty+0x38>)
  402e00:	687b      	ldr	r3, [r7, #4]
  402e02:	4413      	add	r3, r2
  402e04:	460a      	mov	r2, r1
  402e06:	701a      	strb	r2, [r3, #0]
	}
}
  402e08:	bf00      	nop
  402e0a:	3708      	adds	r7, #8
  402e0c:	46bd      	mov	sp, r7
  402e0e:	bd80      	pop	{r7, pc}
  402e10:	2040c380 	.word	0x2040c380
  402e14:	00402e19 	.word	0x00402e19

00402e18 <prvQueueAccessLogError>:
/*-----------------------------------------------------------*/

static void prvQueueAccessLogError( UBaseType_t uxLine )
{
  402e18:	b480      	push	{r7}
  402e1a:	b083      	sub	sp, #12
  402e1c:	af00      	add	r7, sp, #0
  402e1e:	6078      	str	r0, [r7, #4]
	/* Latch the line number that caused the error. */
	xErrorLine = uxLine;
  402e20:	4a05      	ldr	r2, [pc, #20]	; (402e38 <prvQueueAccessLogError+0x20>)
  402e22:	687b      	ldr	r3, [r7, #4]
  402e24:	6013      	str	r3, [r2, #0]
	xErrorStatus = pdFAIL;
  402e26:	4b05      	ldr	r3, [pc, #20]	; (402e3c <prvQueueAccessLogError+0x24>)
  402e28:	2200      	movs	r2, #0
  402e2a:	601a      	str	r2, [r3, #0]
}
  402e2c:	bf00      	nop
  402e2e:	370c      	adds	r7, #12
  402e30:	46bd      	mov	sp, r7
  402e32:	f85d 7b04 	ldr.w	r7, [sp], #4
  402e36:	4770      	bx	lr
  402e38:	2040c370 	.word	0x2040c370
  402e3c:	20400004 	.word	0x20400004

00402e40 <xFirstTimerHandler>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xFirstTimerHandler( void )
{
  402e40:	b590      	push	{r4, r7, lr}
  402e42:	b08f      	sub	sp, #60	; 0x3c
  402e44:	af00      	add	r7, sp, #0
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402e46:	2300      	movs	r3, #0
  402e48:	607b      	str	r3, [r7, #4]
static UBaseType_t uxNextOperation = 0;

	/* Called from a timer interrupt.  Perform various read and write
	accesses on the queues. */

	uxNextOperation++;
  402e4a:	4b69      	ldr	r3, [pc, #420]	; (402ff0 <xFirstTimerHandler+0x1b0>)
  402e4c:	681b      	ldr	r3, [r3, #0]
  402e4e:	3301      	adds	r3, #1
  402e50:	4a67      	ldr	r2, [pc, #412]	; (402ff0 <xFirstTimerHandler+0x1b0>)
  402e52:	6013      	str	r3, [r2, #0]

	if( uxNextOperation & ( UBaseType_t ) 0x01 )
  402e54:	4b66      	ldr	r3, [pc, #408]	; (402ff0 <xFirstTimerHandler+0x1b0>)
  402e56:	681b      	ldr	r3, [r3, #0]
  402e58:	f003 0301 	and.w	r3, r3, #1
  402e5c:	2b00      	cmp	r3, #0
  402e5e:	f000 8094 	beq.w	402f8a <xFirstTimerHandler+0x14a>
	{
		timerNORMALLY_EMPTY_TX();
  402e62:	4b64      	ldr	r3, [pc, #400]	; (402ff4 <xFirstTimerHandler+0x1b4>)
  402e64:	681b      	ldr	r3, [r3, #0]
  402e66:	4618      	mov	r0, r3
  402e68:	4b63      	ldr	r3, [pc, #396]	; (402ff8 <xFirstTimerHandler+0x1b8>)
  402e6a:	4798      	blx	r3
  402e6c:	4603      	mov	r3, r0
  402e6e:	2b01      	cmp	r3, #1
  402e70:	d028      	beq.n	402ec4 <xFirstTimerHandler+0x84>
	__asm volatile
  402e72:	f3ef 8211 	mrs	r2, BASEPRI
  402e76:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e7a:	b672      	cpsid	i
  402e7c:	f383 8811 	msr	BASEPRI, r3
  402e80:	f3bf 8f6f 	isb	sy
  402e84:	f3bf 8f4f 	dsb	sy
  402e88:	b662      	cpsie	i
  402e8a:	62ba      	str	r2, [r7, #40]	; 0x28
  402e8c:	627b      	str	r3, [r7, #36]	; 0x24
	return ulOriginalBASEPRI;
  402e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402e90:	637b      	str	r3, [r7, #52]	; 0x34
  402e92:	4b5a      	ldr	r3, [pc, #360]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402e94:	681b      	ldr	r3, [r3, #0]
  402e96:	3301      	adds	r3, #1
  402e98:	4a58      	ldr	r2, [pc, #352]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402e9a:	6013      	str	r3, [r2, #0]
  402e9c:	4b55      	ldr	r3, [pc, #340]	; (402ff4 <xFirstTimerHandler+0x1b4>)
  402e9e:	6818      	ldr	r0, [r3, #0]
  402ea0:	1d3a      	adds	r2, r7, #4
  402ea2:	2300      	movs	r3, #0
  402ea4:	4955      	ldr	r1, [pc, #340]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402ea6:	4c56      	ldr	r4, [pc, #344]	; (403000 <xFirstTimerHandler+0x1c0>)
  402ea8:	47a0      	blx	r4
  402eaa:	4603      	mov	r3, r0
  402eac:	2b01      	cmp	r3, #1
  402eae:	d004      	beq.n	402eba <xFirstTimerHandler+0x7a>
  402eb0:	4b52      	ldr	r3, [pc, #328]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402eb2:	681b      	ldr	r3, [r3, #0]
  402eb4:	3b01      	subs	r3, #1
  402eb6:	4a51      	ldr	r2, [pc, #324]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402eb8:	6013      	str	r3, [r2, #0]
  402eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402ebc:	623b      	str	r3, [r7, #32]
	__asm volatile
  402ebe:	6a3b      	ldr	r3, [r7, #32]
  402ec0:	f383 8811 	msr	BASEPRI, r3
		timerNORMALLY_EMPTY_TX();
  402ec4:	4b4b      	ldr	r3, [pc, #300]	; (402ff4 <xFirstTimerHandler+0x1b4>)
  402ec6:	681b      	ldr	r3, [r3, #0]
  402ec8:	4618      	mov	r0, r3
  402eca:	4b4b      	ldr	r3, [pc, #300]	; (402ff8 <xFirstTimerHandler+0x1b8>)
  402ecc:	4798      	blx	r3
  402ece:	4603      	mov	r3, r0
  402ed0:	2b01      	cmp	r3, #1
  402ed2:	d028      	beq.n	402f26 <xFirstTimerHandler+0xe6>
	__asm volatile
  402ed4:	f3ef 8211 	mrs	r2, BASEPRI
  402ed8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402edc:	b672      	cpsid	i
  402ede:	f383 8811 	msr	BASEPRI, r3
  402ee2:	f3bf 8f6f 	isb	sy
  402ee6:	f3bf 8f4f 	dsb	sy
  402eea:	b662      	cpsie	i
  402eec:	61fa      	str	r2, [r7, #28]
  402eee:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
  402ef0:	69fb      	ldr	r3, [r7, #28]
  402ef2:	633b      	str	r3, [r7, #48]	; 0x30
  402ef4:	4b41      	ldr	r3, [pc, #260]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402ef6:	681b      	ldr	r3, [r3, #0]
  402ef8:	3301      	adds	r3, #1
  402efa:	4a40      	ldr	r2, [pc, #256]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402efc:	6013      	str	r3, [r2, #0]
  402efe:	4b3d      	ldr	r3, [pc, #244]	; (402ff4 <xFirstTimerHandler+0x1b4>)
  402f00:	6818      	ldr	r0, [r3, #0]
  402f02:	1d3a      	adds	r2, r7, #4
  402f04:	2300      	movs	r3, #0
  402f06:	493d      	ldr	r1, [pc, #244]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402f08:	4c3d      	ldr	r4, [pc, #244]	; (403000 <xFirstTimerHandler+0x1c0>)
  402f0a:	47a0      	blx	r4
  402f0c:	4603      	mov	r3, r0
  402f0e:	2b01      	cmp	r3, #1
  402f10:	d004      	beq.n	402f1c <xFirstTimerHandler+0xdc>
  402f12:	4b3a      	ldr	r3, [pc, #232]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402f14:	681b      	ldr	r3, [r3, #0]
  402f16:	3b01      	subs	r3, #1
  402f18:	4a38      	ldr	r2, [pc, #224]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402f1a:	6013      	str	r3, [r2, #0]
  402f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402f1e:	617b      	str	r3, [r7, #20]
	__asm volatile
  402f20:	697b      	ldr	r3, [r7, #20]
  402f22:	f383 8811 	msr	BASEPRI, r3
		timerNORMALLY_EMPTY_TX();
  402f26:	4b33      	ldr	r3, [pc, #204]	; (402ff4 <xFirstTimerHandler+0x1b4>)
  402f28:	681b      	ldr	r3, [r3, #0]
  402f2a:	4618      	mov	r0, r3
  402f2c:	4b32      	ldr	r3, [pc, #200]	; (402ff8 <xFirstTimerHandler+0x1b8>)
  402f2e:	4798      	blx	r3
  402f30:	4603      	mov	r3, r0
  402f32:	2b01      	cmp	r3, #1
  402f34:	d056      	beq.n	402fe4 <xFirstTimerHandler+0x1a4>
	__asm volatile
  402f36:	f3ef 8211 	mrs	r2, BASEPRI
  402f3a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f3e:	b672      	cpsid	i
  402f40:	f383 8811 	msr	BASEPRI, r3
  402f44:	f3bf 8f6f 	isb	sy
  402f48:	f3bf 8f4f 	dsb	sy
  402f4c:	b662      	cpsie	i
  402f4e:	613a      	str	r2, [r7, #16]
  402f50:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
  402f52:	693b      	ldr	r3, [r7, #16]
  402f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  402f56:	4b29      	ldr	r3, [pc, #164]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402f58:	681b      	ldr	r3, [r3, #0]
  402f5a:	3301      	adds	r3, #1
  402f5c:	4a27      	ldr	r2, [pc, #156]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402f5e:	6013      	str	r3, [r2, #0]
  402f60:	4b24      	ldr	r3, [pc, #144]	; (402ff4 <xFirstTimerHandler+0x1b4>)
  402f62:	6818      	ldr	r0, [r3, #0]
  402f64:	1d3a      	adds	r2, r7, #4
  402f66:	2300      	movs	r3, #0
  402f68:	4924      	ldr	r1, [pc, #144]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402f6a:	4c25      	ldr	r4, [pc, #148]	; (403000 <xFirstTimerHandler+0x1c0>)
  402f6c:	47a0      	blx	r4
  402f6e:	4603      	mov	r3, r0
  402f70:	2b01      	cmp	r3, #1
  402f72:	d004      	beq.n	402f7e <xFirstTimerHandler+0x13e>
  402f74:	4b21      	ldr	r3, [pc, #132]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402f76:	681b      	ldr	r3, [r3, #0]
  402f78:	3b01      	subs	r3, #1
  402f7a:	4a20      	ldr	r2, [pc, #128]	; (402ffc <xFirstTimerHandler+0x1bc>)
  402f7c:	6013      	str	r3, [r2, #0]
  402f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402f80:	60bb      	str	r3, [r7, #8]
	__asm volatile
  402f82:	68bb      	ldr	r3, [r7, #8]
  402f84:	f383 8811 	msr	BASEPRI, r3
  402f88:	e02c      	b.n	402fe4 <xFirstTimerHandler+0x1a4>
	}
	else
	{
		timerNORMALLY_FULL_RX();
  402f8a:	4b1e      	ldr	r3, [pc, #120]	; (403004 <xFirstTimerHandler+0x1c4>)
  402f8c:	681b      	ldr	r3, [r3, #0]
  402f8e:	1d3a      	adds	r2, r7, #4
  402f90:	4639      	mov	r1, r7
  402f92:	4618      	mov	r0, r3
  402f94:	4b1c      	ldr	r3, [pc, #112]	; (403008 <xFirstTimerHandler+0x1c8>)
  402f96:	4798      	blx	r3
  402f98:	4603      	mov	r3, r0
  402f9a:	2b01      	cmp	r3, #1
  402f9c:	d104      	bne.n	402fa8 <xFirstTimerHandler+0x168>
  402f9e:	683b      	ldr	r3, [r7, #0]
  402fa0:	2105      	movs	r1, #5
  402fa2:	4618      	mov	r0, r3
  402fa4:	4b19      	ldr	r3, [pc, #100]	; (40300c <xFirstTimerHandler+0x1cc>)
  402fa6:	4798      	blx	r3
		timerNORMALLY_FULL_RX();
  402fa8:	4b16      	ldr	r3, [pc, #88]	; (403004 <xFirstTimerHandler+0x1c4>)
  402faa:	681b      	ldr	r3, [r3, #0]
  402fac:	1d3a      	adds	r2, r7, #4
  402fae:	4639      	mov	r1, r7
  402fb0:	4618      	mov	r0, r3
  402fb2:	4b15      	ldr	r3, [pc, #84]	; (403008 <xFirstTimerHandler+0x1c8>)
  402fb4:	4798      	blx	r3
  402fb6:	4603      	mov	r3, r0
  402fb8:	2b01      	cmp	r3, #1
  402fba:	d104      	bne.n	402fc6 <xFirstTimerHandler+0x186>
  402fbc:	683b      	ldr	r3, [r7, #0]
  402fbe:	2105      	movs	r1, #5
  402fc0:	4618      	mov	r0, r3
  402fc2:	4b12      	ldr	r3, [pc, #72]	; (40300c <xFirstTimerHandler+0x1cc>)
  402fc4:	4798      	blx	r3
		timerNORMALLY_FULL_RX();
  402fc6:	4b0f      	ldr	r3, [pc, #60]	; (403004 <xFirstTimerHandler+0x1c4>)
  402fc8:	681b      	ldr	r3, [r3, #0]
  402fca:	1d3a      	adds	r2, r7, #4
  402fcc:	4639      	mov	r1, r7
  402fce:	4618      	mov	r0, r3
  402fd0:	4b0d      	ldr	r3, [pc, #52]	; (403008 <xFirstTimerHandler+0x1c8>)
  402fd2:	4798      	blx	r3
  402fd4:	4603      	mov	r3, r0
  402fd6:	2b01      	cmp	r3, #1
  402fd8:	d104      	bne.n	402fe4 <xFirstTimerHandler+0x1a4>
  402fda:	683b      	ldr	r3, [r7, #0]
  402fdc:	2105      	movs	r1, #5
  402fde:	4618      	mov	r0, r3
  402fe0:	4b0a      	ldr	r3, [pc, #40]	; (40300c <xFirstTimerHandler+0x1cc>)
  402fe2:	4798      	blx	r3
	}

	return xHigherPriorityTaskWoken;
  402fe4:	687b      	ldr	r3, [r7, #4]
}
  402fe6:	4618      	mov	r0, r3
  402fe8:	373c      	adds	r7, #60	; 0x3c
  402fea:	46bd      	mov	sp, r7
  402fec:	bd90      	pop	{r4, r7, pc}
  402fee:	bf00      	nop
  402ff0:	2040c510 	.word	0x2040c510
  402ff4:	2040c358 	.word	0x2040c358
  402ff8:	0040167d 	.word	0x0040167d
  402ffc:	2040c378 	.word	0x2040c378
  403000:	00400f9d 	.word	0x00400f9d
  403004:	2040c35c 	.word	0x2040c35c
  403008:	004012fd 	.word	0x004012fd
  40300c:	00402d99 	.word	0x00402d99

00403010 <xSecondTimerHandler>:
/*-----------------------------------------------------------*/

BaseType_t xSecondTimerHandler( void )
{
  403010:	b590      	push	{r4, r7, lr}
  403012:	b097      	sub	sp, #92	; 0x5c
  403014:	af00      	add	r7, sp, #0
UBaseType_t uxRxedValue;
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  403016:	2300      	movs	r3, #0
  403018:	603b      	str	r3, [r7, #0]
static UBaseType_t uxNextOperation = 0;

	/* Called from a timer interrupt.  Perform various read and write
	accesses on the queues. */

	uxNextOperation++;
  40301a:	4b9f      	ldr	r3, [pc, #636]	; (403298 <xSecondTimerHandler+0x288>)
  40301c:	681b      	ldr	r3, [r3, #0]
  40301e:	3301      	adds	r3, #1
  403020:	4a9d      	ldr	r2, [pc, #628]	; (403298 <xSecondTimerHandler+0x288>)
  403022:	6013      	str	r3, [r2, #0]

	if( uxNextOperation & ( UBaseType_t ) 0x01 )
  403024:	4b9c      	ldr	r3, [pc, #624]	; (403298 <xSecondTimerHandler+0x288>)
  403026:	681b      	ldr	r3, [r3, #0]
  403028:	f003 0301 	and.w	r3, r3, #1
  40302c:	2b00      	cmp	r3, #0
  40302e:	f000 808b 	beq.w	403148 <xSecondTimerHandler+0x138>
	{
		timerNORMALLY_EMPTY_TX();
  403032:	4b9a      	ldr	r3, [pc, #616]	; (40329c <xSecondTimerHandler+0x28c>)
  403034:	681b      	ldr	r3, [r3, #0]
  403036:	4618      	mov	r0, r3
  403038:	4b99      	ldr	r3, [pc, #612]	; (4032a0 <xSecondTimerHandler+0x290>)
  40303a:	4798      	blx	r3
  40303c:	4603      	mov	r3, r0
  40303e:	2b01      	cmp	r3, #1
  403040:	d028      	beq.n	403094 <xSecondTimerHandler+0x84>
	__asm volatile
  403042:	f3ef 8211 	mrs	r2, BASEPRI
  403046:	f04f 0380 	mov.w	r3, #128	; 0x80
  40304a:	b672      	cpsid	i
  40304c:	f383 8811 	msr	BASEPRI, r3
  403050:	f3bf 8f6f 	isb	sy
  403054:	f3bf 8f4f 	dsb	sy
  403058:	b662      	cpsie	i
  40305a:	643a      	str	r2, [r7, #64]	; 0x40
  40305c:	63fb      	str	r3, [r7, #60]	; 0x3c
	return ulOriginalBASEPRI;
  40305e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  403060:	657b      	str	r3, [r7, #84]	; 0x54
  403062:	4b90      	ldr	r3, [pc, #576]	; (4032a4 <xSecondTimerHandler+0x294>)
  403064:	681b      	ldr	r3, [r3, #0]
  403066:	3301      	adds	r3, #1
  403068:	4a8e      	ldr	r2, [pc, #568]	; (4032a4 <xSecondTimerHandler+0x294>)
  40306a:	6013      	str	r3, [r2, #0]
  40306c:	4b8b      	ldr	r3, [pc, #556]	; (40329c <xSecondTimerHandler+0x28c>)
  40306e:	6818      	ldr	r0, [r3, #0]
  403070:	463a      	mov	r2, r7
  403072:	2300      	movs	r3, #0
  403074:	498b      	ldr	r1, [pc, #556]	; (4032a4 <xSecondTimerHandler+0x294>)
  403076:	4c8c      	ldr	r4, [pc, #560]	; (4032a8 <xSecondTimerHandler+0x298>)
  403078:	47a0      	blx	r4
  40307a:	4603      	mov	r3, r0
  40307c:	2b01      	cmp	r3, #1
  40307e:	d004      	beq.n	40308a <xSecondTimerHandler+0x7a>
  403080:	4b88      	ldr	r3, [pc, #544]	; (4032a4 <xSecondTimerHandler+0x294>)
  403082:	681b      	ldr	r3, [r3, #0]
  403084:	3b01      	subs	r3, #1
  403086:	4a87      	ldr	r2, [pc, #540]	; (4032a4 <xSecondTimerHandler+0x294>)
  403088:	6013      	str	r3, [r2, #0]
  40308a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  40308c:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm volatile
  40308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403090:	f383 8811 	msr	BASEPRI, r3
		timerNORMALLY_EMPTY_TX();
  403094:	4b81      	ldr	r3, [pc, #516]	; (40329c <xSecondTimerHandler+0x28c>)
  403096:	681b      	ldr	r3, [r3, #0]
  403098:	4618      	mov	r0, r3
  40309a:	4b81      	ldr	r3, [pc, #516]	; (4032a0 <xSecondTimerHandler+0x290>)
  40309c:	4798      	blx	r3
  40309e:	4603      	mov	r3, r0
  4030a0:	2b01      	cmp	r3, #1
  4030a2:	d028      	beq.n	4030f6 <xSecondTimerHandler+0xe6>
	__asm volatile
  4030a4:	f3ef 8211 	mrs	r2, BASEPRI
  4030a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030ac:	b672      	cpsid	i
  4030ae:	f383 8811 	msr	BASEPRI, r3
  4030b2:	f3bf 8f6f 	isb	sy
  4030b6:	f3bf 8f4f 	dsb	sy
  4030ba:	b662      	cpsie	i
  4030bc:	637a      	str	r2, [r7, #52]	; 0x34
  4030be:	633b      	str	r3, [r7, #48]	; 0x30
	return ulOriginalBASEPRI;
  4030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4030c2:	653b      	str	r3, [r7, #80]	; 0x50
  4030c4:	4b77      	ldr	r3, [pc, #476]	; (4032a4 <xSecondTimerHandler+0x294>)
  4030c6:	681b      	ldr	r3, [r3, #0]
  4030c8:	3301      	adds	r3, #1
  4030ca:	4a76      	ldr	r2, [pc, #472]	; (4032a4 <xSecondTimerHandler+0x294>)
  4030cc:	6013      	str	r3, [r2, #0]
  4030ce:	4b73      	ldr	r3, [pc, #460]	; (40329c <xSecondTimerHandler+0x28c>)
  4030d0:	6818      	ldr	r0, [r3, #0]
  4030d2:	463a      	mov	r2, r7
  4030d4:	2300      	movs	r3, #0
  4030d6:	4973      	ldr	r1, [pc, #460]	; (4032a4 <xSecondTimerHandler+0x294>)
  4030d8:	4c73      	ldr	r4, [pc, #460]	; (4032a8 <xSecondTimerHandler+0x298>)
  4030da:	47a0      	blx	r4
  4030dc:	4603      	mov	r3, r0
  4030de:	2b01      	cmp	r3, #1
  4030e0:	d004      	beq.n	4030ec <xSecondTimerHandler+0xdc>
  4030e2:	4b70      	ldr	r3, [pc, #448]	; (4032a4 <xSecondTimerHandler+0x294>)
  4030e4:	681b      	ldr	r3, [r3, #0]
  4030e6:	3b01      	subs	r3, #1
  4030e8:	4a6e      	ldr	r2, [pc, #440]	; (4032a4 <xSecondTimerHandler+0x294>)
  4030ea:	6013      	str	r3, [r2, #0]
  4030ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm volatile
  4030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4030f2:	f383 8811 	msr	BASEPRI, r3

		timerNORMALLY_EMPTY_RX();
  4030f6:	4b69      	ldr	r3, [pc, #420]	; (40329c <xSecondTimerHandler+0x28c>)
  4030f8:	681b      	ldr	r3, [r3, #0]
  4030fa:	463a      	mov	r2, r7
  4030fc:	1d39      	adds	r1, r7, #4
  4030fe:	4618      	mov	r0, r3
  403100:	4b6a      	ldr	r3, [pc, #424]	; (4032ac <xSecondTimerHandler+0x29c>)
  403102:	4798      	blx	r3
  403104:	4603      	mov	r3, r0
  403106:	2b01      	cmp	r3, #1
  403108:	d004      	beq.n	403114 <xSecondTimerHandler+0x104>
  40310a:	f240 209f 	movw	r0, #671	; 0x29f
  40310e:	4b68      	ldr	r3, [pc, #416]	; (4032b0 <xSecondTimerHandler+0x2a0>)
  403110:	4798      	blx	r3
  403112:	e004      	b.n	40311e <xSecondTimerHandler+0x10e>
  403114:	687b      	ldr	r3, [r7, #4]
  403116:	2105      	movs	r1, #5
  403118:	4618      	mov	r0, r3
  40311a:	4b66      	ldr	r3, [pc, #408]	; (4032b4 <xSecondTimerHandler+0x2a4>)
  40311c:	4798      	blx	r3
		timerNORMALLY_EMPTY_RX();
  40311e:	4b5f      	ldr	r3, [pc, #380]	; (40329c <xSecondTimerHandler+0x28c>)
  403120:	681b      	ldr	r3, [r3, #0]
  403122:	463a      	mov	r2, r7
  403124:	1d39      	adds	r1, r7, #4
  403126:	4618      	mov	r0, r3
  403128:	4b60      	ldr	r3, [pc, #384]	; (4032ac <xSecondTimerHandler+0x29c>)
  40312a:	4798      	blx	r3
  40312c:	4603      	mov	r3, r0
  40312e:	2b01      	cmp	r3, #1
  403130:	d004      	beq.n	40313c <xSecondTimerHandler+0x12c>
  403132:	f44f 7028 	mov.w	r0, #672	; 0x2a0
  403136:	4b5e      	ldr	r3, [pc, #376]	; (4032b0 <xSecondTimerHandler+0x2a0>)
  403138:	4798      	blx	r3
  40313a:	e0a7      	b.n	40328c <xSecondTimerHandler+0x27c>
  40313c:	687b      	ldr	r3, [r7, #4]
  40313e:	2105      	movs	r1, #5
  403140:	4618      	mov	r0, r3
  403142:	4b5c      	ldr	r3, [pc, #368]	; (4032b4 <xSecondTimerHandler+0x2a4>)
  403144:	4798      	blx	r3
  403146:	e0a1      	b.n	40328c <xSecondTimerHandler+0x27c>
	}
	else
	{
		timerNORMALLY_FULL_RX();
  403148:	4b5b      	ldr	r3, [pc, #364]	; (4032b8 <xSecondTimerHandler+0x2a8>)
  40314a:	681b      	ldr	r3, [r3, #0]
  40314c:	463a      	mov	r2, r7
  40314e:	1d39      	adds	r1, r7, #4
  403150:	4618      	mov	r0, r3
  403152:	4b56      	ldr	r3, [pc, #344]	; (4032ac <xSecondTimerHandler+0x29c>)
  403154:	4798      	blx	r3
  403156:	4603      	mov	r3, r0
  403158:	2b01      	cmp	r3, #1
  40315a:	d104      	bne.n	403166 <xSecondTimerHandler+0x156>
  40315c:	687b      	ldr	r3, [r7, #4]
  40315e:	2105      	movs	r1, #5
  403160:	4618      	mov	r0, r3
  403162:	4b56      	ldr	r3, [pc, #344]	; (4032bc <xSecondTimerHandler+0x2ac>)
  403164:	4798      	blx	r3
		timerNORMALLY_FULL_TX();
  403166:	4b54      	ldr	r3, [pc, #336]	; (4032b8 <xSecondTimerHandler+0x2a8>)
  403168:	681b      	ldr	r3, [r3, #0]
  40316a:	4618      	mov	r0, r3
  40316c:	4b4c      	ldr	r3, [pc, #304]	; (4032a0 <xSecondTimerHandler+0x290>)
  40316e:	4798      	blx	r3
  403170:	4603      	mov	r3, r0
  403172:	2b01      	cmp	r3, #1
  403174:	d028      	beq.n	4031c8 <xSecondTimerHandler+0x1b8>
	__asm volatile
  403176:	f3ef 8211 	mrs	r2, BASEPRI
  40317a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40317e:	b672      	cpsid	i
  403180:	f383 8811 	msr	BASEPRI, r3
  403184:	f3bf 8f6f 	isb	sy
  403188:	f3bf 8f4f 	dsb	sy
  40318c:	b662      	cpsie	i
  40318e:	62ba      	str	r2, [r7, #40]	; 0x28
  403190:	627b      	str	r3, [r7, #36]	; 0x24
	return ulOriginalBASEPRI;
  403192:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403194:	64fb      	str	r3, [r7, #76]	; 0x4c
  403196:	4b4a      	ldr	r3, [pc, #296]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  403198:	681b      	ldr	r3, [r3, #0]
  40319a:	3301      	adds	r3, #1
  40319c:	4a48      	ldr	r2, [pc, #288]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  40319e:	6013      	str	r3, [r2, #0]
  4031a0:	4b45      	ldr	r3, [pc, #276]	; (4032b8 <xSecondTimerHandler+0x2a8>)
  4031a2:	6818      	ldr	r0, [r3, #0]
  4031a4:	463a      	mov	r2, r7
  4031a6:	2300      	movs	r3, #0
  4031a8:	4945      	ldr	r1, [pc, #276]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  4031aa:	4c3f      	ldr	r4, [pc, #252]	; (4032a8 <xSecondTimerHandler+0x298>)
  4031ac:	47a0      	blx	r4
  4031ae:	4603      	mov	r3, r0
  4031b0:	2b01      	cmp	r3, #1
  4031b2:	d004      	beq.n	4031be <xSecondTimerHandler+0x1ae>
  4031b4:	4b42      	ldr	r3, [pc, #264]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  4031b6:	681b      	ldr	r3, [r3, #0]
  4031b8:	3b01      	subs	r3, #1
  4031ba:	4a41      	ldr	r2, [pc, #260]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  4031bc:	6013      	str	r3, [r2, #0]
  4031be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4031c0:	623b      	str	r3, [r7, #32]
	__asm volatile
  4031c2:	6a3b      	ldr	r3, [r7, #32]
  4031c4:	f383 8811 	msr	BASEPRI, r3
		timerNORMALLY_FULL_TX();
  4031c8:	4b3b      	ldr	r3, [pc, #236]	; (4032b8 <xSecondTimerHandler+0x2a8>)
  4031ca:	681b      	ldr	r3, [r3, #0]
  4031cc:	4618      	mov	r0, r3
  4031ce:	4b34      	ldr	r3, [pc, #208]	; (4032a0 <xSecondTimerHandler+0x290>)
  4031d0:	4798      	blx	r3
  4031d2:	4603      	mov	r3, r0
  4031d4:	2b01      	cmp	r3, #1
  4031d6:	d028      	beq.n	40322a <xSecondTimerHandler+0x21a>
	__asm volatile
  4031d8:	f3ef 8211 	mrs	r2, BASEPRI
  4031dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031e0:	b672      	cpsid	i
  4031e2:	f383 8811 	msr	BASEPRI, r3
  4031e6:	f3bf 8f6f 	isb	sy
  4031ea:	f3bf 8f4f 	dsb	sy
  4031ee:	b662      	cpsie	i
  4031f0:	61fa      	str	r2, [r7, #28]
  4031f2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
  4031f4:	69fb      	ldr	r3, [r7, #28]
  4031f6:	64bb      	str	r3, [r7, #72]	; 0x48
  4031f8:	4b31      	ldr	r3, [pc, #196]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  4031fa:	681b      	ldr	r3, [r3, #0]
  4031fc:	3301      	adds	r3, #1
  4031fe:	4a30      	ldr	r2, [pc, #192]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  403200:	6013      	str	r3, [r2, #0]
  403202:	4b2d      	ldr	r3, [pc, #180]	; (4032b8 <xSecondTimerHandler+0x2a8>)
  403204:	6818      	ldr	r0, [r3, #0]
  403206:	463a      	mov	r2, r7
  403208:	2300      	movs	r3, #0
  40320a:	492d      	ldr	r1, [pc, #180]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  40320c:	4c26      	ldr	r4, [pc, #152]	; (4032a8 <xSecondTimerHandler+0x298>)
  40320e:	47a0      	blx	r4
  403210:	4603      	mov	r3, r0
  403212:	2b01      	cmp	r3, #1
  403214:	d004      	beq.n	403220 <xSecondTimerHandler+0x210>
  403216:	4b2a      	ldr	r3, [pc, #168]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  403218:	681b      	ldr	r3, [r3, #0]
  40321a:	3b01      	subs	r3, #1
  40321c:	4a28      	ldr	r2, [pc, #160]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  40321e:	6013      	str	r3, [r2, #0]
  403220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  403222:	617b      	str	r3, [r7, #20]
	__asm volatile
  403224:	697b      	ldr	r3, [r7, #20]
  403226:	f383 8811 	msr	BASEPRI, r3
		timerNORMALLY_FULL_TX();
  40322a:	4b23      	ldr	r3, [pc, #140]	; (4032b8 <xSecondTimerHandler+0x2a8>)
  40322c:	681b      	ldr	r3, [r3, #0]
  40322e:	4618      	mov	r0, r3
  403230:	4b1b      	ldr	r3, [pc, #108]	; (4032a0 <xSecondTimerHandler+0x290>)
  403232:	4798      	blx	r3
  403234:	4603      	mov	r3, r0
  403236:	2b01      	cmp	r3, #1
  403238:	d028      	beq.n	40328c <xSecondTimerHandler+0x27c>
	__asm volatile
  40323a:	f3ef 8211 	mrs	r2, BASEPRI
  40323e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403242:	b672      	cpsid	i
  403244:	f383 8811 	msr	BASEPRI, r3
  403248:	f3bf 8f6f 	isb	sy
  40324c:	f3bf 8f4f 	dsb	sy
  403250:	b662      	cpsie	i
  403252:	613a      	str	r2, [r7, #16]
  403254:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
  403256:	693b      	ldr	r3, [r7, #16]
  403258:	647b      	str	r3, [r7, #68]	; 0x44
  40325a:	4b19      	ldr	r3, [pc, #100]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  40325c:	681b      	ldr	r3, [r3, #0]
  40325e:	3301      	adds	r3, #1
  403260:	4a17      	ldr	r2, [pc, #92]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  403262:	6013      	str	r3, [r2, #0]
  403264:	4b14      	ldr	r3, [pc, #80]	; (4032b8 <xSecondTimerHandler+0x2a8>)
  403266:	6818      	ldr	r0, [r3, #0]
  403268:	463a      	mov	r2, r7
  40326a:	2300      	movs	r3, #0
  40326c:	4914      	ldr	r1, [pc, #80]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  40326e:	4c0e      	ldr	r4, [pc, #56]	; (4032a8 <xSecondTimerHandler+0x298>)
  403270:	47a0      	blx	r4
  403272:	4603      	mov	r3, r0
  403274:	2b01      	cmp	r3, #1
  403276:	d004      	beq.n	403282 <xSecondTimerHandler+0x272>
  403278:	4b11      	ldr	r3, [pc, #68]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  40327a:	681b      	ldr	r3, [r3, #0]
  40327c:	3b01      	subs	r3, #1
  40327e:	4a10      	ldr	r2, [pc, #64]	; (4032c0 <xSecondTimerHandler+0x2b0>)
  403280:	6013      	str	r3, [r2, #0]
  403282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  403284:	60bb      	str	r3, [r7, #8]
	__asm volatile
  403286:	68bb      	ldr	r3, [r7, #8]
  403288:	f383 8811 	msr	BASEPRI, r3
	}

	return xHigherPriorityTaskWoken;
  40328c:	683b      	ldr	r3, [r7, #0]
}
  40328e:	4618      	mov	r0, r3
  403290:	375c      	adds	r7, #92	; 0x5c
  403292:	46bd      	mov	sp, r7
  403294:	bd90      	pop	{r4, r7, pc}
  403296:	bf00      	nop
  403298:	2040c514 	.word	0x2040c514
  40329c:	2040c358 	.word	0x2040c358
  4032a0:	0040167d 	.word	0x0040167d
  4032a4:	2040c378 	.word	0x2040c378
  4032a8:	00400f9d 	.word	0x00400f9d
  4032ac:	004012fd 	.word	0x004012fd
  4032b0:	00402e19 	.word	0x00402e19
  4032b4:	00402dd9 	.word	0x00402dd9
  4032b8:	2040c35c 	.word	0x2040c35c
  4032bc:	00402d99 	.word	0x00402d99
  4032c0:	2040c37c 	.word	0x2040c37c

004032c4 <main_blinky>:
static QueueHandle_t xQueue = NULL;

/*-----------------------------------------------------------*/

void main_blinky( void )
{
  4032c4:	b590      	push	{r4, r7, lr}
  4032c6:	b083      	sub	sp, #12
  4032c8:	af02      	add	r7, sp, #8
	/* Create the queue. */
	xQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( uint32_t ) );
  4032ca:	2200      	movs	r2, #0
  4032cc:	2104      	movs	r1, #4
  4032ce:	2001      	movs	r0, #1
  4032d0:	4b0f      	ldr	r3, [pc, #60]	; (403310 <main_blinky+0x4c>)
  4032d2:	4798      	blx	r3
  4032d4:	4602      	mov	r2, r0
  4032d6:	4b0f      	ldr	r3, [pc, #60]	; (403314 <main_blinky+0x50>)
  4032d8:	601a      	str	r2, [r3, #0]

	if( xQueue != NULL )
  4032da:	4b0e      	ldr	r3, [pc, #56]	; (403314 <main_blinky+0x50>)
  4032dc:	681b      	ldr	r3, [r3, #0]
  4032de:	2b00      	cmp	r3, #0
  4032e0:	d015      	beq.n	40330e <main_blinky+0x4a>
	{
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvQueueReceiveTask,				/* The function that implements the task. */
  4032e2:	2300      	movs	r3, #0
  4032e4:	9301      	str	r3, [sp, #4]
  4032e6:	2302      	movs	r3, #2
  4032e8:	9300      	str	r3, [sp, #0]
  4032ea:	2300      	movs	r3, #0
  4032ec:	2282      	movs	r2, #130	; 0x82
  4032ee:	490a      	ldr	r1, [pc, #40]	; (403318 <main_blinky+0x54>)
  4032f0:	480a      	ldr	r0, [pc, #40]	; (40331c <main_blinky+0x58>)
  4032f2:	4c0b      	ldr	r4, [pc, #44]	; (403320 <main_blinky+0x5c>)
  4032f4:	47a0      	blx	r4
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					NULL, 								/* The parameter passed to the task - not used in this case. */
					mainQUEUE_RECEIVE_TASK_PRIORITY, 	/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */

		xTaskCreate( prvQueueSendTask, "TX", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_SEND_TASK_PRIORITY, NULL );
  4032f6:	2300      	movs	r3, #0
  4032f8:	9301      	str	r3, [sp, #4]
  4032fa:	2301      	movs	r3, #1
  4032fc:	9300      	str	r3, [sp, #0]
  4032fe:	2300      	movs	r3, #0
  403300:	2282      	movs	r2, #130	; 0x82
  403302:	4908      	ldr	r1, [pc, #32]	; (403324 <main_blinky+0x60>)
  403304:	4808      	ldr	r0, [pc, #32]	; (403328 <main_blinky+0x64>)
  403306:	4c06      	ldr	r4, [pc, #24]	; (403320 <main_blinky+0x5c>)
  403308:	47a0      	blx	r4

		/* Start the tasks and timer running. */
		vTaskStartScheduler();
  40330a:	4b08      	ldr	r3, [pc, #32]	; (40332c <main_blinky+0x68>)
  40330c:	4798      	blx	r3
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the Idle and/or
	timer tasks to be created.  See the memory management section on the
	FreeRTOS web site for more details on the FreeRTOS heap
	http://www.freertos.org/a00111.html. */
	for( ;; );
  40330e:	e7fe      	b.n	40330e <main_blinky+0x4a>
  403310:	00400c6d 	.word	0x00400c6d
  403314:	2040c530 	.word	0x2040c530
  403318:	0040a7f8 	.word	0x0040a7f8
  40331c:	00403375 	.word	0x00403375
  403320:	00401851 	.word	0x00401851
  403324:	0040a7fc 	.word	0x0040a7fc
  403328:	00403331 	.word	0x00403331
  40332c:	00401bf9 	.word	0x00401bf9

00403330 <prvQueueSendTask>:
}
/*-----------------------------------------------------------*/

static void prvQueueSendTask( void *pvParameters )
{
  403330:	b590      	push	{r4, r7, lr}
  403332:	b085      	sub	sp, #20
  403334:	af00      	add	r7, sp, #0
  403336:	6078      	str	r0, [r7, #4]
TickType_t xNextWakeTime;
const unsigned long ulValueToSend = 100UL;
  403338:	2364      	movs	r3, #100	; 0x64
  40333a:	60bb      	str	r3, [r7, #8]

	/* Remove compiler warning about unused parameter. */
	( void ) pvParameters;

	/* Initialise xNextWakeTime - this only needs to be done once. */
	xNextWakeTime = xTaskGetTickCount();
  40333c:	4b09      	ldr	r3, [pc, #36]	; (403364 <prvQueueSendTask+0x34>)
  40333e:	4798      	blx	r3
  403340:	4603      	mov	r3, r0
  403342:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		/* Place this task in the blocked state until it is time to run again. */
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS );
  403344:	f107 030c 	add.w	r3, r7, #12
  403348:	21c8      	movs	r1, #200	; 0xc8
  40334a:	4618      	mov	r0, r3
  40334c:	4b06      	ldr	r3, [pc, #24]	; (403368 <prvQueueSendTask+0x38>)
  40334e:	4798      	blx	r3

		/* Send to the queue - causing the queue receive task to unblock and
		toggle the LED.  0 is used as the block time so the sending operation
		will not block - it shouldn't need to block as the queue should always
		be empty at this point in the code. */
		xQueueSend( xQueue, &ulValueToSend, 0U );
  403350:	4b06      	ldr	r3, [pc, #24]	; (40336c <prvQueueSendTask+0x3c>)
  403352:	6818      	ldr	r0, [r3, #0]
  403354:	f107 0108 	add.w	r1, r7, #8
  403358:	2300      	movs	r3, #0
  40335a:	2200      	movs	r2, #0
  40335c:	4c04      	ldr	r4, [pc, #16]	; (403370 <prvQueueSendTask+0x40>)
  40335e:	47a0      	blx	r4
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS );
  403360:	e7f0      	b.n	403344 <prvQueueSendTask+0x14>
  403362:	bf00      	nop
  403364:	00401e15 	.word	0x00401e15
  403368:	00401aed 	.word	0x00401aed
  40336c:	2040c530 	.word	0x2040c530
  403370:	00400d3d 	.word	0x00400d3d

00403374 <prvQueueReceiveTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvQueueReceiveTask( void *pvParameters )
{
  403374:	b580      	push	{r7, lr}
  403376:	b084      	sub	sp, #16
  403378:	af00      	add	r7, sp, #0
  40337a:	6078      	str	r0, [r7, #4]
unsigned long ulReceivedValue;
const unsigned long ulExpectedValue = 100UL;
  40337c:	2364      	movs	r3, #100	; 0x64
  40337e:	60fb      	str	r3, [r7, #12]
	for( ;; )
	{
		/* Wait until something arrives in the queue - this task will block
		indefinitely provided INCLUDE_vTaskSuspend is set to 1 in
		FreeRTOSConfig.h. */
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
  403380:	4b09      	ldr	r3, [pc, #36]	; (4033a8 <prvQueueReceiveTask+0x34>)
  403382:	681b      	ldr	r3, [r3, #0]
  403384:	f107 0108 	add.w	r1, r7, #8
  403388:	f04f 32ff 	mov.w	r2, #4294967295
  40338c:	4618      	mov	r0, r3
  40338e:	4b07      	ldr	r3, [pc, #28]	; (4033ac <prvQueueReceiveTask+0x38>)
  403390:	4798      	blx	r3

		/*  To get here something must have been received from the queue, but
		is it the expected value?  If it is, toggle the LED. */
		if( ulReceivedValue == ulExpectedValue )
  403392:	68ba      	ldr	r2, [r7, #8]
  403394:	68fb      	ldr	r3, [r7, #12]
  403396:	429a      	cmp	r2, r3
  403398:	d1f2      	bne.n	403380 <prvQueueReceiveTask+0xc>
		{
			LED_Toggle( mainTASK_LED );
  40339a:	2000      	movs	r0, #0
  40339c:	4b04      	ldr	r3, [pc, #16]	; (4033b0 <prvQueueReceiveTask+0x3c>)
  40339e:	4798      	blx	r3
			ulReceivedValue = 0U;
  4033a0:	2300      	movs	r3, #0
  4033a2:	60bb      	str	r3, [r7, #8]
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
  4033a4:	e7ec      	b.n	403380 <prvQueueReceiveTask+0xc>
  4033a6:	bf00      	nop
  4033a8:	2040c530 	.word	0x2040c530
  4033ac:	00401109 	.word	0x00401109
  4033b0:	0040398d 	.word	0x0040398d

004033b4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4033b4:	b480      	push	{r7}
  4033b6:	b083      	sub	sp, #12
  4033b8:	af00      	add	r7, sp, #0
  4033ba:	4603      	mov	r3, r0
  4033bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4033be:	4909      	ldr	r1, [pc, #36]	; (4033e4 <NVIC_ClearPendingIRQ+0x30>)
  4033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4033c4:	095b      	lsrs	r3, r3, #5
  4033c6:	79fa      	ldrb	r2, [r7, #7]
  4033c8:	f002 021f 	and.w	r2, r2, #31
  4033cc:	2001      	movs	r0, #1
  4033ce:	fa00 f202 	lsl.w	r2, r0, r2
  4033d2:	3360      	adds	r3, #96	; 0x60
  4033d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4033d8:	bf00      	nop
  4033da:	370c      	adds	r7, #12
  4033dc:	46bd      	mov	sp, r7
  4033de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033e2:	4770      	bx	lr
  4033e4:	e000e100 	.word	0xe000e100

004033e8 <TC0_Handler>:
//	TC_Start( TC1, tmrTC1_CHANNEL_0 );
}
/*-----------------------------------------------------------*/

void TC0_Handler( void )
{
  4033e8:	b580      	push	{r7, lr}
  4033ea:	af00      	add	r7, sp, #0
	/* Read will clear the status bit. */
	if( ( TC0->TC_CHANNEL[ tmrTC0_CHANNEL_0 ].TC_SR & tmrRC_COMPARE ) != 0 )
  4033ec:	4b13      	ldr	r3, [pc, #76]	; (40343c <TC0_Handler+0x54>)
  4033ee:	6a1b      	ldr	r3, [r3, #32]
  4033f0:	f003 0310 	and.w	r3, r3, #16
  4033f4:	2b00      	cmp	r3, #0
  4033f6:	d00c      	beq.n	403412 <TC0_Handler+0x2a>
	{
		/* Call the IntQ test function for this channel. */
		portYIELD_FROM_ISR( xFirstTimerHandler() );
  4033f8:	4b11      	ldr	r3, [pc, #68]	; (403440 <TC0_Handler+0x58>)
  4033fa:	4798      	blx	r3
  4033fc:	4603      	mov	r3, r0
  4033fe:	2b00      	cmp	r3, #0
  403400:	d007      	beq.n	403412 <TC0_Handler+0x2a>
  403402:	4b10      	ldr	r3, [pc, #64]	; (403444 <TC0_Handler+0x5c>)
  403404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403408:	601a      	str	r2, [r3, #0]
  40340a:	f3bf 8f4f 	dsb	sy
  40340e:	f3bf 8f6f 	isb	sy
	}

	if( ( TC0->TC_CHANNEL[ tmrTC0_CHANNEL_1 ].TC_SR & tmrRC_COMPARE ) != 0 )
  403412:	4b0a      	ldr	r3, [pc, #40]	; (40343c <TC0_Handler+0x54>)
  403414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  403416:	f003 0310 	and.w	r3, r3, #16
  40341a:	2b00      	cmp	r3, #0
  40341c:	d00c      	beq.n	403438 <TC0_Handler+0x50>
	{
		/* Call the IntQ test function for this channel. */
		portYIELD_FROM_ISR( xSecondTimerHandler() );
  40341e:	4b0a      	ldr	r3, [pc, #40]	; (403448 <TC0_Handler+0x60>)
  403420:	4798      	blx	r3
  403422:	4603      	mov	r3, r0
  403424:	2b00      	cmp	r3, #0
  403426:	d007      	beq.n	403438 <TC0_Handler+0x50>
  403428:	4b06      	ldr	r3, [pc, #24]	; (403444 <TC0_Handler+0x5c>)
  40342a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40342e:	601a      	str	r2, [r3, #0]
  403430:	f3bf 8f4f 	dsb	sy
  403434:	f3bf 8f6f 	isb	sy
	}
}
  403438:	bf00      	nop
  40343a:	bd80      	pop	{r7, pc}
  40343c:	4000c000 	.word	0x4000c000
  403440:	00402e41 	.word	0x00402e41
  403444:	e000ed04 	.word	0xe000ed04
  403448:	00403011 	.word	0x00403011

0040344c <TC1_Handler>:
/*-----------------------------------------------------------*/

void TC1_Handler( void )
{
  40344c:	b580      	push	{r7, lr}
  40344e:	b082      	sub	sp, #8
  403450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy;

    /* Dummy read to clear status bit. */
    ulDummy = TC1->TC_CHANNEL[ tmrTC1_CHANNEL_0 ].TC_SR;
  403452:	4b08      	ldr	r3, [pc, #32]	; (403474 <TC1_Handler+0x28>)
  403454:	6a1b      	ldr	r3, [r3, #32]
  403456:	607b      	str	r3, [r7, #4]
	NVIC_ClearPendingIRQ( TC1_IRQn );
  403458:	2018      	movs	r0, #24
  40345a:	4b07      	ldr	r3, [pc, #28]	; (403478 <TC1_Handler+0x2c>)
  40345c:	4798      	blx	r3

	/* Keep a count of the number of interrupts to use as a time base for the
	run-time stats. */
	ulHighFrequencyTimerCounts++;
  40345e:	4b07      	ldr	r3, [pc, #28]	; (40347c <TC1_Handler+0x30>)
  403460:	681b      	ldr	r3, [r3, #0]
  403462:	3301      	adds	r3, #1
  403464:	4a05      	ldr	r2, [pc, #20]	; (40347c <TC1_Handler+0x30>)
  403466:	6013      	str	r3, [r2, #0]

	/* Prevent compiler warnings about the variable being set but then
	unused. */
	( void ) ulDummy;
  403468:	687b      	ldr	r3, [r7, #4]
}
  40346a:	bf00      	nop
  40346c:	3708      	adds	r7, #8
  40346e:	46bd      	mov	sp, r7
  403470:	bd80      	pop	{r7, pc}
  403472:	bf00      	nop
  403474:	40010000 	.word	0x40010000
  403478:	004033b5 	.word	0x004033b5
  40347c:	2040c53c 	.word	0x2040c53c

00403480 <TCM_Disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
__STATIC_INLINE void TCM_Disable(void) 
{
  403480:	b480      	push	{r7}
  403482:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403484:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403488:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)SCB_ITCMCR_EN_Msk;
  40348c:	4a0c      	ldr	r2, [pc, #48]	; (4034c0 <TCM_Disable+0x40>)
  40348e:	4b0c      	ldr	r3, [pc, #48]	; (4034c0 <TCM_Disable+0x40>)
  403490:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  403494:	f023 0301 	bic.w	r3, r3, #1
  403498:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_ITCMCR_EN_Msk;
  40349c:	4a08      	ldr	r2, [pc, #32]	; (4034c0 <TCM_Disable+0x40>)
  40349e:	4b08      	ldr	r3, [pc, #32]	; (4034c0 <TCM_Disable+0x40>)
  4034a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  4034a4:	f023 0301 	bic.w	r3, r3, #1
  4034a8:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  4034ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4034b0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  4034b4:	bf00      	nop
  4034b6:	46bd      	mov	sp, r7
  4034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4034bc:	4770      	bx	lr
  4034be:	bf00      	nop
  4034c0:	e000ed00 	.word	0xe000ed00

004034c4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4034c4:	b580      	push	{r7, lr}
  4034c6:	b082      	sub	sp, #8
  4034c8:	af00      	add	r7, sp, #0
		uint32_t *pSrc, *pDest;

		/* Initialize the relocate segment */
		pSrc = &_etext;
  4034ca:	4b1b      	ldr	r3, [pc, #108]	; (403538 <Reset_Handler+0x74>)
  4034cc:	607b      	str	r3, [r7, #4]
		pDest = &_srelocate;
  4034ce:	4b1b      	ldr	r3, [pc, #108]	; (40353c <Reset_Handler+0x78>)
  4034d0:	603b      	str	r3, [r7, #0]

		if (pSrc != pDest) {
  4034d2:	687a      	ldr	r2, [r7, #4]
  4034d4:	683b      	ldr	r3, [r7, #0]
  4034d6:	429a      	cmp	r2, r3
  4034d8:	d00c      	beq.n	4034f4 <Reset_Handler+0x30>
				for (; pDest < &_erelocate;) {
  4034da:	e007      	b.n	4034ec <Reset_Handler+0x28>
						*pDest++ = *pSrc++;
  4034dc:	683b      	ldr	r3, [r7, #0]
  4034de:	1d1a      	adds	r2, r3, #4
  4034e0:	603a      	str	r2, [r7, #0]
  4034e2:	687a      	ldr	r2, [r7, #4]
  4034e4:	1d11      	adds	r1, r2, #4
  4034e6:	6079      	str	r1, [r7, #4]
  4034e8:	6812      	ldr	r2, [r2, #0]
  4034ea:	601a      	str	r2, [r3, #0]
				for (; pDest < &_erelocate;) {
  4034ec:	683b      	ldr	r3, [r7, #0]
  4034ee:	4a14      	ldr	r2, [pc, #80]	; (403540 <Reset_Handler+0x7c>)
  4034f0:	4293      	cmp	r3, r2
  4034f2:	d3f3      	bcc.n	4034dc <Reset_Handler+0x18>
				}
		}

		/* Clear the zero segment */
		for (pDest = &_szero; pDest < &_ezero;) {
  4034f4:	4b13      	ldr	r3, [pc, #76]	; (403544 <Reset_Handler+0x80>)
  4034f6:	603b      	str	r3, [r7, #0]
  4034f8:	e004      	b.n	403504 <Reset_Handler+0x40>
				*pDest++ = 0;
  4034fa:	683b      	ldr	r3, [r7, #0]
  4034fc:	1d1a      	adds	r2, r3, #4
  4034fe:	603a      	str	r2, [r7, #0]
  403500:	2200      	movs	r2, #0
  403502:	601a      	str	r2, [r3, #0]
		for (pDest = &_szero; pDest < &_ezero;) {
  403504:	683b      	ldr	r3, [r7, #0]
  403506:	4a10      	ldr	r2, [pc, #64]	; (403548 <Reset_Handler+0x84>)
  403508:	4293      	cmp	r3, r2
  40350a:	d3f6      	bcc.n	4034fa <Reset_Handler+0x36>
		}

		/* Set the vector table base address */
		pSrc = (uint32_t *) & _sfixed;
  40350c:	4b0f      	ldr	r3, [pc, #60]	; (40354c <Reset_Handler+0x88>)
  40350e:	607b      	str	r3, [r7, #4]
		SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403510:	4a0f      	ldr	r2, [pc, #60]	; (403550 <Reset_Handler+0x8c>)
  403512:	687b      	ldr	r3, [r7, #4]
  403514:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403518:	6093      	str	r3, [r2, #8]
		EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_SGPB
						| EEFC_FCR_FARG(7));
 
		TCM_Enable();
	#else
		EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40351a:	4b0e      	ldr	r3, [pc, #56]	; (403554 <Reset_Handler+0x90>)
  40351c:	4a0e      	ldr	r2, [pc, #56]	; (403558 <Reset_Handler+0x94>)
  40351e:	605a      	str	r2, [r3, #4]
						| EEFC_FCR_FARG(8));
		EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  403520:	4b0c      	ldr	r3, [pc, #48]	; (403554 <Reset_Handler+0x90>)
  403522:	4a0e      	ldr	r2, [pc, #56]	; (40355c <Reset_Handler+0x98>)
  403524:	605a      	str	r2, [r3, #4]
						| EEFC_FCR_FARG(7));
	
		TCM_Disable();
  403526:	4b0e      	ldr	r3, [pc, #56]	; (403560 <Reset_Handler+0x9c>)
  403528:	4798      	blx	r3
	#endif

		LowLevelInit();
  40352a:	4b0e      	ldr	r3, [pc, #56]	; (403564 <Reset_Handler+0xa0>)
  40352c:	4798      	blx	r3
		/* Initialize the C library */
		__libc_init_array();
  40352e:	4b0e      	ldr	r3, [pc, #56]	; (403568 <Reset_Handler+0xa4>)
  403530:	4798      	blx	r3

		/* Branch to main function */
		main();
  403532:	4b0e      	ldr	r3, [pc, #56]	; (40356c <Reset_Handler+0xa8>)
  403534:	4798      	blx	r3

		/* Infinite loop */
		while (1);
  403536:	e7fe      	b.n	403536 <Reset_Handler+0x72>
  403538:	0040accc 	.word	0x0040accc
  40353c:	20400000 	.word	0x20400000
  403540:	204009b8 	.word	0x204009b8
  403544:	204009b8 	.word	0x204009b8
  403548:	2040c5f0 	.word	0x2040c5f0
  40354c:	00400000 	.word	0x00400000
  403550:	e000ed00 	.word	0xe000ed00
  403554:	400e0c00 	.word	0x400e0c00
  403558:	5a00080c 	.word	0x5a00080c
  40355c:	5a00070c 	.word	0x5a00070c
  403560:	00403481 	.word	0x00403481
  403564:	00403821 	.word	0x00403821
  403568:	00404b59 	.word	0x00404b59
  40356c:	004041a5 	.word	0x004041a5

00403570 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403570:	b480      	push	{r7}
  403572:	af00      	add	r7, sp, #0
		while (1) {
  403574:	e7fe      	b.n	403574 <Dummy_Handler+0x4>
	...

00403578 <SystemInit>:
/**
 * \brief Set up the Microcontroller system.
 * Initialize the System and update the SystemFrequency variable.
 */
 void SystemInit( void )
{
  403578:	b480      	push	{r7}
  40357a:	b083      	sub	sp, #12
  40357c:	af00      	add	r7, sp, #0
	uint32_t read_MOR;
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC->EEFC_FMR = EEFC_FMR_FWS(5);
  40357e:	4b38      	ldr	r3, [pc, #224]	; (403660 <SystemInit+0xe8>)
  403580:	f44f 62a0 	mov.w	r2, #1280	; 0x500
  403584:	601a      	str	r2, [r3, #0]
	 /* Before switching MAIN OSC on external crystal : enable it and don't 
	 * disable at the same time RC OSC in case of if MAIN OSC is still using RC
	 * OSC
	 */
	
	read_MOR = PMC->CKGR_MOR;
  403586:	4b37      	ldr	r3, [pc, #220]	; (403664 <SystemInit+0xec>)
  403588:	6a1b      	ldr	r3, [r3, #32]
  40358a:	607b      	str	r3, [r7, #4]
	 /* enable external crystal - enable RC OSC */
	read_MOR |= (CKGR_MOR_KEY_PASSWD |CKGR_MOR_XT32KFME); 
  40358c:	687a      	ldr	r2, [r7, #4]
  40358e:	4b36      	ldr	r3, [pc, #216]	; (403668 <SystemInit+0xf0>)
  403590:	4313      	orrs	r3, r2
  403592:	607b      	str	r3, [r7, #4]
	PMC->CKGR_MOR = read_MOR;
  403594:	4a33      	ldr	r2, [pc, #204]	; (403664 <SystemInit+0xec>)
  403596:	687b      	ldr	r3, [r7, #4]
  403598:	6213      	str	r3, [r2, #32]
	
	/* Select XTAL 32k instead of internal slow RC 32k for slow clock */
	if ( (SUPC->SUPC_SR & SUPC_SR_OSCSEL) != SUPC_SR_OSCSEL_CRYST )
  40359a:	4b34      	ldr	r3, [pc, #208]	; (40366c <SystemInit+0xf4>)
  40359c:	695b      	ldr	r3, [r3, #20]
  40359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4035a2:	2b80      	cmp	r3, #128	; 0x80
  4035a4:	d009      	beq.n	4035ba <SystemInit+0x42>
	{
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL_CRYSTAL_SEL;
  4035a6:	4b31      	ldr	r3, [pc, #196]	; (40366c <SystemInit+0xf4>)
  4035a8:	4a31      	ldr	r2, [pc, #196]	; (403670 <SystemInit+0xf8>)
  4035aa:	601a      	str	r2, [r3, #0]
	
		while( !(SUPC->SUPC_SR & SUPC_SR_OSCSEL) );
  4035ac:	bf00      	nop
  4035ae:	4b2f      	ldr	r3, [pc, #188]	; (40366c <SystemInit+0xf4>)
  4035b0:	695b      	ldr	r3, [r3, #20]
  4035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4035b6:	2b00      	cmp	r3, #0
  4035b8:	d0f9      	beq.n	4035ae <SystemInit+0x36>
	}
	
	/* Initialize main oscillator */
	if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
  4035ba:	4b2a      	ldr	r3, [pc, #168]	; (403664 <SystemInit+0xec>)
  4035bc:	6a1b      	ldr	r3, [r3, #32]
  4035be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4035c2:	2b00      	cmp	r3, #0
  4035c4:	d109      	bne.n	4035da <SystemInit+0x62>
	{
	  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT
  4035c6:	4b27      	ldr	r3, [pc, #156]	; (403664 <SystemInit+0xec>)
  4035c8:	4a2a      	ldr	r2, [pc, #168]	; (403674 <SystemInit+0xfc>)
  4035ca:	621a      	str	r2, [r3, #32]
					| CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
	
	  while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
  4035cc:	bf00      	nop
  4035ce:	4b25      	ldr	r3, [pc, #148]	; (403664 <SystemInit+0xec>)
  4035d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4035d2:	f003 0301 	and.w	r3, r3, #1
  4035d6:	2b00      	cmp	r3, #0
  4035d8:	d0f9      	beq.n	4035ce <SystemInit+0x56>
	  {
	  }
	}
	
	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT 
  4035da:	4b22      	ldr	r3, [pc, #136]	; (403664 <SystemInit+0xec>)
  4035dc:	4a26      	ldr	r2, [pc, #152]	; (403678 <SystemInit+0x100>)
  4035de:	621a      	str	r2, [r3, #32]
					| CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
	
	while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
  4035e0:	bf00      	nop
  4035e2:	4b20      	ldr	r3, [pc, #128]	; (403664 <SystemInit+0xec>)
  4035e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4035ea:	2b00      	cmp	r3, #0
  4035ec:	d0f9      	beq.n	4035e2 <SystemInit+0x6a>
	{
	}
	
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk)
  4035ee:	4a1d      	ldr	r2, [pc, #116]	; (403664 <SystemInit+0xec>)
  4035f0:	4b1c      	ldr	r3, [pc, #112]	; (403664 <SystemInit+0xec>)
  4035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4035f4:	f023 0303 	bic.w	r3, r3, #3
					| PMC_MCKR_CSS_MAIN_CLK;
  4035f8:	f043 0301 	orr.w	r3, r3, #1
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk)
  4035fc:	6313      	str	r3, [r2, #48]	; 0x30

	while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
  4035fe:	bf00      	nop
  403600:	4b18      	ldr	r3, [pc, #96]	; (403664 <SystemInit+0xec>)
  403602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403604:	f003 0308 	and.w	r3, r3, #8
  403608:	2b00      	cmp	r3, #0
  40360a:	d0f9      	beq.n	403600 <SystemInit+0x88>
	{
	}
   
	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
  40360c:	4b15      	ldr	r3, [pc, #84]	; (403664 <SystemInit+0xec>)
  40360e:	4a1b      	ldr	r2, [pc, #108]	; (40367c <SystemInit+0x104>)
  403610:	629a      	str	r2, [r3, #40]	; 0x28
	while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
  403612:	bf00      	nop
  403614:	4b13      	ldr	r3, [pc, #76]	; (403664 <SystemInit+0xec>)
  403616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403618:	f003 0302 	and.w	r3, r3, #2
  40361c:	2b00      	cmp	r3, #0
  40361e:	d0f9      	beq.n	403614 <SystemInit+0x9c>
	{
	}
   
	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
  403620:	4b10      	ldr	r3, [pc, #64]	; (403664 <SystemInit+0xec>)
  403622:	f240 1201 	movw	r2, #257	; 0x101
  403626:	631a      	str	r2, [r3, #48]	; 0x30
	while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
  403628:	bf00      	nop
  40362a:	4b0e      	ldr	r3, [pc, #56]	; (403664 <SystemInit+0xec>)
  40362c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40362e:	f003 0308 	and.w	r3, r3, #8
  403632:	2b00      	cmp	r3, #0
  403634:	d0f9      	beq.n	40362a <SystemInit+0xb2>
	{
	}
   
	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
  403636:	4b0b      	ldr	r3, [pc, #44]	; (403664 <SystemInit+0xec>)
  403638:	f44f 7281 	mov.w	r2, #258	; 0x102
  40363c:	631a      	str	r2, [r3, #48]	; 0x30
	while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
  40363e:	bf00      	nop
  403640:	4b08      	ldr	r3, [pc, #32]	; (403664 <SystemInit+0xec>)
  403642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403644:	f003 0308 	and.w	r3, r3, #8
  403648:	2b00      	cmp	r3, #0
  40364a:	d0f9      	beq.n	403640 <SystemInit+0xc8>
	{
	}
   
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
  40364c:	4b0c      	ldr	r3, [pc, #48]	; (403680 <SystemInit+0x108>)
  40364e:	4a0d      	ldr	r2, [pc, #52]	; (403684 <SystemInit+0x10c>)
  403650:	601a      	str	r2, [r3, #0]
}
  403652:	bf00      	nop
  403654:	370c      	adds	r7, #12
  403656:	46bd      	mov	sp, r7
  403658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40365c:	4770      	bx	lr
  40365e:	bf00      	nop
  403660:	400e0c00 	.word	0x400e0c00
  403664:	400e0600 	.word	0x400e0600
  403668:	04370000 	.word	0x04370000
  40366c:	400e1810 	.word	0x400e1810
  403670:	a5000008 	.word	0xa5000008
  403674:	00370809 	.word	0x00370809
  403678:	01370809 	.word	0x01370809
  40367c:	20183f01 	.word	0x20183f01
  403680:	20400008 	.word	0x20400008
  403684:	11e1a300 	.word	0x11e1a300

00403688 <_SetupMemoryRegion>:

/**
 * \brief Set up a memory region.
 */
void _SetupMemoryRegion( void )
{
  403688:	b580      	push	{r7, lr}
  40368a:	b082      	sub	sp, #8
  40368c:	af00      	add	r7, sp, #0
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40368e:	f3bf 8f5f 	dmb	sy
/***************************************************
	ITCM memory region --- Normal 
	START_Addr:-  0x00000000UL
	END_Addr:-    0x00400000UL
****************************************************/
	dwRegionBaseAddr = 
  403692:	2311      	movs	r3, #17
  403694:	607b      	str	r3, [r7, #4]
		MPU_REGION_VALID |
		MPU_DEFAULT_ITCM_REGION;        // 1

	dwRegionAttr = 
		MPU_AP_PRIVILEGED_READ_WRITE | 
		MPU_CalMPURegionSize(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  403696:	484a      	ldr	r0, [pc, #296]	; (4037c0 <_SetupMemoryRegion+0x138>)
  403698:	4b4a      	ldr	r3, [pc, #296]	; (4037c4 <_SetupMemoryRegion+0x13c>)
  40369a:	4798      	blx	r3
  40369c:	4602      	mov	r2, r0
	dwRegionAttr = 
  40369e:	4b4a      	ldr	r3, [pc, #296]	; (4037c8 <_SetupMemoryRegion+0x140>)
  4036a0:	4313      	orrs	r3, r2
  4036a2:	603b      	str	r3, [r7, #0]
		MPU_REGION_ENABLE;

	MPU_SetRegion( dwRegionBaseAddr, dwRegionAttr);
  4036a4:	6839      	ldr	r1, [r7, #0]
  4036a6:	6878      	ldr	r0, [r7, #4]
  4036a8:	4b48      	ldr	r3, [pc, #288]	; (4037cc <_SetupMemoryRegion+0x144>)
  4036aa:	4798      	blx	r3
	(update to Strongly ordered in write accesses)
	START_Addr:-  0x00400000UL
	END_Addr:-    0x00600000UL
******************************************************/
	
	dwRegionBaseAddr = 
  4036ac:	4b48      	ldr	r3, [pc, #288]	; (4037d0 <_SetupMemoryRegion+0x148>)
  4036ae:	607b      	str	r3, [r7, #4]
		MPU_DEFAULT_IFLASH_REGION;      //2

	dwRegionAttr = 
		MPU_AP_READONLY |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		MPU_CalMPURegionSize(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  4036b0:	4848      	ldr	r0, [pc, #288]	; (4037d4 <_SetupMemoryRegion+0x14c>)
  4036b2:	4b44      	ldr	r3, [pc, #272]	; (4037c4 <_SetupMemoryRegion+0x13c>)
  4036b4:	4798      	blx	r3
  4036b6:	4602      	mov	r2, r0
	dwRegionAttr = 
  4036b8:	4b47      	ldr	r3, [pc, #284]	; (4037d8 <_SetupMemoryRegion+0x150>)
  4036ba:	4313      	orrs	r3, r2
  4036bc:	603b      	str	r3, [r7, #0]
		MPU_REGION_ENABLE;

	MPU_SetRegion( dwRegionBaseAddr, dwRegionAttr);
  4036be:	6839      	ldr	r1, [r7, #0]
  4036c0:	6878      	ldr	r0, [r7, #4]
  4036c2:	4b42      	ldr	r3, [pc, #264]	; (4037cc <_SetupMemoryRegion+0x144>)
  4036c4:	4798      	blx	r3
	START_Addr:-  0x20000000L
	END_Addr:-    0x20400000UL
******************************************************/

	/* DTCM memory region */
	dwRegionBaseAddr = 
  4036c6:	4b45      	ldr	r3, [pc, #276]	; (4037dc <_SetupMemoryRegion+0x154>)
  4036c8:	607b      	str	r3, [r7, #4]
		MPU_REGION_VALID |
		MPU_DEFAULT_DTCM_REGION;         //3

	dwRegionAttr = 
		MPU_AP_PRIVILEGED_READ_WRITE | 
		MPU_CalMPURegionSize(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  4036ca:	483d      	ldr	r0, [pc, #244]	; (4037c0 <_SetupMemoryRegion+0x138>)
  4036cc:	4b3d      	ldr	r3, [pc, #244]	; (4037c4 <_SetupMemoryRegion+0x13c>)
  4036ce:	4798      	blx	r3
  4036d0:	4602      	mov	r2, r0
	dwRegionAttr = 
  4036d2:	4b3d      	ldr	r3, [pc, #244]	; (4037c8 <_SetupMemoryRegion+0x140>)
  4036d4:	4313      	orrs	r3, r2
  4036d6:	603b      	str	r3, [r7, #0]
		MPU_REGION_ENABLE;

	MPU_SetRegion( dwRegionBaseAddr, dwRegionAttr);
  4036d8:	6839      	ldr	r1, [r7, #0]
  4036da:	6878      	ldr	r0, [r7, #4]
  4036dc:	4b3b      	ldr	r3, [pc, #236]	; (4037cc <_SetupMemoryRegion+0x144>)
  4036de:	4798      	blx	r3
	SRAM Cacheable memory region --- Normal
	START_Addr:-  0x20400000UL
	END_Addr:-    0x2043FFFFUL
******************************************************/
	/* SRAM memory  region */
	dwRegionBaseAddr = 
  4036e0:	4b3f      	ldr	r3, [pc, #252]	; (4037e0 <_SetupMemoryRegion+0x158>)
  4036e2:	607b      	str	r3, [r7, #4]
		MPU_DEFAULT_SRAM_REGION_1;         //4

	dwRegionAttr = 
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		MPU_CalMPURegionSize(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS) 
  4036e4:	483f      	ldr	r0, [pc, #252]	; (4037e4 <_SetupMemoryRegion+0x15c>)
  4036e6:	4b37      	ldr	r3, [pc, #220]	; (4037c4 <_SetupMemoryRegion+0x13c>)
  4036e8:	4798      	blx	r3
  4036ea:	4602      	mov	r2, r0
	dwRegionAttr = 
  4036ec:	4b3e      	ldr	r3, [pc, #248]	; (4037e8 <_SetupMemoryRegion+0x160>)
  4036ee:	4313      	orrs	r3, r2
  4036f0:	603b      	str	r3, [r7, #0]
		| MPU_REGION_ENABLE;

	MPU_SetRegion( dwRegionBaseAddr, dwRegionAttr);
  4036f2:	6839      	ldr	r1, [r7, #0]
  4036f4:	6878      	ldr	r0, [r7, #4]
  4036f6:	4b35      	ldr	r3, [pc, #212]	; (4037cc <_SetupMemoryRegion+0x144>)
  4036f8:	4798      	blx	r3
	Internal SRAM second partition memory region --- Normal 
	START_Addr:-  0x20440000UL
	END_Addr:-    0x2045FFFFUL
******************************************************/
	/* SRAM memory region */
	dwRegionBaseAddr = 
  4036fa:	4b3c      	ldr	r3, [pc, #240]	; (4037ec <_SetupMemoryRegion+0x164>)
  4036fc:	607b      	str	r3, [r7, #4]
		MPU_DEFAULT_SRAM_REGION_2;         //5

	dwRegionAttr = 
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		MPU_CalMPURegionSize(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  4036fe:	483c      	ldr	r0, [pc, #240]	; (4037f0 <_SetupMemoryRegion+0x168>)
  403700:	4b30      	ldr	r3, [pc, #192]	; (4037c4 <_SetupMemoryRegion+0x13c>)
  403702:	4798      	blx	r3
  403704:	4602      	mov	r2, r0
	dwRegionAttr = 
  403706:	4b38      	ldr	r3, [pc, #224]	; (4037e8 <_SetupMemoryRegion+0x160>)
  403708:	4313      	orrs	r3, r2
  40370a:	603b      	str	r3, [r7, #0]
		MPU_REGION_ENABLE;

	MPU_SetRegion( dwRegionBaseAddr, dwRegionAttr);
  40370c:	6839      	ldr	r1, [r7, #0]
  40370e:	6878      	ldr	r0, [r7, #4]
  403710:	4b2e      	ldr	r3, [pc, #184]	; (4037cc <_SetupMemoryRegion+0x144>)
  403712:	4798      	blx	r3
/****************************************************
	Peripheral memory region --- DEVICE Shareable
	START_Addr:-  0x40000000UL
	END_Addr:-    0x5FFFFFFFUL
******************************************************/
	dwRegionBaseAddr = 
  403714:	4b37      	ldr	r3, [pc, #220]	; (4037f4 <_SetupMemoryRegion+0x16c>)
  403716:	607b      	str	r3, [r7, #4]
		MPU_PERIPHERALS_REGION;          //6

	dwRegionAttr = MPU_AP_FULL_ACCESS |
		MPU_REGION_EXECUTE_NEVER |
		SHAREABLE_DEVICE_TYPE |
		MPU_CalMPURegionSize(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  403718:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  40371c:	4b29      	ldr	r3, [pc, #164]	; (4037c4 <_SetupMemoryRegion+0x13c>)
  40371e:	4798      	blx	r3
  403720:	4602      	mov	r2, r0
	dwRegionAttr = MPU_AP_FULL_ACCESS |
  403722:	4b35      	ldr	r3, [pc, #212]	; (4037f8 <_SetupMemoryRegion+0x170>)
  403724:	4313      	orrs	r3, r2
  403726:	603b      	str	r3, [r7, #0]
		|MPU_REGION_ENABLE;

	MPU_SetRegion( dwRegionBaseAddr, dwRegionAttr);
  403728:	6839      	ldr	r1, [r7, #0]
  40372a:	6878      	ldr	r0, [r7, #4]
  40372c:	4b27      	ldr	r3, [pc, #156]	; (4037cc <_SetupMemoryRegion+0x144>)
  40372e:	4798      	blx	r3
/****************************************************
	External EBI memory  memory region --- Strongly Ordered
	START_Addr:-  0x60000000UL
	END_Addr:-    0x6FFFFFFFUL
******************************************************/
	dwRegionBaseAddr =
  403730:	4b32      	ldr	r3, [pc, #200]	; (4037fc <_SetupMemoryRegion+0x174>)
  403732:	607b      	str	r3, [r7, #4]
	dwRegionAttr =
		MPU_AP_FULL_ACCESS |
		/* External memory Must be defined with 'Device' or 'Strongly Ordered'
		attribute for write accesses (AXI) */
		STRONGLY_ORDERED_SHAREABLE_TYPE |
		MPU_CalMPURegionSize(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  403734:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  403738:	4b22      	ldr	r3, [pc, #136]	; (4037c4 <_SetupMemoryRegion+0x13c>)
  40373a:	4798      	blx	r3
  40373c:	4602      	mov	r2, r0
	dwRegionAttr =
  40373e:	4b30      	ldr	r3, [pc, #192]	; (403800 <_SetupMemoryRegion+0x178>)
  403740:	4313      	orrs	r3, r2
  403742:	603b      	str	r3, [r7, #0]
		MPU_REGION_ENABLE;

	MPU_SetRegion( dwRegionBaseAddr, dwRegionAttr);
  403744:	6839      	ldr	r1, [r7, #0]
  403746:	6878      	ldr	r0, [r7, #4]
  403748:	4b20      	ldr	r3, [pc, #128]	; (4037cc <_SetupMemoryRegion+0x144>)
  40374a:	4798      	blx	r3
/****************************************************
	SDRAM Cacheable memory region --- Normal
	START_Addr:-  0x70000000UL
	END_Addr:-    0x7FFFFFFFUL
******************************************************/
	dwRegionBaseAddr = 
  40374c:	4b2d      	ldr	r3, [pc, #180]	; (403804 <_SetupMemoryRegion+0x17c>)
  40374e:	607b      	str	r3, [r7, #4]
		MPU_DEFAULT_SDRAM_REGION;        //7

	dwRegionAttr = 
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_RWA_TYPE( SHAREABLE ) |
		MPU_CalMPURegionSize(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  403750:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  403754:	4b1b      	ldr	r3, [pc, #108]	; (4037c4 <_SetupMemoryRegion+0x13c>)
  403756:	4798      	blx	r3
  403758:	4602      	mov	r2, r0
	dwRegionAttr = 
  40375a:	4b2b      	ldr	r3, [pc, #172]	; (403808 <_SetupMemoryRegion+0x180>)
  40375c:	4313      	orrs	r3, r2
  40375e:	603b      	str	r3, [r7, #0]
		MPU_REGION_ENABLE;

	MPU_SetRegion( dwRegionBaseAddr, dwRegionAttr);
  403760:	6839      	ldr	r1, [r7, #0]
  403762:	6878      	ldr	r0, [r7, #4]
  403764:	4b19      	ldr	r3, [pc, #100]	; (4037cc <_SetupMemoryRegion+0x144>)
  403766:	4798      	blx	r3
/****************************************************
	QSPI memory region --- Strongly ordered
	START_Addr:-  0x80000000UL
	END_Addr:-    0x9FFFFFFFUL
******************************************************/
	dwRegionBaseAddr = 
  403768:	4b28      	ldr	r3, [pc, #160]	; (40380c <_SetupMemoryRegion+0x184>)
  40376a:	607b      	str	r3, [r7, #4]
		MPU_QSPIMEM_REGION;              //8

	dwRegionAttr = 
		MPU_AP_FULL_ACCESS |
		STRONGLY_ORDERED_SHAREABLE_TYPE |
		MPU_CalMPURegionSize(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  40376c:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  403770:	4b14      	ldr	r3, [pc, #80]	; (4037c4 <_SetupMemoryRegion+0x13c>)
  403772:	4798      	blx	r3
  403774:	4602      	mov	r2, r0
	dwRegionAttr = 
  403776:	4b22      	ldr	r3, [pc, #136]	; (403800 <_SetupMemoryRegion+0x178>)
  403778:	4313      	orrs	r3, r2
  40377a:	603b      	str	r3, [r7, #0]
		MPU_REGION_ENABLE;

	MPU_SetRegion( dwRegionBaseAddr, dwRegionAttr);
  40377c:	6839      	ldr	r1, [r7, #0]
  40377e:	6878      	ldr	r0, [r7, #4]
  403780:	4b12      	ldr	r3, [pc, #72]	; (4037cc <_SetupMemoryRegion+0x144>)
  403782:	4798      	blx	r3
/****************************************************
	USB RAM Memory region --- Device
	START_Addr:-  0xA0100000UL
	END_Addr:-    0xA01FFFFFUL
******************************************************/
	dwRegionBaseAddr = 
  403784:	4b22      	ldr	r3, [pc, #136]	; (403810 <_SetupMemoryRegion+0x188>)
  403786:	607b      	str	r3, [r7, #4]

	dwRegionAttr = 
		MPU_AP_FULL_ACCESS |
		MPU_REGION_EXECUTE_NEVER |
		SHAREABLE_DEVICE_TYPE |
		MPU_CalMPURegionSize(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  403788:	4822      	ldr	r0, [pc, #136]	; (403814 <_SetupMemoryRegion+0x18c>)
  40378a:	4b0e      	ldr	r3, [pc, #56]	; (4037c4 <_SetupMemoryRegion+0x13c>)
  40378c:	4798      	blx	r3
  40378e:	4602      	mov	r2, r0
	dwRegionAttr = 
  403790:	4b19      	ldr	r3, [pc, #100]	; (4037f8 <_SetupMemoryRegion+0x170>)
  403792:	4313      	orrs	r3, r2
  403794:	603b      	str	r3, [r7, #0]
		MPU_REGION_ENABLE;

	MPU_SetRegion( dwRegionBaseAddr, dwRegionAttr);
  403796:	6839      	ldr	r1, [r7, #0]
  403798:	6878      	ldr	r0, [r7, #4]
  40379a:	4b0c      	ldr	r3, [pc, #48]	; (4037cc <_SetupMemoryRegion+0x144>)
  40379c:	4798      	blx	r3


	/* Enable the memory management fault , Bus Fault, Usage Fault exception */
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  40379e:	4a1e      	ldr	r2, [pc, #120]	; (403818 <_SetupMemoryRegion+0x190>)
  4037a0:	4b1d      	ldr	r3, [pc, #116]	; (403818 <_SetupMemoryRegion+0x190>)
  4037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4037a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  4037a8:	6253      	str	r3, [r2, #36]	; 0x24
					| SCB_SHCSR_USGFAULTENA_Msk);

	/* Enable the MPU region */
	MPU_Enable( MPU_ENABLE | MPU_PRIVDEFENA);
  4037aa:	2005      	movs	r0, #5
  4037ac:	4b1b      	ldr	r3, [pc, #108]	; (40381c <_SetupMemoryRegion+0x194>)
  4037ae:	4798      	blx	r3
  __ASM volatile ("dsb");
  4037b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4037b4:	f3bf 8f6f 	isb	sy
	
	memory_sync();
}
  4037b8:	bf00      	nop
  4037ba:	3708      	adds	r7, #8
  4037bc:	46bd      	mov	sp, r7
  4037be:	bd80      	pop	{r7, pc}
  4037c0:	003fffff 	.word	0x003fffff
  4037c4:	00403b91 	.word	0x00403b91
  4037c8:	01000001 	.word	0x01000001
  4037cc:	00403b69 	.word	0x00403b69
  4037d0:	00400012 	.word	0x00400012
  4037d4:	001fffff 	.word	0x001fffff
  4037d8:	06230001 	.word	0x06230001
  4037dc:	20000013 	.word	0x20000013
  4037e0:	20400014 	.word	0x20400014
  4037e4:	0003ffff 	.word	0x0003ffff
  4037e8:	03230001 	.word	0x03230001
  4037ec:	20440015 	.word	0x20440015
  4037f0:	0001ffff 	.word	0x0001ffff
  4037f4:	40000016 	.word	0x40000016
  4037f8:	13010001 	.word	0x13010001
  4037fc:	60000017 	.word	0x60000017
  403800:	03000001 	.word	0x03000001
  403804:	70000018 	.word	0x70000018
  403808:	03250001 	.word	0x03250001
  40380c:	80000019 	.word	0x80000019
  403810:	a010001a 	.word	0xa010001a
  403814:	000fffff 	.word	0x000fffff
  403818:	e000ed00 	.word	0xe000ed00
  40381c:	00403b49 	.word	0x00403b49

00403820 <LowLevelInit>:

/**
 * \brief Performs the low-level initialization of the chip.
 */
extern WEAK void LowLevelInit( void )
{
  403820:	b580      	push	{r7, lr}
  403822:	af00      	add	r7, sp, #0
  
	SystemInit(); 
  403824:	4b02      	ldr	r3, [pc, #8]	; (403830 <LowLevelInit+0x10>)
  403826:	4798      	blx	r3
#ifndef MPU_EXAMPLE_FEATURE
	_SetupMemoryRegion();
  403828:	4b02      	ldr	r3, [pc, #8]	; (403834 <LowLevelInit+0x14>)
  40382a:	4798      	blx	r3
	/* copy code_TCM from flash to ITCM */
	while(dst < &_eitcm){
		*dst++ = *src++;
	}
#endif
}
  40382c:	bf00      	nop
  40382e:	bd80      	pop	{r7, pc}
  403830:	00403579 	.word	0x00403579
  403834:	00403689 	.word	0x00403689

00403838 <DBG_Configure>:
 *
 * \param baudrate  Baudrate at which the USART should operate (in Hz).
 * \param masterClock  Frequency of the system master clock (in Hz).
 */
extern void DBG_Configure( uint32_t baudrate, uint32_t masterClock)
{
  403838:	b5b0      	push	{r4, r5, r7, lr}
  40383a:	b08a      	sub	sp, #40	; 0x28
  40383c:	af00      	add	r7, sp, #0
  40383e:	6078      	str	r0, [r7, #4]
  403840:	6039      	str	r1, [r7, #0]

	const Pin pPins[] = CONSOLE_PINS;
  403842:	4b23      	ldr	r3, [pc, #140]	; (4038d0 <DBG_Configure+0x98>)
  403844:	f107 040c 	add.w	r4, r7, #12
  403848:	461d      	mov	r5, r3
  40384a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40384c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40384e:	e895 0003 	ldmia.w	r5, {r0, r1}
  403852:	e884 0003 	stmia.w	r4, {r0, r1}
	// Enable receiver and transmitter
	pUart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
#endif

#if defined CONSOLE_ON_USART
	Usart *pUsart = CONSOLE_Usart;
  403856:	4b1f      	ldr	r3, [pc, #124]	; (4038d4 <DBG_Configure+0x9c>)
  403858:	627b      	str	r3, [r7, #36]	; 0x24
	// Disable the MATRIX registers write protection
	MATRIX->MATRIX_WPMR  = MATRIX_WPMR_WPKEY_PASSWD;
  40385a:	4b1f      	ldr	r3, [pc, #124]	; (4038d8 <DBG_Configure+0xa0>)
  40385c:	4a1f      	ldr	r2, [pc, #124]	; (4038dc <DBG_Configure+0xa4>)
  40385e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  403862:	4a1d      	ldr	r2, [pc, #116]	; (4038d8 <DBG_Configure+0xa0>)
  403864:	4b1c      	ldr	r3, [pc, #112]	; (4038d8 <DBG_Configure+0xa0>)
  403866:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  40386a:	f043 0310 	orr.w	r3, r3, #16
  40386e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  
	PIO_Configure( pPins, PIO_LISTSIZE( pPins ) );
  403872:	f107 030c 	add.w	r3, r7, #12
  403876:	2102      	movs	r1, #2
  403878:	4618      	mov	r0, r3
  40387a:	4b19      	ldr	r3, [pc, #100]	; (4038e0 <DBG_Configure+0xa8>)
  40387c:	4798      	blx	r3
	
	// Reset & disable receiver and transmitter, disable interrupts
	pUsart->US_CR = US_CR_RSTRX | US_CR_RSTTX | US_CR_RSTSTA;
  40387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403880:	f44f 7286 	mov.w	r2, #268	; 0x10c
  403884:	601a      	str	r2, [r3, #0]
	pUsart->US_IDR = 0xFFFFFFFF;
  403886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403888:	f04f 32ff 	mov.w	r2, #4294967295
  40388c:	60da      	str	r2, [r3, #12]
	PMC_EnablePeripheral(CONSOLE_ID);
  40388e:	200e      	movs	r0, #14
  403890:	4b14      	ldr	r3, [pc, #80]	; (4038e4 <DBG_Configure+0xac>)
  403892:	4798      	blx	r3
	pUsart->US_BRGR = (masterClock / baudrate) / 16;
  403894:	683a      	ldr	r2, [r7, #0]
  403896:	687b      	ldr	r3, [r7, #4]
  403898:	fbb2 f3f3 	udiv	r3, r2, r3
  40389c:	091a      	lsrs	r2, r3, #4
  40389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4038a0:	621a      	str	r2, [r3, #32]
   
	// Configure mode register
	pUsart->US_MR 
			= (US_MR_USART_MODE_NORMAL | US_MR_PAR_NO| US_MR_USCLKS_MCK 
  4038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4038a4:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
  4038a8:	605a      	str	r2, [r3, #4]
					| US_MR_CHRL_8_BIT);

	// Enable receiver and transmitter
	pUsart->US_CR = US_CR_RXEN | US_CR_TXEN;
  4038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4038ac:	2250      	movs	r2, #80	; 0x50
  4038ae:	601a      	str	r2, [r3, #0]
#endif
	_ucIsConsoleInitialized = 1;
  4038b0:	4b0d      	ldr	r3, [pc, #52]	; (4038e8 <DBG_Configure+0xb0>)
  4038b2:	2201      	movs	r2, #1
  4038b4:	701a      	strb	r2, [r3, #0]

	/* Disable buffering for printf(). */
#if ( defined (__GNUC__) && !defined (__SAMBA__) )
	setvbuf(stdout, (char *)NULL, _IONBF, 0);
  4038b6:	4b0d      	ldr	r3, [pc, #52]	; (4038ec <DBG_Configure+0xb4>)
  4038b8:	681b      	ldr	r3, [r3, #0]
  4038ba:	6898      	ldr	r0, [r3, #8]
  4038bc:	2300      	movs	r3, #0
  4038be:	2202      	movs	r2, #2
  4038c0:	2100      	movs	r1, #0
  4038c2:	4c0b      	ldr	r4, [pc, #44]	; (4038f0 <DBG_Configure+0xb8>)
  4038c4:	47a0      	blx	r4
#endif
}
  4038c6:	bf00      	nop
  4038c8:	3728      	adds	r7, #40	; 0x28
  4038ca:	46bd      	mov	sp, r7
  4038cc:	bdb0      	pop	{r4, r5, r7, pc}
  4038ce:	bf00      	nop
  4038d0:	0040a800 	.word	0x0040a800
  4038d4:	40028000 	.word	0x40028000
  4038d8:	40088000 	.word	0x40088000
  4038dc:	4d415400 	.word	0x4d415400
  4038e0:	00403e4d 	.word	0x00403e4d
  4038e4:	00404019 	.word	0x00404019
  4038e8:	2040c545 	.word	0x2040c545
  4038ec:	2040000c 	.word	0x2040000c
  4038f0:	00404da1 	.word	0x00404da1

004038f4 <DBG_PutChar>:
 *
 * \note This function is synchronous (i.e. uses polling).
 * \param c  Character to send.
 */
extern void DBG_PutChar( uint8_t c )
{
  4038f4:	b580      	push	{r7, lr}
  4038f6:	b084      	sub	sp, #16
  4038f8:	af00      	add	r7, sp, #0
  4038fa:	4603      	mov	r3, r0
  4038fc:	71fb      	strb	r3, [r7, #7]
	// Wait for the transfer to complete
	while ((pUart->UART_SR & UART_SR_TXEMPTY) == 0);
#endif

#if defined CONSOLE_ON_USART
	Usart *pUsart=CONSOLE_Usart;
  4038fe:	4b10      	ldr	r3, [pc, #64]	; (403940 <DBG_PutChar+0x4c>)
  403900:	60fb      	str	r3, [r7, #12]
	if ( !_ucIsConsoleInitialized )
  403902:	4b10      	ldr	r3, [pc, #64]	; (403944 <DBG_PutChar+0x50>)
  403904:	781b      	ldrb	r3, [r3, #0]
  403906:	2b00      	cmp	r3, #0
  403908:	d104      	bne.n	403914 <DBG_PutChar+0x20>
	{
		DBG_Configure(CONSOLE_BAUDRATE, BOARD_MCK);
  40390a:	490f      	ldr	r1, [pc, #60]	; (403948 <DBG_PutChar+0x54>)
  40390c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  403910:	4b0e      	ldr	r3, [pc, #56]	; (40394c <DBG_PutChar+0x58>)
  403912:	4798      	blx	r3
	}
	// Wait for the transmitter to be ready
	while ((pUsart->US_CSR & US_CSR_TXEMPTY) == 0);
  403914:	bf00      	nop
  403916:	68fb      	ldr	r3, [r7, #12]
  403918:	695b      	ldr	r3, [r3, #20]
  40391a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40391e:	2b00      	cmp	r3, #0
  403920:	d0f9      	beq.n	403916 <DBG_PutChar+0x22>

	// Send character
	pUsart->US_THR = c;
  403922:	79fa      	ldrb	r2, [r7, #7]
  403924:	68fb      	ldr	r3, [r7, #12]
  403926:	61da      	str	r2, [r3, #28]

	// Wait for the transfer to complete
	while ((pUsart->US_CSR & US_CSR_TXEMPTY) == 0);
  403928:	bf00      	nop
  40392a:	68fb      	ldr	r3, [r7, #12]
  40392c:	695b      	ldr	r3, [r3, #20]
  40392e:	f403 7300 	and.w	r3, r3, #512	; 0x200
  403932:	2b00      	cmp	r3, #0
  403934:	d0f9      	beq.n	40392a <DBG_PutChar+0x36>
#endif
}
  403936:	bf00      	nop
  403938:	3710      	adds	r7, #16
  40393a:	46bd      	mov	sp, r7
  40393c:	bd80      	pop	{r7, pc}
  40393e:	bf00      	nop
  403940:	40028000 	.word	0x40028000
  403944:	2040c545 	.word	0x2040c545
  403948:	08f0d180 	.word	0x08f0d180
  40394c:	00403839 	.word	0x00403839

00403950 <LED_Configure>:
 *  not exist on the board, the function does nothing.
 *  \param led  Number of the LED to configure.
 *  \return 1 if the LED exists and has been configured; otherwise 0.
 */
extern uint32_t LED_Configure( uint32_t dwLed )
{
  403950:	b580      	push	{r7, lr}
  403952:	b082      	sub	sp, #8
  403954:	af00      	add	r7, sp, #0
  403956:	6078      	str	r0, [r7, #4]
#ifdef PINS_LEDS
	// Check that LED exists
	if ( dwLed >= numLeds) {
  403958:	2202      	movs	r2, #2
  40395a:	687b      	ldr	r3, [r7, #4]
  40395c:	4293      	cmp	r3, r2
  40395e:	d301      	bcc.n	403964 <LED_Configure+0x14>
		return 0;
  403960:	2300      	movs	r3, #0
  403962:	e00b      	b.n	40397c <LED_Configure+0x2c>
	}

	// Configure LED
	return ( PIO_Configure( &pinsLeds[dwLed], 1 ) );
  403964:	687a      	ldr	r2, [r7, #4]
  403966:	4613      	mov	r3, r2
  403968:	005b      	lsls	r3, r3, #1
  40396a:	4413      	add	r3, r2
  40396c:	009b      	lsls	r3, r3, #2
  40396e:	4a05      	ldr	r2, [pc, #20]	; (403984 <LED_Configure+0x34>)
  403970:	4413      	add	r3, r2
  403972:	2101      	movs	r1, #1
  403974:	4618      	mov	r0, r3
  403976:	4b04      	ldr	r3, [pc, #16]	; (403988 <LED_Configure+0x38>)
  403978:	4798      	blx	r3
  40397a:	4603      	mov	r3, r0
#else
	return 0;
#endif
}
  40397c:	4618      	mov	r0, r3
  40397e:	3708      	adds	r7, #8
  403980:	46bd      	mov	sp, r7
  403982:	bd80      	pop	{r7, pc}
  403984:	0040a8f8 	.word	0x0040a8f8
  403988:	00403e4d 	.word	0x00403e4d

0040398c <LED_Toggle>:
 *
 *  \param led  Number of the LED to toggle.
 *  \return 1 if the LED has been toggled; otherwise 0.
 */
extern uint32_t LED_Toggle( uint32_t dwLed )
{
  40398c:	b580      	push	{r7, lr}
  40398e:	b082      	sub	sp, #8
  403990:	af00      	add	r7, sp, #0
  403992:	6078      	str	r0, [r7, #4]
#ifdef PINS_LEDS
	/* Check if LED exists */
	if ( dwLed >= numLeds ) {
  403994:	2202      	movs	r2, #2
  403996:	687b      	ldr	r3, [r7, #4]
  403998:	4293      	cmp	r3, r2
  40399a:	d301      	bcc.n	4039a0 <LED_Toggle+0x14>
		return 0;
  40399c:	2300      	movs	r3, #0
  40399e:	e022      	b.n	4039e6 <LED_Toggle+0x5a>
	}

	/* Toggle LED */
	if ( PIO_GetOutputDataStatus( &pinsLeds[dwLed] ) ) {
  4039a0:	687a      	ldr	r2, [r7, #4]
  4039a2:	4613      	mov	r3, r2
  4039a4:	005b      	lsls	r3, r3, #1
  4039a6:	4413      	add	r3, r2
  4039a8:	009b      	lsls	r3, r3, #2
  4039aa:	4a11      	ldr	r2, [pc, #68]	; (4039f0 <LED_Toggle+0x64>)
  4039ac:	4413      	add	r3, r2
  4039ae:	4618      	mov	r0, r3
  4039b0:	4b10      	ldr	r3, [pc, #64]	; (4039f4 <LED_Toggle+0x68>)
  4039b2:	4798      	blx	r3
  4039b4:	4603      	mov	r3, r0
  4039b6:	2b00      	cmp	r3, #0
  4039b8:	d00a      	beq.n	4039d0 <LED_Toggle+0x44>
		PIO_Clear( &pinsLeds[dwLed] );
  4039ba:	687a      	ldr	r2, [r7, #4]
  4039bc:	4613      	mov	r3, r2
  4039be:	005b      	lsls	r3, r3, #1
  4039c0:	4413      	add	r3, r2
  4039c2:	009b      	lsls	r3, r3, #2
  4039c4:	4a0a      	ldr	r2, [pc, #40]	; (4039f0 <LED_Toggle+0x64>)
  4039c6:	4413      	add	r3, r2
  4039c8:	4618      	mov	r0, r3
  4039ca:	4b0b      	ldr	r3, [pc, #44]	; (4039f8 <LED_Toggle+0x6c>)
  4039cc:	4798      	blx	r3
  4039ce:	e009      	b.n	4039e4 <LED_Toggle+0x58>
	} else {
		PIO_Set( &pinsLeds[dwLed] );
  4039d0:	687a      	ldr	r2, [r7, #4]
  4039d2:	4613      	mov	r3, r2
  4039d4:	005b      	lsls	r3, r3, #1
  4039d6:	4413      	add	r3, r2
  4039d8:	009b      	lsls	r3, r3, #2
  4039da:	4a05      	ldr	r2, [pc, #20]	; (4039f0 <LED_Toggle+0x64>)
  4039dc:	4413      	add	r3, r2
  4039de:	4618      	mov	r0, r3
  4039e0:	4b06      	ldr	r3, [pc, #24]	; (4039fc <LED_Toggle+0x70>)
  4039e2:	4798      	blx	r3
	}

	return 1;
  4039e4:	2301      	movs	r3, #1
#else
	return 0;
#endif
}
  4039e6:	4618      	mov	r0, r3
  4039e8:	3708      	adds	r7, #8
  4039ea:	46bd      	mov	sp, r7
  4039ec:	bd80      	pop	{r7, pc}
  4039ee:	bf00      	nop
  4039f0:	0040a8f8 	.word	0x0040a8f8
  4039f4:	00403fed 	.word	0x00403fed
  4039f8:	00403fcf 	.word	0x00403fcf
  4039fc:	00403fb1 	.word	0x00403fb1

00403a00 <_sbrk>:
extern void _exit( int status );
extern void _kill( int pid, int sig );
extern int _getpid ( void );

extern caddr_t _sbrk ( int incr )
{
  403a00:	b480      	push	{r7}
  403a02:	b085      	sub	sp, #20
  403a04:	af00      	add	r7, sp, #0
  403a06:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_sheap;

	if ( heap == NULL ) {
  403a08:	4b0b      	ldr	r3, [pc, #44]	; (403a38 <_sbrk+0x38>)
  403a0a:	681b      	ldr	r3, [r3, #0]
  403a0c:	2b00      	cmp	r3, #0
  403a0e:	d102      	bne.n	403a16 <_sbrk+0x16>
		heap = (unsigned char *)&_sheap;
  403a10:	4b09      	ldr	r3, [pc, #36]	; (403a38 <_sbrk+0x38>)
  403a12:	4a0a      	ldr	r2, [pc, #40]	; (403a3c <_sbrk+0x3c>)
  403a14:	601a      	str	r2, [r3, #0]
	}
	prev_sheap = heap;
  403a16:	4b08      	ldr	r3, [pc, #32]	; (403a38 <_sbrk+0x38>)
  403a18:	681b      	ldr	r3, [r3, #0]
  403a1a:	60fb      	str	r3, [r7, #12]

	heap += incr;
  403a1c:	4b06      	ldr	r3, [pc, #24]	; (403a38 <_sbrk+0x38>)
  403a1e:	681a      	ldr	r2, [r3, #0]
  403a20:	687b      	ldr	r3, [r7, #4]
  403a22:	4413      	add	r3, r2
  403a24:	4a04      	ldr	r2, [pc, #16]	; (403a38 <_sbrk+0x38>)
  403a26:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_sheap;
  403a28:	68fb      	ldr	r3, [r7, #12]
}
  403a2a:	4618      	mov	r0, r3
  403a2c:	3714      	adds	r7, #20
  403a2e:	46bd      	mov	sp, r7
  403a30:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a34:	4770      	bx	lr
  403a36:	bf00      	nop
  403a38:	2040c550 	.word	0x2040c550
  403a3c:	2040e5f0 	.word	0x2040e5f0

00403a40 <_close>:
	( void ) new;
	return -1;
}

extern int _close( int file )
{
  403a40:	b480      	push	{r7}
  403a42:	b083      	sub	sp, #12
  403a44:	af00      	add	r7, sp, #0
  403a46:	6078      	str	r0, [r7, #4]
	( void ) file;
	return -1;
  403a48:	f04f 33ff 	mov.w	r3, #4294967295
}
  403a4c:	4618      	mov	r0, r3
  403a4e:	370c      	adds	r7, #12
  403a50:	46bd      	mov	sp, r7
  403a52:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a56:	4770      	bx	lr

00403a58 <_fstat>:

extern int _fstat( int file, struct stat *st )
{
  403a58:	b480      	push	{r7}
  403a5a:	b083      	sub	sp, #12
  403a5c:	af00      	add	r7, sp, #0
  403a5e:	6078      	str	r0, [r7, #4]
  403a60:	6039      	str	r1, [r7, #0]
	( void ) file;
	st->st_mode = S_IFCHR;
  403a62:	683b      	ldr	r3, [r7, #0]
  403a64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  403a68:	605a      	str	r2, [r3, #4]

	return 0;
  403a6a:	2300      	movs	r3, #0
}
  403a6c:	4618      	mov	r0, r3
  403a6e:	370c      	adds	r7, #12
  403a70:	46bd      	mov	sp, r7
  403a72:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a76:	4770      	bx	lr

00403a78 <_isatty>:

extern int _isatty( int file )
{
  403a78:	b480      	push	{r7}
  403a7a:	b083      	sub	sp, #12
  403a7c:	af00      	add	r7, sp, #0
  403a7e:	6078      	str	r0, [r7, #4]
	( void ) file;
	return 1;
  403a80:	2301      	movs	r3, #1
}
  403a82:	4618      	mov	r0, r3
  403a84:	370c      	adds	r7, #12
  403a86:	46bd      	mov	sp, r7
  403a88:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a8c:	4770      	bx	lr

00403a8e <_lseek>:

extern int _lseek( int file, int ptr, int dir )
{
  403a8e:	b480      	push	{r7}
  403a90:	b085      	sub	sp, #20
  403a92:	af00      	add	r7, sp, #0
  403a94:	60f8      	str	r0, [r7, #12]
  403a96:	60b9      	str	r1, [r7, #8]
  403a98:	607a      	str	r2, [r7, #4]
	( void ) file;
	( void ) ptr;
	( void ) dir;
	return 0;
  403a9a:	2300      	movs	r3, #0
}
  403a9c:	4618      	mov	r0, r3
  403a9e:	3714      	adds	r7, #20
  403aa0:	46bd      	mov	sp, r7
  403aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403aa6:	4770      	bx	lr

00403aa8 <_read>:

extern int _read(int file, char *ptr, int len)
{
  403aa8:	b480      	push	{r7}
  403aaa:	b085      	sub	sp, #20
  403aac:	af00      	add	r7, sp, #0
  403aae:	60f8      	str	r0, [r7, #12]
  403ab0:	60b9      	str	r1, [r7, #8]
  403ab2:	607a      	str	r2, [r7, #4]
	( void ) file;
	( void ) ptr;
	( void ) len;
	return 0;
  403ab4:	2300      	movs	r3, #0
}
  403ab6:	4618      	mov	r0, r3
  403ab8:	3714      	adds	r7, #20
  403aba:	46bd      	mov	sp, r7
  403abc:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ac0:	4770      	bx	lr
	...

00403ac4 <_write>:

extern int _write( int file, char *ptr, int len )
{
  403ac4:	b580      	push	{r7, lr}
  403ac6:	b086      	sub	sp, #24
  403ac8:	af00      	add	r7, sp, #0
  403aca:	60f8      	str	r0, [r7, #12]
  403acc:	60b9      	str	r1, [r7, #8]
  403ace:	607a      	str	r2, [r7, #4]
	int iIndex;

	( void ) file;

	//    for (; *ptr != 0; ptr++ )
	for ( iIndex=0; iIndex < len; iIndex++, ptr++ ) {
  403ad0:	2300      	movs	r3, #0
  403ad2:	617b      	str	r3, [r7, #20]
  403ad4:	e00a      	b.n	403aec <_write+0x28>
		DBG_PutChar( *ptr );
  403ad6:	68bb      	ldr	r3, [r7, #8]
  403ad8:	781b      	ldrb	r3, [r3, #0]
  403ada:	4618      	mov	r0, r3
  403adc:	4b08      	ldr	r3, [pc, #32]	; (403b00 <_write+0x3c>)
  403ade:	4798      	blx	r3
	for ( iIndex=0; iIndex < len; iIndex++, ptr++ ) {
  403ae0:	697b      	ldr	r3, [r7, #20]
  403ae2:	3301      	adds	r3, #1
  403ae4:	617b      	str	r3, [r7, #20]
  403ae6:	68bb      	ldr	r3, [r7, #8]
  403ae8:	3301      	adds	r3, #1
  403aea:	60bb      	str	r3, [r7, #8]
  403aec:	697a      	ldr	r2, [r7, #20]
  403aee:	687b      	ldr	r3, [r7, #4]
  403af0:	429a      	cmp	r2, r3
  403af2:	dbf0      	blt.n	403ad6 <_write+0x12>
	}

	return iIndex;
  403af4:	697b      	ldr	r3, [r7, #20]
}
  403af6:	4618      	mov	r0, r3
  403af8:	3718      	adds	r7, #24
  403afa:	46bd      	mov	sp, r7
  403afc:	bd80      	pop	{r7, pc}
  403afe:	bf00      	nop
  403b00:	004038f5 	.word	0x004038f5

00403b04 <_exit>:

extern void _exit( int status )
{
  403b04:	b580      	push	{r7, lr}
  403b06:	b082      	sub	sp, #8
  403b08:	af00      	add	r7, sp, #0
  403b0a:	6078      	str	r0, [r7, #4]
	printf( "Exiting with status %d.\n", status );
  403b0c:	6879      	ldr	r1, [r7, #4]
  403b0e:	4802      	ldr	r0, [pc, #8]	; (403b18 <_exit+0x14>)
  403b10:	4b02      	ldr	r3, [pc, #8]	; (403b1c <_exit+0x18>)
  403b12:	4798      	blx	r3
	for (;;);
  403b14:	e7fe      	b.n	403b14 <_exit+0x10>
  403b16:	bf00      	nop
  403b18:	0040a914 	.word	0x0040a914
  403b1c:	00404d79 	.word	0x00404d79

00403b20 <_kill>:
}

extern void _kill( int pid, int sig )
{
  403b20:	b480      	push	{r7}
  403b22:	b083      	sub	sp, #12
  403b24:	af00      	add	r7, sp, #0
  403b26:	6078      	str	r0, [r7, #4]
  403b28:	6039      	str	r1, [r7, #0]
	( void ) pid;
	( void ) sig;
	return;
  403b2a:	bf00      	nop
}
  403b2c:	370c      	adds	r7, #12
  403b2e:	46bd      	mov	sp, r7
  403b30:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b34:	4770      	bx	lr

00403b36 <_getpid>:

extern int _getpid ( void )
{
  403b36:	b480      	push	{r7}
  403b38:	af00      	add	r7, sp, #0
	return -1;
  403b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
  403b3e:	4618      	mov	r0, r3
  403b40:	46bd      	mov	sp, r7
  403b42:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b46:	4770      	bx	lr

00403b48 <MPU_Enable>:
 * \brief Enables the MPU module.
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void MPU_Enable( uint32_t dwMPUEnable )
{
  403b48:	b480      	push	{r7}
  403b4a:	b083      	sub	sp, #12
  403b4c:	af00      	add	r7, sp, #0
  403b4e:	6078      	str	r0, [r7, #4]
	MPU->CTRL = dwMPUEnable ;
  403b50:	4a04      	ldr	r2, [pc, #16]	; (403b64 <MPU_Enable+0x1c>)
  403b52:	687b      	ldr	r3, [r7, #4]
  403b54:	6053      	str	r3, [r2, #4]
}
  403b56:	bf00      	nop
  403b58:	370c      	adds	r7, #12
  403b5a:	46bd      	mov	sp, r7
  403b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b60:	4770      	bx	lr
  403b62:	bf00      	nop
  403b64:	e000ed90 	.word	0xe000ed90

00403b68 <MPU_SetRegion>:
 *
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.  
 */
void MPU_SetRegion( uint32_t dwRegionBaseAddr, uint32_t dwRegionAttr )
{
  403b68:	b480      	push	{r7}
  403b6a:	b083      	sub	sp, #12
  403b6c:	af00      	add	r7, sp, #0
  403b6e:	6078      	str	r0, [r7, #4]
  403b70:	6039      	str	r1, [r7, #0]
	MPU->RBAR = dwRegionBaseAddr;
  403b72:	4a06      	ldr	r2, [pc, #24]	; (403b8c <MPU_SetRegion+0x24>)
  403b74:	687b      	ldr	r3, [r7, #4]
  403b76:	60d3      	str	r3, [r2, #12]
	MPU->RASR = dwRegionAttr;
  403b78:	4a04      	ldr	r2, [pc, #16]	; (403b8c <MPU_SetRegion+0x24>)
  403b7a:	683b      	ldr	r3, [r7, #0]
  403b7c:	6113      	str	r3, [r2, #16]
}
  403b7e:	bf00      	nop
  403b80:	370c      	adds	r7, #12
  403b82:	46bd      	mov	sp, r7
  403b84:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b88:	4770      	bx	lr
  403b8a:	bf00      	nop
  403b8c:	e000ed90 	.word	0xe000ed90

00403b90 <MPU_CalMPURegionSize>:

/**
 * \brief Calculate region size for the RASR.
 */
uint32_t MPU_CalMPURegionSize( uint32_t dwActualSizeInBytes )
{
  403b90:	b480      	push	{r7}
  403b92:	b085      	sub	sp, #20
  403b94:	af00      	add	r7, sp, #0
  403b96:	6078      	str	r0, [r7, #4]
	uint32_t dwRegionSize = 32;
  403b98:	2320      	movs	r3, #32
  403b9a:	60fb      	str	r3, [r7, #12]
	uint32_t dwReturnValue = 4;
  403b9c:	2304      	movs	r3, #4
  403b9e:	60bb      	str	r3, [r7, #8]

	while( dwReturnValue < 31 ) {
  403ba0:	e009      	b.n	403bb6 <MPU_CalMPURegionSize+0x26>
		if( dwActualSizeInBytes <= dwRegionSize ) {
  403ba2:	687a      	ldr	r2, [r7, #4]
  403ba4:	68fb      	ldr	r3, [r7, #12]
  403ba6:	429a      	cmp	r2, r3
  403ba8:	d909      	bls.n	403bbe <MPU_CalMPURegionSize+0x2e>
			break;
		} else {
			dwReturnValue++;
  403baa:	68bb      	ldr	r3, [r7, #8]
  403bac:	3301      	adds	r3, #1
  403bae:	60bb      	str	r3, [r7, #8]
		}
		dwRegionSize <<= 1;
  403bb0:	68fb      	ldr	r3, [r7, #12]
  403bb2:	005b      	lsls	r3, r3, #1
  403bb4:	60fb      	str	r3, [r7, #12]
	while( dwReturnValue < 31 ) {
  403bb6:	68bb      	ldr	r3, [r7, #8]
  403bb8:	2b1e      	cmp	r3, #30
  403bba:	d9f2      	bls.n	403ba2 <MPU_CalMPURegionSize+0x12>
  403bbc:	e000      	b.n	403bc0 <MPU_CalMPURegionSize+0x30>
			break;
  403bbe:	bf00      	nop
	}

	return ( dwReturnValue << 1 );
  403bc0:	68bb      	ldr	r3, [r7, #8]
  403bc2:	005b      	lsls	r3, r3, #1
}
  403bc4:	4618      	mov	r0, r3
  403bc6:	3714      	adds	r7, #20
  403bc8:	46bd      	mov	sp, r7
  403bca:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bce:	4770      	bx	lr

00403bd0 <PIO_SetPeripheralA>:
 */
static void PIO_SetPeripheralA(
		Pio *pio,
		unsigned int mask,
		unsigned char enablePullUp)
{
  403bd0:	b480      	push	{r7}
  403bd2:	b087      	sub	sp, #28
  403bd4:	af00      	add	r7, sp, #0
  403bd6:	60f8      	str	r0, [r7, #12]
  403bd8:	60b9      	str	r1, [r7, #8]
  403bda:	4613      	mov	r3, r2
  403bdc:	71fb      	strb	r3, [r7, #7]
	unsigned int abcdsr;
	/* Disable interrupts on the pin(s) */
	pio->PIO_IDR = mask;
  403bde:	68fb      	ldr	r3, [r7, #12]
  403be0:	68ba      	ldr	r2, [r7, #8]
  403be2:	645a      	str	r2, [r3, #68]	; 0x44

	/* Enable the pull-up(s) if necessary */
	if (enablePullUp) {
  403be4:	79fb      	ldrb	r3, [r7, #7]
  403be6:	2b00      	cmp	r3, #0
  403be8:	d003      	beq.n	403bf2 <PIO_SetPeripheralA+0x22>
		pio->PIO_PUER = mask;
  403bea:	68fb      	ldr	r3, [r7, #12]
  403bec:	68ba      	ldr	r2, [r7, #8]
  403bee:	665a      	str	r2, [r3, #100]	; 0x64
  403bf0:	e002      	b.n	403bf8 <PIO_SetPeripheralA+0x28>
	} else {
		pio->PIO_PUDR = mask;
  403bf2:	68fb      	ldr	r3, [r7, #12]
  403bf4:	68ba      	ldr	r2, [r7, #8]
  403bf6:	661a      	str	r2, [r3, #96]	; 0x60
	}

	abcdsr = pio->PIO_ABCDSR[0];
  403bf8:	68fb      	ldr	r3, [r7, #12]
  403bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403bfc:	617b      	str	r3, [r7, #20]
	pio->PIO_ABCDSR[0] &= (~mask & abcdsr);
  403bfe:	68fb      	ldr	r3, [r7, #12]
  403c00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403c02:	68bb      	ldr	r3, [r7, #8]
  403c04:	43d9      	mvns	r1, r3
  403c06:	697b      	ldr	r3, [r7, #20]
  403c08:	400b      	ands	r3, r1
  403c0a:	401a      	ands	r2, r3
  403c0c:	68fb      	ldr	r3, [r7, #12]
  403c0e:	671a      	str	r2, [r3, #112]	; 0x70
	abcdsr = pio->PIO_ABCDSR[1];
  403c10:	68fb      	ldr	r3, [r7, #12]
  403c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403c14:	617b      	str	r3, [r7, #20]
	pio->PIO_ABCDSR[1] &= (~mask & abcdsr);
  403c16:	68fb      	ldr	r3, [r7, #12]
  403c18:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403c1a:	68bb      	ldr	r3, [r7, #8]
  403c1c:	43d9      	mvns	r1, r3
  403c1e:	697b      	ldr	r3, [r7, #20]
  403c20:	400b      	ands	r3, r1
  403c22:	401a      	ands	r2, r3
  403c24:	68fb      	ldr	r3, [r7, #12]
  403c26:	675a      	str	r2, [r3, #116]	; 0x74
	pio->PIO_PDR = mask;
  403c28:	68fb      	ldr	r3, [r7, #12]
  403c2a:	68ba      	ldr	r2, [r7, #8]
  403c2c:	605a      	str	r2, [r3, #4]
}
  403c2e:	bf00      	nop
  403c30:	371c      	adds	r7, #28
  403c32:	46bd      	mov	sp, r7
  403c34:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c38:	4770      	bx	lr

00403c3a <PIO_SetPeripheralB>:
 */
static void PIO_SetPeripheralB(
		Pio *pio,
		unsigned int mask,
		unsigned char enablePullUp)
{
  403c3a:	b480      	push	{r7}
  403c3c:	b087      	sub	sp, #28
  403c3e:	af00      	add	r7, sp, #0
  403c40:	60f8      	str	r0, [r7, #12]
  403c42:	60b9      	str	r1, [r7, #8]
  403c44:	4613      	mov	r3, r2
  403c46:	71fb      	strb	r3, [r7, #7]
	unsigned int abcdsr;
	/* Disable interrupts on the pin(s) */
	pio->PIO_IDR = mask;
  403c48:	68fb      	ldr	r3, [r7, #12]
  403c4a:	68ba      	ldr	r2, [r7, #8]
  403c4c:	645a      	str	r2, [r3, #68]	; 0x44

	/* Enable the pull-up(s) if necessary */
	if (enablePullUp) {
  403c4e:	79fb      	ldrb	r3, [r7, #7]
  403c50:	2b00      	cmp	r3, #0
  403c52:	d003      	beq.n	403c5c <PIO_SetPeripheralB+0x22>
		pio->PIO_PUER = mask;
  403c54:	68fb      	ldr	r3, [r7, #12]
  403c56:	68ba      	ldr	r2, [r7, #8]
  403c58:	665a      	str	r2, [r3, #100]	; 0x64
  403c5a:	e002      	b.n	403c62 <PIO_SetPeripheralB+0x28>
	} else {
		pio->PIO_PUDR = mask;
  403c5c:	68fb      	ldr	r3, [r7, #12]
  403c5e:	68ba      	ldr	r2, [r7, #8]
  403c60:	661a      	str	r2, [r3, #96]	; 0x60
	}

	abcdsr = pio->PIO_ABCDSR[0];
  403c62:	68fb      	ldr	r3, [r7, #12]
  403c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403c66:	617b      	str	r3, [r7, #20]
	pio->PIO_ABCDSR[0] = (mask | abcdsr);
  403c68:	68ba      	ldr	r2, [r7, #8]
  403c6a:	697b      	ldr	r3, [r7, #20]
  403c6c:	431a      	orrs	r2, r3
  403c6e:	68fb      	ldr	r3, [r7, #12]
  403c70:	671a      	str	r2, [r3, #112]	; 0x70
	abcdsr = pio->PIO_ABCDSR[1];
  403c72:	68fb      	ldr	r3, [r7, #12]
  403c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403c76:	617b      	str	r3, [r7, #20]
	pio->PIO_ABCDSR[1] &= (~mask & abcdsr);
  403c78:	68fb      	ldr	r3, [r7, #12]
  403c7a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403c7c:	68bb      	ldr	r3, [r7, #8]
  403c7e:	43d9      	mvns	r1, r3
  403c80:	697b      	ldr	r3, [r7, #20]
  403c82:	400b      	ands	r3, r1
  403c84:	401a      	ands	r2, r3
  403c86:	68fb      	ldr	r3, [r7, #12]
  403c88:	675a      	str	r2, [r3, #116]	; 0x74

	pio->PIO_PDR = mask;
  403c8a:	68fb      	ldr	r3, [r7, #12]
  403c8c:	68ba      	ldr	r2, [r7, #8]
  403c8e:	605a      	str	r2, [r3, #4]
}
  403c90:	bf00      	nop
  403c92:	371c      	adds	r7, #28
  403c94:	46bd      	mov	sp, r7
  403c96:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c9a:	4770      	bx	lr

00403c9c <PIO_SetPeripheralC>:
 */
static void PIO_SetPeripheralC(
		Pio *pio,
		unsigned int mask,
		unsigned char enablePullUp)
{
  403c9c:	b480      	push	{r7}
  403c9e:	b087      	sub	sp, #28
  403ca0:	af00      	add	r7, sp, #0
  403ca2:	60f8      	str	r0, [r7, #12]
  403ca4:	60b9      	str	r1, [r7, #8]
  403ca6:	4613      	mov	r3, r2
  403ca8:	71fb      	strb	r3, [r7, #7]
	unsigned int abcdsr;
	/* Disable interrupts on the pin(s) */
	pio->PIO_IDR = mask;
  403caa:	68fb      	ldr	r3, [r7, #12]
  403cac:	68ba      	ldr	r2, [r7, #8]
  403cae:	645a      	str	r2, [r3, #68]	; 0x44

	/* Enable the pull-up(s) if necessary */
	if (enablePullUp) {
  403cb0:	79fb      	ldrb	r3, [r7, #7]
  403cb2:	2b00      	cmp	r3, #0
  403cb4:	d003      	beq.n	403cbe <PIO_SetPeripheralC+0x22>
		pio->PIO_PUER = mask;
  403cb6:	68fb      	ldr	r3, [r7, #12]
  403cb8:	68ba      	ldr	r2, [r7, #8]
  403cba:	665a      	str	r2, [r3, #100]	; 0x64
  403cbc:	e002      	b.n	403cc4 <PIO_SetPeripheralC+0x28>
	} else {
		pio->PIO_PUDR = mask;
  403cbe:	68fb      	ldr	r3, [r7, #12]
  403cc0:	68ba      	ldr	r2, [r7, #8]
  403cc2:	661a      	str	r2, [r3, #96]	; 0x60
	}

	abcdsr = pio->PIO_ABCDSR[0];
  403cc4:	68fb      	ldr	r3, [r7, #12]
  403cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403cc8:	617b      	str	r3, [r7, #20]
	pio->PIO_ABCDSR[0] &= (~mask & abcdsr);
  403cca:	68fb      	ldr	r3, [r7, #12]
  403ccc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403cce:	68bb      	ldr	r3, [r7, #8]
  403cd0:	43d9      	mvns	r1, r3
  403cd2:	697b      	ldr	r3, [r7, #20]
  403cd4:	400b      	ands	r3, r1
  403cd6:	401a      	ands	r2, r3
  403cd8:	68fb      	ldr	r3, [r7, #12]
  403cda:	671a      	str	r2, [r3, #112]	; 0x70
	abcdsr = pio->PIO_ABCDSR[1];
  403cdc:	68fb      	ldr	r3, [r7, #12]
  403cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403ce0:	617b      	str	r3, [r7, #20]
	pio->PIO_ABCDSR[1] = (mask | abcdsr);
  403ce2:	68ba      	ldr	r2, [r7, #8]
  403ce4:	697b      	ldr	r3, [r7, #20]
  403ce6:	431a      	orrs	r2, r3
  403ce8:	68fb      	ldr	r3, [r7, #12]
  403cea:	675a      	str	r2, [r3, #116]	; 0x74

	pio->PIO_PDR = mask;
  403cec:	68fb      	ldr	r3, [r7, #12]
  403cee:	68ba      	ldr	r2, [r7, #8]
  403cf0:	605a      	str	r2, [r3, #4]
}
  403cf2:	bf00      	nop
  403cf4:	371c      	adds	r7, #28
  403cf6:	46bd      	mov	sp, r7
  403cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cfc:	4770      	bx	lr

00403cfe <PIO_SetPeripheralD>:
 */
static void PIO_SetPeripheralD(
		Pio *pio,
		unsigned int mask,
		unsigned char enablePullUp)
{
  403cfe:	b480      	push	{r7}
  403d00:	b087      	sub	sp, #28
  403d02:	af00      	add	r7, sp, #0
  403d04:	60f8      	str	r0, [r7, #12]
  403d06:	60b9      	str	r1, [r7, #8]
  403d08:	4613      	mov	r3, r2
  403d0a:	71fb      	strb	r3, [r7, #7]
	unsigned int abcdsr;
	/* Disable interrupts on the pin(s) */
	pio->PIO_IDR = mask;
  403d0c:	68fb      	ldr	r3, [r7, #12]
  403d0e:	68ba      	ldr	r2, [r7, #8]
  403d10:	645a      	str	r2, [r3, #68]	; 0x44

	/* Enable the pull-up(s) if necessary */
	if (enablePullUp) {
  403d12:	79fb      	ldrb	r3, [r7, #7]
  403d14:	2b00      	cmp	r3, #0
  403d16:	d003      	beq.n	403d20 <PIO_SetPeripheralD+0x22>
		pio->PIO_PUER = mask;
  403d18:	68fb      	ldr	r3, [r7, #12]
  403d1a:	68ba      	ldr	r2, [r7, #8]
  403d1c:	665a      	str	r2, [r3, #100]	; 0x64
  403d1e:	e002      	b.n	403d26 <PIO_SetPeripheralD+0x28>
	} else {
		pio->PIO_PUDR = mask;
  403d20:	68fb      	ldr	r3, [r7, #12]
  403d22:	68ba      	ldr	r2, [r7, #8]
  403d24:	661a      	str	r2, [r3, #96]	; 0x60
	}

	abcdsr = pio->PIO_ABCDSR[0];
  403d26:	68fb      	ldr	r3, [r7, #12]
  403d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403d2a:	617b      	str	r3, [r7, #20]
	pio->PIO_ABCDSR[0] = (mask | abcdsr);
  403d2c:	68ba      	ldr	r2, [r7, #8]
  403d2e:	697b      	ldr	r3, [r7, #20]
  403d30:	431a      	orrs	r2, r3
  403d32:	68fb      	ldr	r3, [r7, #12]
  403d34:	671a      	str	r2, [r3, #112]	; 0x70
	abcdsr = pio->PIO_ABCDSR[1];
  403d36:	68fb      	ldr	r3, [r7, #12]
  403d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403d3a:	617b      	str	r3, [r7, #20]
	pio->PIO_ABCDSR[1] = (mask | abcdsr);
  403d3c:	68ba      	ldr	r2, [r7, #8]
  403d3e:	697b      	ldr	r3, [r7, #20]
  403d40:	431a      	orrs	r2, r3
  403d42:	68fb      	ldr	r3, [r7, #12]
  403d44:	675a      	str	r2, [r3, #116]	; 0x74

	pio->PIO_PDR = mask;
  403d46:	68fb      	ldr	r3, [r7, #12]
  403d48:	68ba      	ldr	r2, [r7, #8]
  403d4a:	605a      	str	r2, [r3, #4]
}
  403d4c:	bf00      	nop
  403d4e:	371c      	adds	r7, #28
  403d50:	46bd      	mov	sp, r7
  403d52:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d56:	4770      	bx	lr

00403d58 <PIO_SetInput>:
 */
static void PIO_SetInput(
		Pio *pio,
		unsigned int mask,
		unsigned char attribute)
{
  403d58:	b480      	push	{r7}
  403d5a:	b085      	sub	sp, #20
  403d5c:	af00      	add	r7, sp, #0
  403d5e:	60f8      	str	r0, [r7, #12]
  403d60:	60b9      	str	r1, [r7, #8]
  403d62:	4613      	mov	r3, r2
  403d64:	71fb      	strb	r3, [r7, #7]
	/* Disable interrupts */
	pio->PIO_IDR = mask;
  403d66:	68fb      	ldr	r3, [r7, #12]
  403d68:	68ba      	ldr	r2, [r7, #8]
  403d6a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Enable pull-up(s) if necessary */
	if (attribute & PIO_PULLUP)
  403d6c:	79fb      	ldrb	r3, [r7, #7]
  403d6e:	f003 0301 	and.w	r3, r3, #1
  403d72:	2b00      	cmp	r3, #0
  403d74:	d003      	beq.n	403d7e <PIO_SetInput+0x26>
		pio->PIO_PUER = mask;
  403d76:	68fb      	ldr	r3, [r7, #12]
  403d78:	68ba      	ldr	r2, [r7, #8]
  403d7a:	665a      	str	r2, [r3, #100]	; 0x64
  403d7c:	e002      	b.n	403d84 <PIO_SetInput+0x2c>
	else
		pio->PIO_PUDR = mask;
  403d7e:	68fb      	ldr	r3, [r7, #12]
  403d80:	68ba      	ldr	r2, [r7, #8]
  403d82:	661a      	str	r2, [r3, #96]	; 0x60

	/* Enable Input Filter if necessary */
	if (attribute & (PIO_DEGLITCH | PIO_DEBOUNCE))
  403d84:	79fb      	ldrb	r3, [r7, #7]
  403d86:	f003 030a 	and.w	r3, r3, #10
  403d8a:	2b00      	cmp	r3, #0
  403d8c:	d003      	beq.n	403d96 <PIO_SetInput+0x3e>
		pio->PIO_IFER = mask;
  403d8e:	68fb      	ldr	r3, [r7, #12]
  403d90:	68ba      	ldr	r2, [r7, #8]
  403d92:	621a      	str	r2, [r3, #32]
  403d94:	e002      	b.n	403d9c <PIO_SetInput+0x44>
	else
		pio->PIO_IFDR = mask;
  403d96:	68fb      	ldr	r3, [r7, #12]
  403d98:	68ba      	ldr	r2, [r7, #8]
  403d9a:	625a      	str	r2, [r3, #36]	; 0x24

	/* Enable de-glitch or de-bounce if necessary */
	if (attribute & PIO_DEGLITCH) {
  403d9c:	79fb      	ldrb	r3, [r7, #7]
  403d9e:	f003 0302 	and.w	r3, r3, #2
  403da2:	2b00      	cmp	r3, #0
  403da4:	d004      	beq.n	403db0 <PIO_SetInput+0x58>
		pio->PIO_IFSCDR = mask;
  403da6:	68fb      	ldr	r3, [r7, #12]
  403da8:	68ba      	ldr	r2, [r7, #8]
  403daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  403dae:	e008      	b.n	403dc2 <PIO_SetInput+0x6a>
	} else {
		if (attribute & PIO_DEBOUNCE) {
  403db0:	79fb      	ldrb	r3, [r7, #7]
  403db2:	f003 0308 	and.w	r3, r3, #8
  403db6:	2b00      	cmp	r3, #0
  403db8:	d003      	beq.n	403dc2 <PIO_SetInput+0x6a>
			pio->PIO_IFSCER = mask;
  403dba:	68fb      	ldr	r3, [r7, #12]
  403dbc:	68ba      	ldr	r2, [r7, #8]
  403dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		}
	}
	/* Configure pin as input */
	pio->PIO_ODR = mask;
  403dc2:	68fb      	ldr	r3, [r7, #12]
  403dc4:	68ba      	ldr	r2, [r7, #8]
  403dc6:	615a      	str	r2, [r3, #20]
	pio->PIO_PER = mask;
  403dc8:	68fb      	ldr	r3, [r7, #12]
  403dca:	68ba      	ldr	r2, [r7, #8]
  403dcc:	601a      	str	r2, [r3, #0]
}
  403dce:	bf00      	nop
  403dd0:	3714      	adds	r7, #20
  403dd2:	46bd      	mov	sp, r7
  403dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403dd8:	4770      	bx	lr

00403dda <PIO_SetOutput>:
		Pio *pio,
		unsigned int mask,
		unsigned char defaultValue,
		unsigned char enableMultiDrive,
		unsigned char enablePullUp)
{
  403dda:	b480      	push	{r7}
  403ddc:	b085      	sub	sp, #20
  403dde:	af00      	add	r7, sp, #0
  403de0:	60f8      	str	r0, [r7, #12]
  403de2:	60b9      	str	r1, [r7, #8]
  403de4:	4611      	mov	r1, r2
  403de6:	461a      	mov	r2, r3
  403de8:	460b      	mov	r3, r1
  403dea:	71fb      	strb	r3, [r7, #7]
  403dec:	4613      	mov	r3, r2
  403dee:	71bb      	strb	r3, [r7, #6]
	/* Disable interrupts */
	pio->PIO_IDR = mask;
  403df0:	68fb      	ldr	r3, [r7, #12]
  403df2:	68ba      	ldr	r2, [r7, #8]
  403df4:	645a      	str	r2, [r3, #68]	; 0x44

	/* Enable pull-up(s) if necessary */
	if (enablePullUp) {
  403df6:	7e3b      	ldrb	r3, [r7, #24]
  403df8:	2b00      	cmp	r3, #0
  403dfa:	d003      	beq.n	403e04 <PIO_SetOutput+0x2a>
		pio->PIO_PUER = mask;
  403dfc:	68fb      	ldr	r3, [r7, #12]
  403dfe:	68ba      	ldr	r2, [r7, #8]
  403e00:	665a      	str	r2, [r3, #100]	; 0x64
  403e02:	e002      	b.n	403e0a <PIO_SetOutput+0x30>
	} else {
		pio->PIO_PUDR = mask;
  403e04:	68fb      	ldr	r3, [r7, #12]
  403e06:	68ba      	ldr	r2, [r7, #8]
  403e08:	661a      	str	r2, [r3, #96]	; 0x60
	}

	/* Enable multi-drive if necessary */
	if (enableMultiDrive) {
  403e0a:	79bb      	ldrb	r3, [r7, #6]
  403e0c:	2b00      	cmp	r3, #0
  403e0e:	d003      	beq.n	403e18 <PIO_SetOutput+0x3e>
		pio->PIO_MDER = mask;
  403e10:	68fb      	ldr	r3, [r7, #12]
  403e12:	68ba      	ldr	r2, [r7, #8]
  403e14:	651a      	str	r2, [r3, #80]	; 0x50
  403e16:	e002      	b.n	403e1e <PIO_SetOutput+0x44>
	} else {
		pio->PIO_MDDR = mask;
  403e18:	68fb      	ldr	r3, [r7, #12]
  403e1a:	68ba      	ldr	r2, [r7, #8]
  403e1c:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (defaultValue) {
  403e1e:	79fb      	ldrb	r3, [r7, #7]
  403e20:	2b00      	cmp	r3, #0
  403e22:	d003      	beq.n	403e2c <PIO_SetOutput+0x52>
		pio->PIO_SODR = mask;
  403e24:	68fb      	ldr	r3, [r7, #12]
  403e26:	68ba      	ldr	r2, [r7, #8]
  403e28:	631a      	str	r2, [r3, #48]	; 0x30
  403e2a:	e002      	b.n	403e32 <PIO_SetOutput+0x58>
	} else {
		pio->PIO_CODR = mask;
  403e2c:	68fb      	ldr	r3, [r7, #12]
  403e2e:	68ba      	ldr	r2, [r7, #8]
  403e30:	635a      	str	r2, [r3, #52]	; 0x34
	}
	/* Configure pin(s) as output(s) */
	pio->PIO_OER = mask;
  403e32:	68fb      	ldr	r3, [r7, #12]
  403e34:	68ba      	ldr	r2, [r7, #8]
  403e36:	611a      	str	r2, [r3, #16]
	pio->PIO_PER = mask;
  403e38:	68fb      	ldr	r3, [r7, #12]
  403e3a:	68ba      	ldr	r2, [r7, #8]
  403e3c:	601a      	str	r2, [r3, #0]
}
  403e3e:	bf00      	nop
  403e40:	3714      	adds	r7, #20
  403e42:	46bd      	mov	sp, r7
  403e44:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e48:	4770      	bx	lr
	...

00403e4c <PIO_Configure>:
 * \param size  Size of the Pin list (calculated using PIO_LISTSIZE).
 *
 * \return 1 if the pins have been configured properly; otherwise 0.
 */
uint8_t PIO_Configure( const Pin *list, uint32_t size )
{
  403e4c:	b590      	push	{r4, r7, lr}
  403e4e:	b085      	sub	sp, #20
  403e50:	af02      	add	r7, sp, #8
  403e52:	6078      	str	r0, [r7, #4]
  403e54:	6039      	str	r1, [r7, #0]
	/* Configure pins */
	while ( size > 0 ) {
  403e56:	e094      	b.n	403f82 <PIO_Configure+0x136>
		switch ( list->type ) {
  403e58:	687b      	ldr	r3, [r7, #4]
  403e5a:	7a5b      	ldrb	r3, [r3, #9]
  403e5c:	2b06      	cmp	r3, #6
  403e5e:	f200 8088 	bhi.w	403f72 <PIO_Configure+0x126>
  403e62:	a201      	add	r2, pc, #4	; (adr r2, 403e68 <PIO_Configure+0x1c>)
  403e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403e68:	00403e85 	.word	0x00403e85
  403e6c:	00403ea7 	.word	0x00403ea7
  403e70:	00403ec9 	.word	0x00403ec9
  403e74:	00403eeb 	.word	0x00403eeb
  403e78:	00403f0d 	.word	0x00403f0d
  403e7c:	00403f2b 	.word	0x00403f2b
  403e80:	00403f2b 	.word	0x00403f2b
		case PIO_PERIPH_A:
			PIO_SetPeripheralA(list->pio,
  403e84:	687b      	ldr	r3, [r7, #4]
  403e86:	6858      	ldr	r0, [r3, #4]
					list->mask,
  403e88:	687b      	ldr	r3, [r7, #4]
  403e8a:	6819      	ldr	r1, [r3, #0]
					(list->attribute & PIO_PULLUP) ? 1 : 0);
  403e8c:	687b      	ldr	r3, [r7, #4]
  403e8e:	7a9b      	ldrb	r3, [r3, #10]
  403e90:	f003 0301 	and.w	r3, r3, #1
			PIO_SetPeripheralA(list->pio,
  403e94:	2b00      	cmp	r3, #0
  403e96:	bf14      	ite	ne
  403e98:	2301      	movne	r3, #1
  403e9a:	2300      	moveq	r3, #0
  403e9c:	b2db      	uxtb	r3, r3
  403e9e:	461a      	mov	r2, r3
  403ea0:	4b3c      	ldr	r3, [pc, #240]	; (403f94 <PIO_Configure+0x148>)
  403ea2:	4798      	blx	r3
			break;
  403ea4:	e067      	b.n	403f76 <PIO_Configure+0x12a>

		case PIO_PERIPH_B:
			PIO_SetPeripheralB(list->pio,
  403ea6:	687b      	ldr	r3, [r7, #4]
  403ea8:	6858      	ldr	r0, [r3, #4]
						list->mask,
  403eaa:	687b      	ldr	r3, [r7, #4]
  403eac:	6819      	ldr	r1, [r3, #0]
						(list->attribute & PIO_PULLUP) ? 1 : 0);
  403eae:	687b      	ldr	r3, [r7, #4]
  403eb0:	7a9b      	ldrb	r3, [r3, #10]
  403eb2:	f003 0301 	and.w	r3, r3, #1
			PIO_SetPeripheralB(list->pio,
  403eb6:	2b00      	cmp	r3, #0
  403eb8:	bf14      	ite	ne
  403eba:	2301      	movne	r3, #1
  403ebc:	2300      	moveq	r3, #0
  403ebe:	b2db      	uxtb	r3, r3
  403ec0:	461a      	mov	r2, r3
  403ec2:	4b35      	ldr	r3, [pc, #212]	; (403f98 <PIO_Configure+0x14c>)
  403ec4:	4798      	blx	r3
			break;
  403ec6:	e056      	b.n	403f76 <PIO_Configure+0x12a>

		case PIO_PERIPH_C:
			PIO_SetPeripheralC(list->pio,
  403ec8:	687b      	ldr	r3, [r7, #4]
  403eca:	6858      	ldr	r0, [r3, #4]
						list->mask,
  403ecc:	687b      	ldr	r3, [r7, #4]
  403ece:	6819      	ldr	r1, [r3, #0]
						(list->attribute & PIO_PULLUP) ? 1 : 0);
  403ed0:	687b      	ldr	r3, [r7, #4]
  403ed2:	7a9b      	ldrb	r3, [r3, #10]
  403ed4:	f003 0301 	and.w	r3, r3, #1
			PIO_SetPeripheralC(list->pio,
  403ed8:	2b00      	cmp	r3, #0
  403eda:	bf14      	ite	ne
  403edc:	2301      	movne	r3, #1
  403ede:	2300      	moveq	r3, #0
  403ee0:	b2db      	uxtb	r3, r3
  403ee2:	461a      	mov	r2, r3
  403ee4:	4b2d      	ldr	r3, [pc, #180]	; (403f9c <PIO_Configure+0x150>)
  403ee6:	4798      	blx	r3
			break;
  403ee8:	e045      	b.n	403f76 <PIO_Configure+0x12a>

		case PIO_PERIPH_D:
				PIO_SetPeripheralD(list->pio,
  403eea:	687b      	ldr	r3, [r7, #4]
  403eec:	6858      	ldr	r0, [r3, #4]
									list->mask,
  403eee:	687b      	ldr	r3, [r7, #4]
  403ef0:	6819      	ldr	r1, [r3, #0]
									(list->attribute & PIO_PULLUP) ? 1 : 0);
  403ef2:	687b      	ldr	r3, [r7, #4]
  403ef4:	7a9b      	ldrb	r3, [r3, #10]
  403ef6:	f003 0301 	and.w	r3, r3, #1
				PIO_SetPeripheralD(list->pio,
  403efa:	2b00      	cmp	r3, #0
  403efc:	bf14      	ite	ne
  403efe:	2301      	movne	r3, #1
  403f00:	2300      	moveq	r3, #0
  403f02:	b2db      	uxtb	r3, r3
  403f04:	461a      	mov	r2, r3
  403f06:	4b26      	ldr	r3, [pc, #152]	; (403fa0 <PIO_Configure+0x154>)
  403f08:	4798      	blx	r3
				break;
  403f0a:	e034      	b.n	403f76 <PIO_Configure+0x12a>
		case PIO_INPUT:
#ifndef __FPGA
			PMC_EnablePeripheral(list->id);
  403f0c:	687b      	ldr	r3, [r7, #4]
  403f0e:	7a1b      	ldrb	r3, [r3, #8]
  403f10:	4618      	mov	r0, r3
  403f12:	4b24      	ldr	r3, [pc, #144]	; (403fa4 <PIO_Configure+0x158>)
  403f14:	4798      	blx	r3
#endif
			PIO_SetInput(list->pio,
  403f16:	687b      	ldr	r3, [r7, #4]
  403f18:	6858      	ldr	r0, [r3, #4]
						list->mask,
  403f1a:	687b      	ldr	r3, [r7, #4]
  403f1c:	6819      	ldr	r1, [r3, #0]
			PIO_SetInput(list->pio,
  403f1e:	687b      	ldr	r3, [r7, #4]
  403f20:	7a9b      	ldrb	r3, [r3, #10]
  403f22:	461a      	mov	r2, r3
  403f24:	4b20      	ldr	r3, [pc, #128]	; (403fa8 <PIO_Configure+0x15c>)
  403f26:	4798      	blx	r3
						list->attribute);
				break;
  403f28:	e025      	b.n	403f76 <PIO_Configure+0x12a>

		case PIO_OUTPUT_0:
		case PIO_OUTPUT_1:
			PIO_SetOutput(list->pio,
  403f2a:	687b      	ldr	r3, [r7, #4]
  403f2c:	6858      	ldr	r0, [r3, #4]
						list->mask,
  403f2e:	687b      	ldr	r3, [r7, #4]
  403f30:	6819      	ldr	r1, [r3, #0]
						(list->type == PIO_OUTPUT_1),
  403f32:	687b      	ldr	r3, [r7, #4]
  403f34:	7a5b      	ldrb	r3, [r3, #9]
			PIO_SetOutput(list->pio,
  403f36:	2b06      	cmp	r3, #6
  403f38:	bf0c      	ite	eq
  403f3a:	2301      	moveq	r3, #1
  403f3c:	2300      	movne	r3, #0
  403f3e:	b2db      	uxtb	r3, r3
  403f40:	461a      	mov	r2, r3
						(list->attribute & PIO_OPENDRAIN) ? 1 : 0,
  403f42:	687b      	ldr	r3, [r7, #4]
  403f44:	7a9b      	ldrb	r3, [r3, #10]
  403f46:	f003 0304 	and.w	r3, r3, #4
			PIO_SetOutput(list->pio,
  403f4a:	2b00      	cmp	r3, #0
  403f4c:	bf14      	ite	ne
  403f4e:	2301      	movne	r3, #1
  403f50:	2300      	moveq	r3, #0
  403f52:	b2db      	uxtb	r3, r3
  403f54:	461c      	mov	r4, r3
						(list->attribute & PIO_PULLUP) ? 1 : 0);
  403f56:	687b      	ldr	r3, [r7, #4]
  403f58:	7a9b      	ldrb	r3, [r3, #10]
  403f5a:	f003 0301 	and.w	r3, r3, #1
			PIO_SetOutput(list->pio,
  403f5e:	2b00      	cmp	r3, #0
  403f60:	bf14      	ite	ne
  403f62:	2301      	movne	r3, #1
  403f64:	2300      	moveq	r3, #0
  403f66:	b2db      	uxtb	r3, r3
  403f68:	9300      	str	r3, [sp, #0]
  403f6a:	4623      	mov	r3, r4
  403f6c:	4c0f      	ldr	r4, [pc, #60]	; (403fac <PIO_Configure+0x160>)
  403f6e:	47a0      	blx	r4
			break;
  403f70:	e001      	b.n	403f76 <PIO_Configure+0x12a>

		default: return 0;
  403f72:	2300      	movs	r3, #0
  403f74:	e00a      	b.n	403f8c <PIO_Configure+0x140>
		}
		list++;
  403f76:	687b      	ldr	r3, [r7, #4]
  403f78:	330c      	adds	r3, #12
  403f7a:	607b      	str	r3, [r7, #4]
		size--;
  403f7c:	683b      	ldr	r3, [r7, #0]
  403f7e:	3b01      	subs	r3, #1
  403f80:	603b      	str	r3, [r7, #0]
	while ( size > 0 ) {
  403f82:	683b      	ldr	r3, [r7, #0]
  403f84:	2b00      	cmp	r3, #0
  403f86:	f47f af67 	bne.w	403e58 <PIO_Configure+0xc>
	}
	return 1;
  403f8a:	2301      	movs	r3, #1
}
  403f8c:	4618      	mov	r0, r3
  403f8e:	370c      	adds	r7, #12
  403f90:	46bd      	mov	sp, r7
  403f92:	bd90      	pop	{r4, r7, pc}
  403f94:	00403bd1 	.word	0x00403bd1
  403f98:	00403c3b 	.word	0x00403c3b
  403f9c:	00403c9d 	.word	0x00403c9d
  403fa0:	00403cff 	.word	0x00403cff
  403fa4:	00404019 	.word	0x00404019
  403fa8:	00403d59 	.word	0x00403d59
  403fac:	00403ddb 	.word	0x00403ddb

00403fb0 <PIO_Set>:
 * controller will memorize the value they are changed to outputs.
 *
 * \param pin  Pointer to a Pin instance describing one or more pins.
 */
void PIO_Set(const Pin *pin)
{
  403fb0:	b480      	push	{r7}
  403fb2:	b083      	sub	sp, #12
  403fb4:	af00      	add	r7, sp, #0
  403fb6:	6078      	str	r0, [r7, #4]
	pin->pio->PIO_SODR = pin->mask;
  403fb8:	687b      	ldr	r3, [r7, #4]
  403fba:	685b      	ldr	r3, [r3, #4]
  403fbc:	687a      	ldr	r2, [r7, #4]
  403fbe:	6812      	ldr	r2, [r2, #0]
  403fc0:	631a      	str	r2, [r3, #48]	; 0x30
}
  403fc2:	bf00      	nop
  403fc4:	370c      	adds	r7, #12
  403fc6:	46bd      	mov	sp, r7
  403fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fcc:	4770      	bx	lr

00403fce <PIO_Clear>:
 * controller will memorize the value they are changed to outputs.
 *
 * \param pin  Pointer to a Pin instance describing one or more pins.
 */
void PIO_Clear(const Pin *pin)
{
  403fce:	b480      	push	{r7}
  403fd0:	b083      	sub	sp, #12
  403fd2:	af00      	add	r7, sp, #0
  403fd4:	6078      	str	r0, [r7, #4]
	pin->pio->PIO_CODR = pin->mask;
  403fd6:	687b      	ldr	r3, [r7, #4]
  403fd8:	685b      	ldr	r3, [r3, #4]
  403fda:	687a      	ldr	r2, [r7, #4]
  403fdc:	6812      	ldr	r2, [r2, #0]
  403fde:	635a      	str	r2, [r3, #52]	; 0x34
}
  403fe0:	bf00      	nop
  403fe2:	370c      	adds	r7, #12
  403fe4:	46bd      	mov	sp, r7
  403fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fea:	4770      	bx	lr

00403fec <PIO_GetOutputDataStatus>:
 *
 * \return 1 if the Pin instance contains at least one PIO that is configured
 * to output a high level; otherwise 0.
 */
unsigned char PIO_GetOutputDataStatus(const Pin *pin)
{
  403fec:	b480      	push	{r7}
  403fee:	b083      	sub	sp, #12
  403ff0:	af00      	add	r7, sp, #0
  403ff2:	6078      	str	r0, [r7, #4]
	if ((pin->pio->PIO_ODSR & pin->mask) == 0) {
  403ff4:	687b      	ldr	r3, [r7, #4]
  403ff6:	685b      	ldr	r3, [r3, #4]
  403ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403ffa:	687b      	ldr	r3, [r7, #4]
  403ffc:	681b      	ldr	r3, [r3, #0]
  403ffe:	4013      	ands	r3, r2
  404000:	2b00      	cmp	r3, #0
  404002:	d101      	bne.n	404008 <PIO_GetOutputDataStatus+0x1c>
		return 0;
  404004:	2300      	movs	r3, #0
  404006:	e000      	b.n	40400a <PIO_GetOutputDataStatus+0x1e>
	} else {
		return 1;
  404008:	2301      	movs	r3, #1
	}
}
  40400a:	4618      	mov	r0, r3
  40400c:	370c      	adds	r7, #12
  40400e:	46bd      	mov	sp, r7
  404010:	f85d 7b04 	ldr.w	r7, [sp], #4
  404014:	4770      	bx	lr
	...

00404018 <PMC_EnablePeripheral>:
 * \note The ID must NOT be shifted (i.e. 1 << ID_xxx).
 *
 * \param id  Peripheral ID (ID_xxx).
 */
void PMC_EnablePeripheral( uint32_t dwId )
{
  404018:	b590      	push	{r4, r7, lr}
  40401a:	b083      	sub	sp, #12
  40401c:	af00      	add	r7, sp, #0
  40401e:	6078      	str	r0, [r7, #4]
	assert( dwId < 63 ) ;
  404020:	687b      	ldr	r3, [r7, #4]
  404022:	2b3e      	cmp	r3, #62	; 0x3e
  404024:	d905      	bls.n	404032 <PMC_EnablePeripheral+0x1a>
  404026:	4b1c      	ldr	r3, [pc, #112]	; (404098 <PMC_EnablePeripheral+0x80>)
  404028:	4a1c      	ldr	r2, [pc, #112]	; (40409c <PMC_EnablePeripheral+0x84>)
  40402a:	219c      	movs	r1, #156	; 0x9c
  40402c:	481c      	ldr	r0, [pc, #112]	; (4040a0 <PMC_EnablePeripheral+0x88>)
  40402e:	4c1d      	ldr	r4, [pc, #116]	; (4040a4 <PMC_EnablePeripheral+0x8c>)
  404030:	47a0      	blx	r4

	if ( dwId < 32 ) {
  404032:	687b      	ldr	r3, [r7, #4]
  404034:	2b1f      	cmp	r3, #31
  404036:	d813      	bhi.n	404060 <PMC_EnablePeripheral+0x48>
		if ( (PMC->PMC_PCSR0 & ((uint32_t)1 << dwId)) == ((uint32_t)1 << dwId) ) {
  404038:	4b1b      	ldr	r3, [pc, #108]	; (4040a8 <PMC_EnablePeripheral+0x90>)
  40403a:	699a      	ldr	r2, [r3, #24]
  40403c:	2101      	movs	r1, #1
  40403e:	687b      	ldr	r3, [r7, #4]
  404040:	fa01 f303 	lsl.w	r3, r1, r3
  404044:	401a      	ands	r2, r3
  404046:	2101      	movs	r1, #1
  404048:	687b      	ldr	r3, [r7, #4]
  40404a:	fa01 f303 	lsl.w	r3, r1, r3
  40404e:	429a      	cmp	r2, r3
  404050:	d01e      	beq.n	404090 <PMC_EnablePeripheral+0x78>
			TRACE_DEBUG( "PMC_EnablePeripheral: clock of peripheral" \
			" %u is already enabled\n\r", (unsigned int)dwId ) ;
		} else {
			PMC->PMC_PCER0 = 1 << dwId ;
  404052:	4a15      	ldr	r2, [pc, #84]	; (4040a8 <PMC_EnablePeripheral+0x90>)
  404054:	2101      	movs	r1, #1
  404056:	687b      	ldr	r3, [r7, #4]
  404058:	fa01 f303 	lsl.w	r3, r1, r3
  40405c:	6113      	str	r3, [r2, #16]
			" %u is already enabled\n\r", (unsigned int)(dwId + 32) ) ;
		} else {
			PMC->PMC_PCER1 = 1 << dwId ;
		}
	}
}
  40405e:	e017      	b.n	404090 <PMC_EnablePeripheral+0x78>
		dwId -= 32;
  404060:	687b      	ldr	r3, [r7, #4]
  404062:	3b20      	subs	r3, #32
  404064:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & ((uint32_t)1 << dwId)) == ((uint32_t)1 << dwId)) {
  404066:	4b10      	ldr	r3, [pc, #64]	; (4040a8 <PMC_EnablePeripheral+0x90>)
  404068:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40406c:	2101      	movs	r1, #1
  40406e:	687b      	ldr	r3, [r7, #4]
  404070:	fa01 f303 	lsl.w	r3, r1, r3
  404074:	401a      	ands	r2, r3
  404076:	2101      	movs	r1, #1
  404078:	687b      	ldr	r3, [r7, #4]
  40407a:	fa01 f303 	lsl.w	r3, r1, r3
  40407e:	429a      	cmp	r2, r3
  404080:	d006      	beq.n	404090 <PMC_EnablePeripheral+0x78>
			PMC->PMC_PCER1 = 1 << dwId ;
  404082:	4a09      	ldr	r2, [pc, #36]	; (4040a8 <PMC_EnablePeripheral+0x90>)
  404084:	2101      	movs	r1, #1
  404086:	687b      	ldr	r3, [r7, #4]
  404088:	fa01 f303 	lsl.w	r3, r1, r3
  40408c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
  404090:	bf00      	nop
  404092:	370c      	adds	r7, #12
  404094:	46bd      	mov	sp, r7
  404096:	bd90      	pop	{r4, r7, pc}
  404098:	0040a930 	.word	0x0040a930
  40409c:	0040a974 	.word	0x0040a974
  4040a0:	0040a93c 	.word	0x0040a93c
  4040a4:	00404af5 	.word	0x00404af5
  4040a8:	400e0600 	.word	0x400e0600

004040ac <WDT_Disable>:
 *
 * \note The Watchdog Mode Register (WDT_MR) can be written only once.
 * Only a processor reset resets it.
 */
extern void WDT_Disable( Wdt* pWDT )
{
  4040ac:	b480      	push	{r7}
  4040ae:	b083      	sub	sp, #12
  4040b0:	af00      	add	r7, sp, #0
  4040b2:	6078      	str	r0, [r7, #4]
	pWDT->WDT_MR = WDT_MR_WDDIS;
  4040b4:	687b      	ldr	r3, [r7, #4]
  4040b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4040ba:	605a      	str	r2, [r3, #4]
}
  4040bc:	bf00      	nop
  4040be:	370c      	adds	r7, #12
  4040c0:	46bd      	mov	sp, r7
  4040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040c6:	4770      	bx	lr

004040c8 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  4040c8:	b480      	push	{r7}
  4040ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  4040cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4040d0:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4040d4:	4b09      	ldr	r3, [pc, #36]	; (4040fc <SCB_EnableICache+0x34>)
  4040d6:	2200      	movs	r2, #0
  4040d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4040dc:	4a07      	ldr	r2, [pc, #28]	; (4040fc <SCB_EnableICache+0x34>)
  4040de:	4b07      	ldr	r3, [pc, #28]	; (4040fc <SCB_EnableICache+0x34>)
  4040e0:	695b      	ldr	r3, [r3, #20]
  4040e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4040e6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  4040e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4040ec:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  4040f0:	bf00      	nop
  4040f2:	46bd      	mov	sp, r7
  4040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040f8:	4770      	bx	lr
  4040fa:	bf00      	nop
  4040fc:	e000ed00 	.word	0xe000ed00

00404100 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  404100:	b480      	push	{r7}
  404102:	b08b      	sub	sp, #44	; 0x2c
  404104:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  404106:	4b26      	ldr	r3, [pc, #152]	; (4041a0 <SCB_EnableDCache+0xa0>)
  404108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  40410c:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  40410e:	69fb      	ldr	r3, [r7, #28]
  404110:	0b5b      	lsrs	r3, r3, #13
  404112:	f3c3 030e 	ubfx	r3, r3, #0, #15
  404116:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404118:	69fb      	ldr	r3, [r7, #28]
  40411a:	f003 0307 	and.w	r3, r3, #7
  40411e:	3304      	adds	r3, #4
  404120:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  404122:	69fb      	ldr	r3, [r7, #28]
  404124:	08db      	lsrs	r3, r3, #3
  404126:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40412a:	617b      	str	r3, [r7, #20]
  40412c:	697b      	ldr	r3, [r7, #20]
  40412e:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404130:	68bb      	ldr	r3, [r7, #8]
  404132:	fab3 f383 	clz	r3, r3
  404136:	71fb      	strb	r3, [r7, #7]
  return(result);
  404138:	79fb      	ldrb	r3, [r7, #7]
    wshift  = __CLZ(ways) & 0x1f;
  40413a:	f003 031f 	and.w	r3, r3, #31
  40413e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  404140:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  404144:	697b      	ldr	r3, [r7, #20]
  404146:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  404148:	6a3a      	ldr	r2, [r7, #32]
  40414a:	693b      	ldr	r3, [r7, #16]
  40414c:	fa02 f303 	lsl.w	r3, r2, r3
  404150:	4619      	mov	r1, r3
  404152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  404154:	69bb      	ldr	r3, [r7, #24]
  404156:	fa02 f303 	lsl.w	r3, r2, r3
  40415a:	430b      	orrs	r3, r1
  40415c:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  40415e:	4a10      	ldr	r2, [pc, #64]	; (4041a0 <SCB_EnableDCache+0xa0>)
  404160:	68fb      	ldr	r3, [r7, #12]
  404162:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  404166:	6a3b      	ldr	r3, [r7, #32]
  404168:	1e5a      	subs	r2, r3, #1
  40416a:	623a      	str	r2, [r7, #32]
  40416c:	2b00      	cmp	r3, #0
  40416e:	d1eb      	bne.n	404148 <SCB_EnableDCache+0x48>
        } while(sets--);
  404170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404172:	1e5a      	subs	r2, r3, #1
  404174:	627a      	str	r2, [r7, #36]	; 0x24
  404176:	2b00      	cmp	r3, #0
  404178:	d1e4      	bne.n	404144 <SCB_EnableDCache+0x44>
  40417a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40417e:	4a08      	ldr	r2, [pc, #32]	; (4041a0 <SCB_EnableDCache+0xa0>)
  404180:	4b07      	ldr	r3, [pc, #28]	; (4041a0 <SCB_EnableDCache+0xa0>)
  404182:	695b      	ldr	r3, [r3, #20]
  404184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404188:	6153      	str	r3, [r2, #20]
  40418a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40418e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  404192:	bf00      	nop
  404194:	372c      	adds	r7, #44	; 0x2c
  404196:	46bd      	mov	sp, r7
  404198:	f85d 7b04 	ldr.w	r7, [sp], #4
  40419c:	4770      	bx	lr
  40419e:	bf00      	nop
  4041a0:	e000ed00 	.word	0xe000ed00

004041a4 <main>:
void vApplicationTickHook( void );

/*-----------------------------------------------------------*/

int main( void )
{
  4041a4:	b580      	push	{r7, lr}
  4041a6:	af00      	add	r7, sp, #0
	/* Configure the hardware ready to run the demo. */
	prvSetupHardware();
  4041a8:	4b03      	ldr	r3, [pc, #12]	; (4041b8 <main+0x14>)
  4041aa:	4798      	blx	r3

	/* The mainCREATE_SIMPLE_BLINKY_DEMO_ONLY setting is described at the top
	of this file. */
	#if( mainCREATE_SIMPLE_BLINKY_DEMO_ONLY == 1 )
	{
		main_blinky();
  4041ac:	4b03      	ldr	r3, [pc, #12]	; (4041bc <main+0x18>)
  4041ae:	4798      	blx	r3
	{
		main_full();
	}
	#endif

	return 0;
  4041b0:	2300      	movs	r3, #0
}
  4041b2:	4618      	mov	r0, r3
  4041b4:	bd80      	pop	{r7, pc}
  4041b6:	bf00      	nop
  4041b8:	004041c1 	.word	0x004041c1
  4041bc:	004032c5 	.word	0x004032c5

004041c0 <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
  4041c0:	b580      	push	{r7, lr}
  4041c2:	af00      	add	r7, sp, #0
	/* Disable watchdog. */
	WDT_Disable( WDT );
  4041c4:	4808      	ldr	r0, [pc, #32]	; (4041e8 <prvSetupHardware+0x28>)
  4041c6:	4b09      	ldr	r3, [pc, #36]	; (4041ec <prvSetupHardware+0x2c>)
  4041c8:	4798      	blx	r3
	WDT_Disable( ( Wdt * ) RSWDT );
  4041ca:	4809      	ldr	r0, [pc, #36]	; (4041f0 <prvSetupHardware+0x30>)
  4041cc:	4b07      	ldr	r3, [pc, #28]	; (4041ec <prvSetupHardware+0x2c>)
  4041ce:	4798      	blx	r3

	SCB_EnableICache();
  4041d0:	4b08      	ldr	r3, [pc, #32]	; (4041f4 <prvSetupHardware+0x34>)
  4041d2:	4798      	blx	r3
	SCB_EnableDCache();
  4041d4:	4b08      	ldr	r3, [pc, #32]	; (4041f8 <prvSetupHardware+0x38>)
  4041d6:	4798      	blx	r3

    LED_Configure( 0 );
  4041d8:	2000      	movs	r0, #0
  4041da:	4b08      	ldr	r3, [pc, #32]	; (4041fc <prvSetupHardware+0x3c>)
  4041dc:	4798      	blx	r3
    LED_Configure( 1 );
  4041de:	2001      	movs	r0, #1
  4041e0:	4b06      	ldr	r3, [pc, #24]	; (4041fc <prvSetupHardware+0x3c>)
  4041e2:	4798      	blx	r3
}
  4041e4:	bf00      	nop
  4041e6:	bd80      	pop	{r7, pc}
  4041e8:	400e1850 	.word	0x400e1850
  4041ec:	004040ad 	.word	0x004040ad
  4041f0:	400e1900 	.word	0x400e1900
  4041f4:	004040c9 	.word	0x004040c9
  4041f8:	00404101 	.word	0x00404101
  4041fc:	00403951 	.word	0x00403951

00404200 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
  404200:	b480      	push	{r7}
  404202:	b083      	sub	sp, #12
  404204:	af00      	add	r7, sp, #0
	__asm volatile
  404206:	f04f 0380 	mov.w	r3, #128	; 0x80
  40420a:	b672      	cpsid	i
  40420c:	f383 8811 	msr	BASEPRI, r3
  404210:	f3bf 8f6f 	isb	sy
  404214:	f3bf 8f4f 	dsb	sy
  404218:	b662      	cpsie	i
  40421a:	607b      	str	r3, [r7, #4]
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
  40421c:	e7fe      	b.n	40421c <vApplicationMallocFailedHook+0x1c>

0040421e <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
  40421e:	b480      	push	{r7}
  404220:	b085      	sub	sp, #20
  404222:	af00      	add	r7, sp, #0
  404224:	6078      	str	r0, [r7, #4]
  404226:	6039      	str	r1, [r7, #0]
  404228:	f04f 0380 	mov.w	r3, #128	; 0x80
  40422c:	b672      	cpsid	i
  40422e:	f383 8811 	msr	BASEPRI, r3
  404232:	f3bf 8f6f 	isb	sy
  404236:	f3bf 8f4f 	dsb	sy
  40423a:	b662      	cpsie	i
  40423c:	60fb      	str	r3, [r7, #12]
	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
  40423e:	e7fe      	b.n	40423e <vApplicationStackOverflowHook+0x20>

00404240 <vApplicationTickHook>:
	( void ) xFreeHeapSpace;
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
  404240:	b480      	push	{r7}
  404242:	af00      	add	r7, sp, #0

		/* Call the code that 'gives' a task notification from an ISR. */
		xNotifyTaskFromISR();
	}
	#endif
}
  404244:	bf00      	nop
  404246:	46bd      	mov	sp, r7
  404248:	f85d 7b04 	ldr.w	r7, [sp], #4
  40424c:	4770      	bx	lr
	...

00404250 <__aeabi_drsub>:
  404250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  404254:	e002      	b.n	40425c <__adddf3>
  404256:	bf00      	nop

00404258 <__aeabi_dsub>:
  404258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040425c <__adddf3>:
  40425c:	b530      	push	{r4, r5, lr}
  40425e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  404262:	ea4f 0543 	mov.w	r5, r3, lsl #1
  404266:	ea94 0f05 	teq	r4, r5
  40426a:	bf08      	it	eq
  40426c:	ea90 0f02 	teqeq	r0, r2
  404270:	bf1f      	itttt	ne
  404272:	ea54 0c00 	orrsne.w	ip, r4, r0
  404276:	ea55 0c02 	orrsne.w	ip, r5, r2
  40427a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40427e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404282:	f000 80e2 	beq.w	40444a <__adddf3+0x1ee>
  404286:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40428a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40428e:	bfb8      	it	lt
  404290:	426d      	neglt	r5, r5
  404292:	dd0c      	ble.n	4042ae <__adddf3+0x52>
  404294:	442c      	add	r4, r5
  404296:	ea80 0202 	eor.w	r2, r0, r2
  40429a:	ea81 0303 	eor.w	r3, r1, r3
  40429e:	ea82 0000 	eor.w	r0, r2, r0
  4042a2:	ea83 0101 	eor.w	r1, r3, r1
  4042a6:	ea80 0202 	eor.w	r2, r0, r2
  4042aa:	ea81 0303 	eor.w	r3, r1, r3
  4042ae:	2d36      	cmp	r5, #54	; 0x36
  4042b0:	bf88      	it	hi
  4042b2:	bd30      	pophi	{r4, r5, pc}
  4042b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4042b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4042bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4042c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4042c4:	d002      	beq.n	4042cc <__adddf3+0x70>
  4042c6:	4240      	negs	r0, r0
  4042c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4042cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4042d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4042d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4042d8:	d002      	beq.n	4042e0 <__adddf3+0x84>
  4042da:	4252      	negs	r2, r2
  4042dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4042e0:	ea94 0f05 	teq	r4, r5
  4042e4:	f000 80a7 	beq.w	404436 <__adddf3+0x1da>
  4042e8:	f1a4 0401 	sub.w	r4, r4, #1
  4042ec:	f1d5 0e20 	rsbs	lr, r5, #32
  4042f0:	db0d      	blt.n	40430e <__adddf3+0xb2>
  4042f2:	fa02 fc0e 	lsl.w	ip, r2, lr
  4042f6:	fa22 f205 	lsr.w	r2, r2, r5
  4042fa:	1880      	adds	r0, r0, r2
  4042fc:	f141 0100 	adc.w	r1, r1, #0
  404300:	fa03 f20e 	lsl.w	r2, r3, lr
  404304:	1880      	adds	r0, r0, r2
  404306:	fa43 f305 	asr.w	r3, r3, r5
  40430a:	4159      	adcs	r1, r3
  40430c:	e00e      	b.n	40432c <__adddf3+0xd0>
  40430e:	f1a5 0520 	sub.w	r5, r5, #32
  404312:	f10e 0e20 	add.w	lr, lr, #32
  404316:	2a01      	cmp	r2, #1
  404318:	fa03 fc0e 	lsl.w	ip, r3, lr
  40431c:	bf28      	it	cs
  40431e:	f04c 0c02 	orrcs.w	ip, ip, #2
  404322:	fa43 f305 	asr.w	r3, r3, r5
  404326:	18c0      	adds	r0, r0, r3
  404328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40432c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404330:	d507      	bpl.n	404342 <__adddf3+0xe6>
  404332:	f04f 0e00 	mov.w	lr, #0
  404336:	f1dc 0c00 	rsbs	ip, ip, #0
  40433a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40433e:	eb6e 0101 	sbc.w	r1, lr, r1
  404342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  404346:	d31b      	bcc.n	404380 <__adddf3+0x124>
  404348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40434c:	d30c      	bcc.n	404368 <__adddf3+0x10c>
  40434e:	0849      	lsrs	r1, r1, #1
  404350:	ea5f 0030 	movs.w	r0, r0, rrx
  404354:	ea4f 0c3c 	mov.w	ip, ip, rrx
  404358:	f104 0401 	add.w	r4, r4, #1
  40435c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  404360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  404364:	f080 809a 	bcs.w	40449c <__adddf3+0x240>
  404368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40436c:	bf08      	it	eq
  40436e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404372:	f150 0000 	adcs.w	r0, r0, #0
  404376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40437a:	ea41 0105 	orr.w	r1, r1, r5
  40437e:	bd30      	pop	{r4, r5, pc}
  404380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  404384:	4140      	adcs	r0, r0
  404386:	eb41 0101 	adc.w	r1, r1, r1
  40438a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40438e:	f1a4 0401 	sub.w	r4, r4, #1
  404392:	d1e9      	bne.n	404368 <__adddf3+0x10c>
  404394:	f091 0f00 	teq	r1, #0
  404398:	bf04      	itt	eq
  40439a:	4601      	moveq	r1, r0
  40439c:	2000      	moveq	r0, #0
  40439e:	fab1 f381 	clz	r3, r1
  4043a2:	bf08      	it	eq
  4043a4:	3320      	addeq	r3, #32
  4043a6:	f1a3 030b 	sub.w	r3, r3, #11
  4043aa:	f1b3 0220 	subs.w	r2, r3, #32
  4043ae:	da0c      	bge.n	4043ca <__adddf3+0x16e>
  4043b0:	320c      	adds	r2, #12
  4043b2:	dd08      	ble.n	4043c6 <__adddf3+0x16a>
  4043b4:	f102 0c14 	add.w	ip, r2, #20
  4043b8:	f1c2 020c 	rsb	r2, r2, #12
  4043bc:	fa01 f00c 	lsl.w	r0, r1, ip
  4043c0:	fa21 f102 	lsr.w	r1, r1, r2
  4043c4:	e00c      	b.n	4043e0 <__adddf3+0x184>
  4043c6:	f102 0214 	add.w	r2, r2, #20
  4043ca:	bfd8      	it	le
  4043cc:	f1c2 0c20 	rsble	ip, r2, #32
  4043d0:	fa01 f102 	lsl.w	r1, r1, r2
  4043d4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4043d8:	bfdc      	itt	le
  4043da:	ea41 010c 	orrle.w	r1, r1, ip
  4043de:	4090      	lslle	r0, r2
  4043e0:	1ae4      	subs	r4, r4, r3
  4043e2:	bfa2      	ittt	ge
  4043e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4043e8:	4329      	orrge	r1, r5
  4043ea:	bd30      	popge	{r4, r5, pc}
  4043ec:	ea6f 0404 	mvn.w	r4, r4
  4043f0:	3c1f      	subs	r4, #31
  4043f2:	da1c      	bge.n	40442e <__adddf3+0x1d2>
  4043f4:	340c      	adds	r4, #12
  4043f6:	dc0e      	bgt.n	404416 <__adddf3+0x1ba>
  4043f8:	f104 0414 	add.w	r4, r4, #20
  4043fc:	f1c4 0220 	rsb	r2, r4, #32
  404400:	fa20 f004 	lsr.w	r0, r0, r4
  404404:	fa01 f302 	lsl.w	r3, r1, r2
  404408:	ea40 0003 	orr.w	r0, r0, r3
  40440c:	fa21 f304 	lsr.w	r3, r1, r4
  404410:	ea45 0103 	orr.w	r1, r5, r3
  404414:	bd30      	pop	{r4, r5, pc}
  404416:	f1c4 040c 	rsb	r4, r4, #12
  40441a:	f1c4 0220 	rsb	r2, r4, #32
  40441e:	fa20 f002 	lsr.w	r0, r0, r2
  404422:	fa01 f304 	lsl.w	r3, r1, r4
  404426:	ea40 0003 	orr.w	r0, r0, r3
  40442a:	4629      	mov	r1, r5
  40442c:	bd30      	pop	{r4, r5, pc}
  40442e:	fa21 f004 	lsr.w	r0, r1, r4
  404432:	4629      	mov	r1, r5
  404434:	bd30      	pop	{r4, r5, pc}
  404436:	f094 0f00 	teq	r4, #0
  40443a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40443e:	bf06      	itte	eq
  404440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  404444:	3401      	addeq	r4, #1
  404446:	3d01      	subne	r5, #1
  404448:	e74e      	b.n	4042e8 <__adddf3+0x8c>
  40444a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40444e:	bf18      	it	ne
  404450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404454:	d029      	beq.n	4044aa <__adddf3+0x24e>
  404456:	ea94 0f05 	teq	r4, r5
  40445a:	bf08      	it	eq
  40445c:	ea90 0f02 	teqeq	r0, r2
  404460:	d005      	beq.n	40446e <__adddf3+0x212>
  404462:	ea54 0c00 	orrs.w	ip, r4, r0
  404466:	bf04      	itt	eq
  404468:	4619      	moveq	r1, r3
  40446a:	4610      	moveq	r0, r2
  40446c:	bd30      	pop	{r4, r5, pc}
  40446e:	ea91 0f03 	teq	r1, r3
  404472:	bf1e      	ittt	ne
  404474:	2100      	movne	r1, #0
  404476:	2000      	movne	r0, #0
  404478:	bd30      	popne	{r4, r5, pc}
  40447a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40447e:	d105      	bne.n	40448c <__adddf3+0x230>
  404480:	0040      	lsls	r0, r0, #1
  404482:	4149      	adcs	r1, r1
  404484:	bf28      	it	cs
  404486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40448a:	bd30      	pop	{r4, r5, pc}
  40448c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  404490:	bf3c      	itt	cc
  404492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  404496:	bd30      	popcc	{r4, r5, pc}
  404498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40449c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4044a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4044a4:	f04f 0000 	mov.w	r0, #0
  4044a8:	bd30      	pop	{r4, r5, pc}
  4044aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4044ae:	bf1a      	itte	ne
  4044b0:	4619      	movne	r1, r3
  4044b2:	4610      	movne	r0, r2
  4044b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4044b8:	bf1c      	itt	ne
  4044ba:	460b      	movne	r3, r1
  4044bc:	4602      	movne	r2, r0
  4044be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4044c2:	bf06      	itte	eq
  4044c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4044c8:	ea91 0f03 	teqeq	r1, r3
  4044cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4044d0:	bd30      	pop	{r4, r5, pc}
  4044d2:	bf00      	nop

004044d4 <__aeabi_ui2d>:
  4044d4:	f090 0f00 	teq	r0, #0
  4044d8:	bf04      	itt	eq
  4044da:	2100      	moveq	r1, #0
  4044dc:	4770      	bxeq	lr
  4044de:	b530      	push	{r4, r5, lr}
  4044e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4044e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4044e8:	f04f 0500 	mov.w	r5, #0
  4044ec:	f04f 0100 	mov.w	r1, #0
  4044f0:	e750      	b.n	404394 <__adddf3+0x138>
  4044f2:	bf00      	nop

004044f4 <__aeabi_i2d>:
  4044f4:	f090 0f00 	teq	r0, #0
  4044f8:	bf04      	itt	eq
  4044fa:	2100      	moveq	r1, #0
  4044fc:	4770      	bxeq	lr
  4044fe:	b530      	push	{r4, r5, lr}
  404500:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404504:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40450c:	bf48      	it	mi
  40450e:	4240      	negmi	r0, r0
  404510:	f04f 0100 	mov.w	r1, #0
  404514:	e73e      	b.n	404394 <__adddf3+0x138>
  404516:	bf00      	nop

00404518 <__aeabi_f2d>:
  404518:	0042      	lsls	r2, r0, #1
  40451a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40451e:	ea4f 0131 	mov.w	r1, r1, rrx
  404522:	ea4f 7002 	mov.w	r0, r2, lsl #28
  404526:	bf1f      	itttt	ne
  404528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40452c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  404534:	4770      	bxne	lr
  404536:	f092 0f00 	teq	r2, #0
  40453a:	bf14      	ite	ne
  40453c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404540:	4770      	bxeq	lr
  404542:	b530      	push	{r4, r5, lr}
  404544:	f44f 7460 	mov.w	r4, #896	; 0x380
  404548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40454c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404550:	e720      	b.n	404394 <__adddf3+0x138>
  404552:	bf00      	nop

00404554 <__aeabi_ul2d>:
  404554:	ea50 0201 	orrs.w	r2, r0, r1
  404558:	bf08      	it	eq
  40455a:	4770      	bxeq	lr
  40455c:	b530      	push	{r4, r5, lr}
  40455e:	f04f 0500 	mov.w	r5, #0
  404562:	e00a      	b.n	40457a <__aeabi_l2d+0x16>

00404564 <__aeabi_l2d>:
  404564:	ea50 0201 	orrs.w	r2, r0, r1
  404568:	bf08      	it	eq
  40456a:	4770      	bxeq	lr
  40456c:	b530      	push	{r4, r5, lr}
  40456e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  404572:	d502      	bpl.n	40457a <__aeabi_l2d+0x16>
  404574:	4240      	negs	r0, r0
  404576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40457a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40457e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  404586:	f43f aedc 	beq.w	404342 <__adddf3+0xe6>
  40458a:	f04f 0203 	mov.w	r2, #3
  40458e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404592:	bf18      	it	ne
  404594:	3203      	addne	r2, #3
  404596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40459a:	bf18      	it	ne
  40459c:	3203      	addne	r2, #3
  40459e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4045a2:	f1c2 0320 	rsb	r3, r2, #32
  4045a6:	fa00 fc03 	lsl.w	ip, r0, r3
  4045aa:	fa20 f002 	lsr.w	r0, r0, r2
  4045ae:	fa01 fe03 	lsl.w	lr, r1, r3
  4045b2:	ea40 000e 	orr.w	r0, r0, lr
  4045b6:	fa21 f102 	lsr.w	r1, r1, r2
  4045ba:	4414      	add	r4, r2
  4045bc:	e6c1      	b.n	404342 <__adddf3+0xe6>
  4045be:	bf00      	nop

004045c0 <__aeabi_dmul>:
  4045c0:	b570      	push	{r4, r5, r6, lr}
  4045c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4045c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4045ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4045ce:	bf1d      	ittte	ne
  4045d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4045d4:	ea94 0f0c 	teqne	r4, ip
  4045d8:	ea95 0f0c 	teqne	r5, ip
  4045dc:	f000 f8de 	bleq	40479c <__aeabi_dmul+0x1dc>
  4045e0:	442c      	add	r4, r5
  4045e2:	ea81 0603 	eor.w	r6, r1, r3
  4045e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4045ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4045ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4045f2:	bf18      	it	ne
  4045f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4045f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4045fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404600:	d038      	beq.n	404674 <__aeabi_dmul+0xb4>
  404602:	fba0 ce02 	umull	ip, lr, r0, r2
  404606:	f04f 0500 	mov.w	r5, #0
  40460a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40460e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  404612:	fbe0 e503 	umlal	lr, r5, r0, r3
  404616:	f04f 0600 	mov.w	r6, #0
  40461a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40461e:	f09c 0f00 	teq	ip, #0
  404622:	bf18      	it	ne
  404624:	f04e 0e01 	orrne.w	lr, lr, #1
  404628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40462c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  404630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  404634:	d204      	bcs.n	404640 <__aeabi_dmul+0x80>
  404636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40463a:	416d      	adcs	r5, r5
  40463c:	eb46 0606 	adc.w	r6, r6, r6
  404640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  404644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  404648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40464c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  404650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  404654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404658:	bf88      	it	hi
  40465a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40465e:	d81e      	bhi.n	40469e <__aeabi_dmul+0xde>
  404660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  404664:	bf08      	it	eq
  404666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40466a:	f150 0000 	adcs.w	r0, r0, #0
  40466e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404672:	bd70      	pop	{r4, r5, r6, pc}
  404674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  404678:	ea46 0101 	orr.w	r1, r6, r1
  40467c:	ea40 0002 	orr.w	r0, r0, r2
  404680:	ea81 0103 	eor.w	r1, r1, r3
  404684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  404688:	bfc2      	ittt	gt
  40468a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40468e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404692:	bd70      	popgt	{r4, r5, r6, pc}
  404694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404698:	f04f 0e00 	mov.w	lr, #0
  40469c:	3c01      	subs	r4, #1
  40469e:	f300 80ab 	bgt.w	4047f8 <__aeabi_dmul+0x238>
  4046a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4046a6:	bfde      	ittt	le
  4046a8:	2000      	movle	r0, #0
  4046aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4046ae:	bd70      	pople	{r4, r5, r6, pc}
  4046b0:	f1c4 0400 	rsb	r4, r4, #0
  4046b4:	3c20      	subs	r4, #32
  4046b6:	da35      	bge.n	404724 <__aeabi_dmul+0x164>
  4046b8:	340c      	adds	r4, #12
  4046ba:	dc1b      	bgt.n	4046f4 <__aeabi_dmul+0x134>
  4046bc:	f104 0414 	add.w	r4, r4, #20
  4046c0:	f1c4 0520 	rsb	r5, r4, #32
  4046c4:	fa00 f305 	lsl.w	r3, r0, r5
  4046c8:	fa20 f004 	lsr.w	r0, r0, r4
  4046cc:	fa01 f205 	lsl.w	r2, r1, r5
  4046d0:	ea40 0002 	orr.w	r0, r0, r2
  4046d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4046d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4046dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4046e0:	fa21 f604 	lsr.w	r6, r1, r4
  4046e4:	eb42 0106 	adc.w	r1, r2, r6
  4046e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4046ec:	bf08      	it	eq
  4046ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4046f2:	bd70      	pop	{r4, r5, r6, pc}
  4046f4:	f1c4 040c 	rsb	r4, r4, #12
  4046f8:	f1c4 0520 	rsb	r5, r4, #32
  4046fc:	fa00 f304 	lsl.w	r3, r0, r4
  404700:	fa20 f005 	lsr.w	r0, r0, r5
  404704:	fa01 f204 	lsl.w	r2, r1, r4
  404708:	ea40 0002 	orr.w	r0, r0, r2
  40470c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404714:	f141 0100 	adc.w	r1, r1, #0
  404718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40471c:	bf08      	it	eq
  40471e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404722:	bd70      	pop	{r4, r5, r6, pc}
  404724:	f1c4 0520 	rsb	r5, r4, #32
  404728:	fa00 f205 	lsl.w	r2, r0, r5
  40472c:	ea4e 0e02 	orr.w	lr, lr, r2
  404730:	fa20 f304 	lsr.w	r3, r0, r4
  404734:	fa01 f205 	lsl.w	r2, r1, r5
  404738:	ea43 0302 	orr.w	r3, r3, r2
  40473c:	fa21 f004 	lsr.w	r0, r1, r4
  404740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404744:	fa21 f204 	lsr.w	r2, r1, r4
  404748:	ea20 0002 	bic.w	r0, r0, r2
  40474c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  404750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404754:	bf08      	it	eq
  404756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40475a:	bd70      	pop	{r4, r5, r6, pc}
  40475c:	f094 0f00 	teq	r4, #0
  404760:	d10f      	bne.n	404782 <__aeabi_dmul+0x1c2>
  404762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  404766:	0040      	lsls	r0, r0, #1
  404768:	eb41 0101 	adc.w	r1, r1, r1
  40476c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404770:	bf08      	it	eq
  404772:	3c01      	subeq	r4, #1
  404774:	d0f7      	beq.n	404766 <__aeabi_dmul+0x1a6>
  404776:	ea41 0106 	orr.w	r1, r1, r6
  40477a:	f095 0f00 	teq	r5, #0
  40477e:	bf18      	it	ne
  404780:	4770      	bxne	lr
  404782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  404786:	0052      	lsls	r2, r2, #1
  404788:	eb43 0303 	adc.w	r3, r3, r3
  40478c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404790:	bf08      	it	eq
  404792:	3d01      	subeq	r5, #1
  404794:	d0f7      	beq.n	404786 <__aeabi_dmul+0x1c6>
  404796:	ea43 0306 	orr.w	r3, r3, r6
  40479a:	4770      	bx	lr
  40479c:	ea94 0f0c 	teq	r4, ip
  4047a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4047a4:	bf18      	it	ne
  4047a6:	ea95 0f0c 	teqne	r5, ip
  4047aa:	d00c      	beq.n	4047c6 <__aeabi_dmul+0x206>
  4047ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4047b0:	bf18      	it	ne
  4047b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4047b6:	d1d1      	bne.n	40475c <__aeabi_dmul+0x19c>
  4047b8:	ea81 0103 	eor.w	r1, r1, r3
  4047bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4047c0:	f04f 0000 	mov.w	r0, #0
  4047c4:	bd70      	pop	{r4, r5, r6, pc}
  4047c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4047ca:	bf06      	itte	eq
  4047cc:	4610      	moveq	r0, r2
  4047ce:	4619      	moveq	r1, r3
  4047d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4047d4:	d019      	beq.n	40480a <__aeabi_dmul+0x24a>
  4047d6:	ea94 0f0c 	teq	r4, ip
  4047da:	d102      	bne.n	4047e2 <__aeabi_dmul+0x222>
  4047dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4047e0:	d113      	bne.n	40480a <__aeabi_dmul+0x24a>
  4047e2:	ea95 0f0c 	teq	r5, ip
  4047e6:	d105      	bne.n	4047f4 <__aeabi_dmul+0x234>
  4047e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4047ec:	bf1c      	itt	ne
  4047ee:	4610      	movne	r0, r2
  4047f0:	4619      	movne	r1, r3
  4047f2:	d10a      	bne.n	40480a <__aeabi_dmul+0x24a>
  4047f4:	ea81 0103 	eor.w	r1, r1, r3
  4047f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4047fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404804:	f04f 0000 	mov.w	r0, #0
  404808:	bd70      	pop	{r4, r5, r6, pc}
  40480a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40480e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  404812:	bd70      	pop	{r4, r5, r6, pc}

00404814 <__aeabi_ddiv>:
  404814:	b570      	push	{r4, r5, r6, lr}
  404816:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40481a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40481e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404822:	bf1d      	ittte	ne
  404824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404828:	ea94 0f0c 	teqne	r4, ip
  40482c:	ea95 0f0c 	teqne	r5, ip
  404830:	f000 f8a7 	bleq	404982 <__aeabi_ddiv+0x16e>
  404834:	eba4 0405 	sub.w	r4, r4, r5
  404838:	ea81 0e03 	eor.w	lr, r1, r3
  40483c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404840:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404844:	f000 8088 	beq.w	404958 <__aeabi_ddiv+0x144>
  404848:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40484c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  404850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  404854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  404858:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40485c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  404860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  404864:	ea4f 2600 	mov.w	r6, r0, lsl #8
  404868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40486c:	429d      	cmp	r5, r3
  40486e:	bf08      	it	eq
  404870:	4296      	cmpeq	r6, r2
  404872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  404876:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40487a:	d202      	bcs.n	404882 <__aeabi_ddiv+0x6e>
  40487c:	085b      	lsrs	r3, r3, #1
  40487e:	ea4f 0232 	mov.w	r2, r2, rrx
  404882:	1ab6      	subs	r6, r6, r2
  404884:	eb65 0503 	sbc.w	r5, r5, r3
  404888:	085b      	lsrs	r3, r3, #1
  40488a:	ea4f 0232 	mov.w	r2, r2, rrx
  40488e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  404892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404896:	ebb6 0e02 	subs.w	lr, r6, r2
  40489a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40489e:	bf22      	ittt	cs
  4048a0:	1ab6      	subcs	r6, r6, r2
  4048a2:	4675      	movcs	r5, lr
  4048a4:	ea40 000c 	orrcs.w	r0, r0, ip
  4048a8:	085b      	lsrs	r3, r3, #1
  4048aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4048ae:	ebb6 0e02 	subs.w	lr, r6, r2
  4048b2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4048b6:	bf22      	ittt	cs
  4048b8:	1ab6      	subcs	r6, r6, r2
  4048ba:	4675      	movcs	r5, lr
  4048bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4048c0:	085b      	lsrs	r3, r3, #1
  4048c2:	ea4f 0232 	mov.w	r2, r2, rrx
  4048c6:	ebb6 0e02 	subs.w	lr, r6, r2
  4048ca:	eb75 0e03 	sbcs.w	lr, r5, r3
  4048ce:	bf22      	ittt	cs
  4048d0:	1ab6      	subcs	r6, r6, r2
  4048d2:	4675      	movcs	r5, lr
  4048d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4048d8:	085b      	lsrs	r3, r3, #1
  4048da:	ea4f 0232 	mov.w	r2, r2, rrx
  4048de:	ebb6 0e02 	subs.w	lr, r6, r2
  4048e2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4048e6:	bf22      	ittt	cs
  4048e8:	1ab6      	subcs	r6, r6, r2
  4048ea:	4675      	movcs	r5, lr
  4048ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4048f0:	ea55 0e06 	orrs.w	lr, r5, r6
  4048f4:	d018      	beq.n	404928 <__aeabi_ddiv+0x114>
  4048f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4048fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4048fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40490a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40490e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  404912:	d1c0      	bne.n	404896 <__aeabi_ddiv+0x82>
  404914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404918:	d10b      	bne.n	404932 <__aeabi_ddiv+0x11e>
  40491a:	ea41 0100 	orr.w	r1, r1, r0
  40491e:	f04f 0000 	mov.w	r0, #0
  404922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  404926:	e7b6      	b.n	404896 <__aeabi_ddiv+0x82>
  404928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40492c:	bf04      	itt	eq
  40492e:	4301      	orreq	r1, r0
  404930:	2000      	moveq	r0, #0
  404932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404936:	bf88      	it	hi
  404938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40493c:	f63f aeaf 	bhi.w	40469e <__aeabi_dmul+0xde>
  404940:	ebb5 0c03 	subs.w	ip, r5, r3
  404944:	bf04      	itt	eq
  404946:	ebb6 0c02 	subseq.w	ip, r6, r2
  40494a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40494e:	f150 0000 	adcs.w	r0, r0, #0
  404952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404956:	bd70      	pop	{r4, r5, r6, pc}
  404958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40495c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  404960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  404964:	bfc2      	ittt	gt
  404966:	ebd4 050c 	rsbsgt	r5, r4, ip
  40496a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40496e:	bd70      	popgt	{r4, r5, r6, pc}
  404970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404974:	f04f 0e00 	mov.w	lr, #0
  404978:	3c01      	subs	r4, #1
  40497a:	e690      	b.n	40469e <__aeabi_dmul+0xde>
  40497c:	ea45 0e06 	orr.w	lr, r5, r6
  404980:	e68d      	b.n	40469e <__aeabi_dmul+0xde>
  404982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404986:	ea94 0f0c 	teq	r4, ip
  40498a:	bf08      	it	eq
  40498c:	ea95 0f0c 	teqeq	r5, ip
  404990:	f43f af3b 	beq.w	40480a <__aeabi_dmul+0x24a>
  404994:	ea94 0f0c 	teq	r4, ip
  404998:	d10a      	bne.n	4049b0 <__aeabi_ddiv+0x19c>
  40499a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40499e:	f47f af34 	bne.w	40480a <__aeabi_dmul+0x24a>
  4049a2:	ea95 0f0c 	teq	r5, ip
  4049a6:	f47f af25 	bne.w	4047f4 <__aeabi_dmul+0x234>
  4049aa:	4610      	mov	r0, r2
  4049ac:	4619      	mov	r1, r3
  4049ae:	e72c      	b.n	40480a <__aeabi_dmul+0x24a>
  4049b0:	ea95 0f0c 	teq	r5, ip
  4049b4:	d106      	bne.n	4049c4 <__aeabi_ddiv+0x1b0>
  4049b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4049ba:	f43f aefd 	beq.w	4047b8 <__aeabi_dmul+0x1f8>
  4049be:	4610      	mov	r0, r2
  4049c0:	4619      	mov	r1, r3
  4049c2:	e722      	b.n	40480a <__aeabi_dmul+0x24a>
  4049c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4049c8:	bf18      	it	ne
  4049ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4049ce:	f47f aec5 	bne.w	40475c <__aeabi_dmul+0x19c>
  4049d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4049d6:	f47f af0d 	bne.w	4047f4 <__aeabi_dmul+0x234>
  4049da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4049de:	f47f aeeb 	bne.w	4047b8 <__aeabi_dmul+0x1f8>
  4049e2:	e712      	b.n	40480a <__aeabi_dmul+0x24a>

004049e4 <__gedf2>:
  4049e4:	f04f 3cff 	mov.w	ip, #4294967295
  4049e8:	e006      	b.n	4049f8 <__cmpdf2+0x4>
  4049ea:	bf00      	nop

004049ec <__ledf2>:
  4049ec:	f04f 0c01 	mov.w	ip, #1
  4049f0:	e002      	b.n	4049f8 <__cmpdf2+0x4>
  4049f2:	bf00      	nop

004049f4 <__cmpdf2>:
  4049f4:	f04f 0c01 	mov.w	ip, #1
  4049f8:	f84d cd04 	str.w	ip, [sp, #-4]!
  4049fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404a08:	bf18      	it	ne
  404a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  404a0e:	d01b      	beq.n	404a48 <__cmpdf2+0x54>
  404a10:	b001      	add	sp, #4
  404a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  404a16:	bf0c      	ite	eq
  404a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  404a1c:	ea91 0f03 	teqne	r1, r3
  404a20:	bf02      	ittt	eq
  404a22:	ea90 0f02 	teqeq	r0, r2
  404a26:	2000      	moveq	r0, #0
  404a28:	4770      	bxeq	lr
  404a2a:	f110 0f00 	cmn.w	r0, #0
  404a2e:	ea91 0f03 	teq	r1, r3
  404a32:	bf58      	it	pl
  404a34:	4299      	cmppl	r1, r3
  404a36:	bf08      	it	eq
  404a38:	4290      	cmpeq	r0, r2
  404a3a:	bf2c      	ite	cs
  404a3c:	17d8      	asrcs	r0, r3, #31
  404a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  404a42:	f040 0001 	orr.w	r0, r0, #1
  404a46:	4770      	bx	lr
  404a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404a50:	d102      	bne.n	404a58 <__cmpdf2+0x64>
  404a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404a56:	d107      	bne.n	404a68 <__cmpdf2+0x74>
  404a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404a60:	d1d6      	bne.n	404a10 <__cmpdf2+0x1c>
  404a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404a66:	d0d3      	beq.n	404a10 <__cmpdf2+0x1c>
  404a68:	f85d 0b04 	ldr.w	r0, [sp], #4
  404a6c:	4770      	bx	lr
  404a6e:	bf00      	nop

00404a70 <__aeabi_cdrcmple>:
  404a70:	4684      	mov	ip, r0
  404a72:	4610      	mov	r0, r2
  404a74:	4662      	mov	r2, ip
  404a76:	468c      	mov	ip, r1
  404a78:	4619      	mov	r1, r3
  404a7a:	4663      	mov	r3, ip
  404a7c:	e000      	b.n	404a80 <__aeabi_cdcmpeq>
  404a7e:	bf00      	nop

00404a80 <__aeabi_cdcmpeq>:
  404a80:	b501      	push	{r0, lr}
  404a82:	f7ff ffb7 	bl	4049f4 <__cmpdf2>
  404a86:	2800      	cmp	r0, #0
  404a88:	bf48      	it	mi
  404a8a:	f110 0f00 	cmnmi.w	r0, #0
  404a8e:	bd01      	pop	{r0, pc}

00404a90 <__aeabi_dcmpeq>:
  404a90:	f84d ed08 	str.w	lr, [sp, #-8]!
  404a94:	f7ff fff4 	bl	404a80 <__aeabi_cdcmpeq>
  404a98:	bf0c      	ite	eq
  404a9a:	2001      	moveq	r0, #1
  404a9c:	2000      	movne	r0, #0
  404a9e:	f85d fb08 	ldr.w	pc, [sp], #8
  404aa2:	bf00      	nop

00404aa4 <__aeabi_dcmplt>:
  404aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
  404aa8:	f7ff ffea 	bl	404a80 <__aeabi_cdcmpeq>
  404aac:	bf34      	ite	cc
  404aae:	2001      	movcc	r0, #1
  404ab0:	2000      	movcs	r0, #0
  404ab2:	f85d fb08 	ldr.w	pc, [sp], #8
  404ab6:	bf00      	nop

00404ab8 <__aeabi_dcmple>:
  404ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
  404abc:	f7ff ffe0 	bl	404a80 <__aeabi_cdcmpeq>
  404ac0:	bf94      	ite	ls
  404ac2:	2001      	movls	r0, #1
  404ac4:	2000      	movhi	r0, #0
  404ac6:	f85d fb08 	ldr.w	pc, [sp], #8
  404aca:	bf00      	nop

00404acc <__aeabi_dcmpge>:
  404acc:	f84d ed08 	str.w	lr, [sp, #-8]!
  404ad0:	f7ff ffce 	bl	404a70 <__aeabi_cdrcmple>
  404ad4:	bf94      	ite	ls
  404ad6:	2001      	movls	r0, #1
  404ad8:	2000      	movhi	r0, #0
  404ada:	f85d fb08 	ldr.w	pc, [sp], #8
  404ade:	bf00      	nop

00404ae0 <__aeabi_dcmpgt>:
  404ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
  404ae4:	f7ff ffc4 	bl	404a70 <__aeabi_cdrcmple>
  404ae8:	bf34      	ite	cc
  404aea:	2001      	movcc	r0, #1
  404aec:	2000      	movcs	r0, #0
  404aee:	f85d fb08 	ldr.w	pc, [sp], #8
  404af2:	bf00      	nop

00404af4 <__assert_func>:
  404af4:	b500      	push	{lr}
  404af6:	4c0a      	ldr	r4, [pc, #40]	; (404b20 <__assert_func+0x2c>)
  404af8:	6826      	ldr	r6, [r4, #0]
  404afa:	4605      	mov	r5, r0
  404afc:	b085      	sub	sp, #20
  404afe:	461c      	mov	r4, r3
  404b00:	68f0      	ldr	r0, [r6, #12]
  404b02:	b152      	cbz	r2, 404b1a <__assert_func+0x26>
  404b04:	4b07      	ldr	r3, [pc, #28]	; (404b24 <__assert_func+0x30>)
  404b06:	9202      	str	r2, [sp, #8]
  404b08:	e88d 000a 	stmia.w	sp, {r1, r3}
  404b0c:	4622      	mov	r2, r4
  404b0e:	462b      	mov	r3, r5
  404b10:	4905      	ldr	r1, [pc, #20]	; (404b28 <__assert_func+0x34>)
  404b12:	f000 f80d 	bl	404b30 <fiprintf>
  404b16:	f002 fcb1 	bl	40747c <abort>
  404b1a:	4b04      	ldr	r3, [pc, #16]	; (404b2c <__assert_func+0x38>)
  404b1c:	461a      	mov	r2, r3
  404b1e:	e7f2      	b.n	404b06 <__assert_func+0x12>
  404b20:	2040000c 	.word	0x2040000c
  404b24:	0040a9b8 	.word	0x0040a9b8
  404b28:	0040a9c8 	.word	0x0040a9c8
  404b2c:	0040a9c4 	.word	0x0040a9c4

00404b30 <fiprintf>:
  404b30:	b40e      	push	{r1, r2, r3}
  404b32:	b510      	push	{r4, lr}
  404b34:	b083      	sub	sp, #12
  404b36:	ab05      	add	r3, sp, #20
  404b38:	4c06      	ldr	r4, [pc, #24]	; (404b54 <fiprintf+0x24>)
  404b3a:	f853 2b04 	ldr.w	r2, [r3], #4
  404b3e:	9301      	str	r3, [sp, #4]
  404b40:	4601      	mov	r1, r0
  404b42:	6820      	ldr	r0, [r4, #0]
  404b44:	f000 fab4 	bl	4050b0 <_vfiprintf_r>
  404b48:	b003      	add	sp, #12
  404b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404b4e:	b003      	add	sp, #12
  404b50:	4770      	bx	lr
  404b52:	bf00      	nop
  404b54:	2040000c 	.word	0x2040000c

00404b58 <__libc_init_array>:
  404b58:	b570      	push	{r4, r5, r6, lr}
  404b5a:	4e0f      	ldr	r6, [pc, #60]	; (404b98 <__libc_init_array+0x40>)
  404b5c:	4d0f      	ldr	r5, [pc, #60]	; (404b9c <__libc_init_array+0x44>)
  404b5e:	1b76      	subs	r6, r6, r5
  404b60:	10b6      	asrs	r6, r6, #2
  404b62:	bf18      	it	ne
  404b64:	2400      	movne	r4, #0
  404b66:	d005      	beq.n	404b74 <__libc_init_array+0x1c>
  404b68:	3401      	adds	r4, #1
  404b6a:	f855 3b04 	ldr.w	r3, [r5], #4
  404b6e:	4798      	blx	r3
  404b70:	42a6      	cmp	r6, r4
  404b72:	d1f9      	bne.n	404b68 <__libc_init_array+0x10>
  404b74:	4e0a      	ldr	r6, [pc, #40]	; (404ba0 <__libc_init_array+0x48>)
  404b76:	4d0b      	ldr	r5, [pc, #44]	; (404ba4 <__libc_init_array+0x4c>)
  404b78:	1b76      	subs	r6, r6, r5
  404b7a:	f006 f891 	bl	40aca0 <_init>
  404b7e:	10b6      	asrs	r6, r6, #2
  404b80:	bf18      	it	ne
  404b82:	2400      	movne	r4, #0
  404b84:	d006      	beq.n	404b94 <__libc_init_array+0x3c>
  404b86:	3401      	adds	r4, #1
  404b88:	f855 3b04 	ldr.w	r3, [r5], #4
  404b8c:	4798      	blx	r3
  404b8e:	42a6      	cmp	r6, r4
  404b90:	d1f9      	bne.n	404b86 <__libc_init_array+0x2e>
  404b92:	bd70      	pop	{r4, r5, r6, pc}
  404b94:	bd70      	pop	{r4, r5, r6, pc}
  404b96:	bf00      	nop
  404b98:	0040acac 	.word	0x0040acac
  404b9c:	0040acac 	.word	0x0040acac
  404ba0:	0040acb4 	.word	0x0040acb4
  404ba4:	0040acac 	.word	0x0040acac

00404ba8 <memcpy>:
  404ba8:	4684      	mov	ip, r0
  404baa:	ea41 0300 	orr.w	r3, r1, r0
  404bae:	f013 0303 	ands.w	r3, r3, #3
  404bb2:	d16d      	bne.n	404c90 <memcpy+0xe8>
  404bb4:	3a40      	subs	r2, #64	; 0x40
  404bb6:	d341      	bcc.n	404c3c <memcpy+0x94>
  404bb8:	f851 3b04 	ldr.w	r3, [r1], #4
  404bbc:	f840 3b04 	str.w	r3, [r0], #4
  404bc0:	f851 3b04 	ldr.w	r3, [r1], #4
  404bc4:	f840 3b04 	str.w	r3, [r0], #4
  404bc8:	f851 3b04 	ldr.w	r3, [r1], #4
  404bcc:	f840 3b04 	str.w	r3, [r0], #4
  404bd0:	f851 3b04 	ldr.w	r3, [r1], #4
  404bd4:	f840 3b04 	str.w	r3, [r0], #4
  404bd8:	f851 3b04 	ldr.w	r3, [r1], #4
  404bdc:	f840 3b04 	str.w	r3, [r0], #4
  404be0:	f851 3b04 	ldr.w	r3, [r1], #4
  404be4:	f840 3b04 	str.w	r3, [r0], #4
  404be8:	f851 3b04 	ldr.w	r3, [r1], #4
  404bec:	f840 3b04 	str.w	r3, [r0], #4
  404bf0:	f851 3b04 	ldr.w	r3, [r1], #4
  404bf4:	f840 3b04 	str.w	r3, [r0], #4
  404bf8:	f851 3b04 	ldr.w	r3, [r1], #4
  404bfc:	f840 3b04 	str.w	r3, [r0], #4
  404c00:	f851 3b04 	ldr.w	r3, [r1], #4
  404c04:	f840 3b04 	str.w	r3, [r0], #4
  404c08:	f851 3b04 	ldr.w	r3, [r1], #4
  404c0c:	f840 3b04 	str.w	r3, [r0], #4
  404c10:	f851 3b04 	ldr.w	r3, [r1], #4
  404c14:	f840 3b04 	str.w	r3, [r0], #4
  404c18:	f851 3b04 	ldr.w	r3, [r1], #4
  404c1c:	f840 3b04 	str.w	r3, [r0], #4
  404c20:	f851 3b04 	ldr.w	r3, [r1], #4
  404c24:	f840 3b04 	str.w	r3, [r0], #4
  404c28:	f851 3b04 	ldr.w	r3, [r1], #4
  404c2c:	f840 3b04 	str.w	r3, [r0], #4
  404c30:	f851 3b04 	ldr.w	r3, [r1], #4
  404c34:	f840 3b04 	str.w	r3, [r0], #4
  404c38:	3a40      	subs	r2, #64	; 0x40
  404c3a:	d2bd      	bcs.n	404bb8 <memcpy+0x10>
  404c3c:	3230      	adds	r2, #48	; 0x30
  404c3e:	d311      	bcc.n	404c64 <memcpy+0xbc>
  404c40:	f851 3b04 	ldr.w	r3, [r1], #4
  404c44:	f840 3b04 	str.w	r3, [r0], #4
  404c48:	f851 3b04 	ldr.w	r3, [r1], #4
  404c4c:	f840 3b04 	str.w	r3, [r0], #4
  404c50:	f851 3b04 	ldr.w	r3, [r1], #4
  404c54:	f840 3b04 	str.w	r3, [r0], #4
  404c58:	f851 3b04 	ldr.w	r3, [r1], #4
  404c5c:	f840 3b04 	str.w	r3, [r0], #4
  404c60:	3a10      	subs	r2, #16
  404c62:	d2ed      	bcs.n	404c40 <memcpy+0x98>
  404c64:	320c      	adds	r2, #12
  404c66:	d305      	bcc.n	404c74 <memcpy+0xcc>
  404c68:	f851 3b04 	ldr.w	r3, [r1], #4
  404c6c:	f840 3b04 	str.w	r3, [r0], #4
  404c70:	3a04      	subs	r2, #4
  404c72:	d2f9      	bcs.n	404c68 <memcpy+0xc0>
  404c74:	3204      	adds	r2, #4
  404c76:	d008      	beq.n	404c8a <memcpy+0xe2>
  404c78:	07d2      	lsls	r2, r2, #31
  404c7a:	bf1c      	itt	ne
  404c7c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404c80:	f800 3b01 	strbne.w	r3, [r0], #1
  404c84:	d301      	bcc.n	404c8a <memcpy+0xe2>
  404c86:	880b      	ldrh	r3, [r1, #0]
  404c88:	8003      	strh	r3, [r0, #0]
  404c8a:	4660      	mov	r0, ip
  404c8c:	4770      	bx	lr
  404c8e:	bf00      	nop
  404c90:	2a08      	cmp	r2, #8
  404c92:	d313      	bcc.n	404cbc <memcpy+0x114>
  404c94:	078b      	lsls	r3, r1, #30
  404c96:	d08d      	beq.n	404bb4 <memcpy+0xc>
  404c98:	f010 0303 	ands.w	r3, r0, #3
  404c9c:	d08a      	beq.n	404bb4 <memcpy+0xc>
  404c9e:	f1c3 0304 	rsb	r3, r3, #4
  404ca2:	1ad2      	subs	r2, r2, r3
  404ca4:	07db      	lsls	r3, r3, #31
  404ca6:	bf1c      	itt	ne
  404ca8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404cac:	f800 3b01 	strbne.w	r3, [r0], #1
  404cb0:	d380      	bcc.n	404bb4 <memcpy+0xc>
  404cb2:	f831 3b02 	ldrh.w	r3, [r1], #2
  404cb6:	f820 3b02 	strh.w	r3, [r0], #2
  404cba:	e77b      	b.n	404bb4 <memcpy+0xc>
  404cbc:	3a04      	subs	r2, #4
  404cbe:	d3d9      	bcc.n	404c74 <memcpy+0xcc>
  404cc0:	3a01      	subs	r2, #1
  404cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
  404cc6:	f800 3b01 	strb.w	r3, [r0], #1
  404cca:	d2f9      	bcs.n	404cc0 <memcpy+0x118>
  404ccc:	780b      	ldrb	r3, [r1, #0]
  404cce:	7003      	strb	r3, [r0, #0]
  404cd0:	784b      	ldrb	r3, [r1, #1]
  404cd2:	7043      	strb	r3, [r0, #1]
  404cd4:	788b      	ldrb	r3, [r1, #2]
  404cd6:	7083      	strb	r3, [r0, #2]
  404cd8:	4660      	mov	r0, ip
  404cda:	4770      	bx	lr

00404cdc <memset>:
  404cdc:	b470      	push	{r4, r5, r6}
  404cde:	0786      	lsls	r6, r0, #30
  404ce0:	d046      	beq.n	404d70 <memset+0x94>
  404ce2:	1e54      	subs	r4, r2, #1
  404ce4:	2a00      	cmp	r2, #0
  404ce6:	d041      	beq.n	404d6c <memset+0x90>
  404ce8:	b2ca      	uxtb	r2, r1
  404cea:	4603      	mov	r3, r0
  404cec:	e002      	b.n	404cf4 <memset+0x18>
  404cee:	f114 34ff 	adds.w	r4, r4, #4294967295
  404cf2:	d33b      	bcc.n	404d6c <memset+0x90>
  404cf4:	f803 2b01 	strb.w	r2, [r3], #1
  404cf8:	079d      	lsls	r5, r3, #30
  404cfa:	d1f8      	bne.n	404cee <memset+0x12>
  404cfc:	2c03      	cmp	r4, #3
  404cfe:	d92e      	bls.n	404d5e <memset+0x82>
  404d00:	b2cd      	uxtb	r5, r1
  404d02:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404d06:	2c0f      	cmp	r4, #15
  404d08:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404d0c:	d919      	bls.n	404d42 <memset+0x66>
  404d0e:	f103 0210 	add.w	r2, r3, #16
  404d12:	4626      	mov	r6, r4
  404d14:	3e10      	subs	r6, #16
  404d16:	2e0f      	cmp	r6, #15
  404d18:	f842 5c10 	str.w	r5, [r2, #-16]
  404d1c:	f842 5c0c 	str.w	r5, [r2, #-12]
  404d20:	f842 5c08 	str.w	r5, [r2, #-8]
  404d24:	f842 5c04 	str.w	r5, [r2, #-4]
  404d28:	f102 0210 	add.w	r2, r2, #16
  404d2c:	d8f2      	bhi.n	404d14 <memset+0x38>
  404d2e:	f1a4 0210 	sub.w	r2, r4, #16
  404d32:	f022 020f 	bic.w	r2, r2, #15
  404d36:	f004 040f 	and.w	r4, r4, #15
  404d3a:	3210      	adds	r2, #16
  404d3c:	2c03      	cmp	r4, #3
  404d3e:	4413      	add	r3, r2
  404d40:	d90d      	bls.n	404d5e <memset+0x82>
  404d42:	461e      	mov	r6, r3
  404d44:	4622      	mov	r2, r4
  404d46:	3a04      	subs	r2, #4
  404d48:	2a03      	cmp	r2, #3
  404d4a:	f846 5b04 	str.w	r5, [r6], #4
  404d4e:	d8fa      	bhi.n	404d46 <memset+0x6a>
  404d50:	1f22      	subs	r2, r4, #4
  404d52:	f022 0203 	bic.w	r2, r2, #3
  404d56:	3204      	adds	r2, #4
  404d58:	4413      	add	r3, r2
  404d5a:	f004 0403 	and.w	r4, r4, #3
  404d5e:	b12c      	cbz	r4, 404d6c <memset+0x90>
  404d60:	b2c9      	uxtb	r1, r1
  404d62:	441c      	add	r4, r3
  404d64:	f803 1b01 	strb.w	r1, [r3], #1
  404d68:	429c      	cmp	r4, r3
  404d6a:	d1fb      	bne.n	404d64 <memset+0x88>
  404d6c:	bc70      	pop	{r4, r5, r6}
  404d6e:	4770      	bx	lr
  404d70:	4614      	mov	r4, r2
  404d72:	4603      	mov	r3, r0
  404d74:	e7c2      	b.n	404cfc <memset+0x20>
  404d76:	bf00      	nop

00404d78 <printf>:
  404d78:	b40f      	push	{r0, r1, r2, r3}
  404d7a:	b500      	push	{lr}
  404d7c:	4907      	ldr	r1, [pc, #28]	; (404d9c <printf+0x24>)
  404d7e:	b083      	sub	sp, #12
  404d80:	ab04      	add	r3, sp, #16
  404d82:	6808      	ldr	r0, [r1, #0]
  404d84:	f853 2b04 	ldr.w	r2, [r3], #4
  404d88:	6881      	ldr	r1, [r0, #8]
  404d8a:	9301      	str	r3, [sp, #4]
  404d8c:	f001 f81a 	bl	405dc4 <_vfprintf_r>
  404d90:	b003      	add	sp, #12
  404d92:	f85d eb04 	ldr.w	lr, [sp], #4
  404d96:	b004      	add	sp, #16
  404d98:	4770      	bx	lr
  404d9a:	bf00      	nop
  404d9c:	2040000c 	.word	0x2040000c

00404da0 <setvbuf>:
  404da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404da4:	4c61      	ldr	r4, [pc, #388]	; (404f2c <setvbuf+0x18c>)
  404da6:	6825      	ldr	r5, [r4, #0]
  404da8:	b083      	sub	sp, #12
  404daa:	4604      	mov	r4, r0
  404dac:	460f      	mov	r7, r1
  404dae:	4690      	mov	r8, r2
  404db0:	461e      	mov	r6, r3
  404db2:	b115      	cbz	r5, 404dba <setvbuf+0x1a>
  404db4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404db6:	2b00      	cmp	r3, #0
  404db8:	d064      	beq.n	404e84 <setvbuf+0xe4>
  404dba:	f1b8 0f02 	cmp.w	r8, #2
  404dbe:	d006      	beq.n	404dce <setvbuf+0x2e>
  404dc0:	f1b8 0f01 	cmp.w	r8, #1
  404dc4:	f200 809f 	bhi.w	404f06 <setvbuf+0x166>
  404dc8:	2e00      	cmp	r6, #0
  404dca:	f2c0 809c 	blt.w	404f06 <setvbuf+0x166>
  404dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404dd0:	07d8      	lsls	r0, r3, #31
  404dd2:	d534      	bpl.n	404e3e <setvbuf+0x9e>
  404dd4:	4621      	mov	r1, r4
  404dd6:	4628      	mov	r0, r5
  404dd8:	f003 fbbc 	bl	408554 <_fflush_r>
  404ddc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404dde:	b141      	cbz	r1, 404df2 <setvbuf+0x52>
  404de0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404de4:	4299      	cmp	r1, r3
  404de6:	d002      	beq.n	404dee <setvbuf+0x4e>
  404de8:	4628      	mov	r0, r5
  404dea:	f003 fd31 	bl	408850 <_free_r>
  404dee:	2300      	movs	r3, #0
  404df0:	6323      	str	r3, [r4, #48]	; 0x30
  404df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404df6:	2200      	movs	r2, #0
  404df8:	61a2      	str	r2, [r4, #24]
  404dfa:	6062      	str	r2, [r4, #4]
  404dfc:	061a      	lsls	r2, r3, #24
  404dfe:	d43a      	bmi.n	404e76 <setvbuf+0xd6>
  404e00:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404e04:	f023 0303 	bic.w	r3, r3, #3
  404e08:	f1b8 0f02 	cmp.w	r8, #2
  404e0c:	81a3      	strh	r3, [r4, #12]
  404e0e:	d01d      	beq.n	404e4c <setvbuf+0xac>
  404e10:	ab01      	add	r3, sp, #4
  404e12:	466a      	mov	r2, sp
  404e14:	4621      	mov	r1, r4
  404e16:	4628      	mov	r0, r5
  404e18:	f003 ffc6 	bl	408da8 <__swhatbuf_r>
  404e1c:	89a3      	ldrh	r3, [r4, #12]
  404e1e:	4318      	orrs	r0, r3
  404e20:	81a0      	strh	r0, [r4, #12]
  404e22:	2e00      	cmp	r6, #0
  404e24:	d132      	bne.n	404e8c <setvbuf+0xec>
  404e26:	9e00      	ldr	r6, [sp, #0]
  404e28:	4630      	mov	r0, r6
  404e2a:	f004 f835 	bl	408e98 <malloc>
  404e2e:	4607      	mov	r7, r0
  404e30:	2800      	cmp	r0, #0
  404e32:	d06b      	beq.n	404f0c <setvbuf+0x16c>
  404e34:	89a3      	ldrh	r3, [r4, #12]
  404e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404e3a:	81a3      	strh	r3, [r4, #12]
  404e3c:	e028      	b.n	404e90 <setvbuf+0xf0>
  404e3e:	89a3      	ldrh	r3, [r4, #12]
  404e40:	0599      	lsls	r1, r3, #22
  404e42:	d4c7      	bmi.n	404dd4 <setvbuf+0x34>
  404e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404e46:	f003 ffab 	bl	408da0 <__retarget_lock_acquire_recursive>
  404e4a:	e7c3      	b.n	404dd4 <setvbuf+0x34>
  404e4c:	2500      	movs	r5, #0
  404e4e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404e50:	2600      	movs	r6, #0
  404e52:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404e56:	f043 0302 	orr.w	r3, r3, #2
  404e5a:	2001      	movs	r0, #1
  404e5c:	60a6      	str	r6, [r4, #8]
  404e5e:	07ce      	lsls	r6, r1, #31
  404e60:	81a3      	strh	r3, [r4, #12]
  404e62:	6022      	str	r2, [r4, #0]
  404e64:	6122      	str	r2, [r4, #16]
  404e66:	6160      	str	r0, [r4, #20]
  404e68:	d401      	bmi.n	404e6e <setvbuf+0xce>
  404e6a:	0598      	lsls	r0, r3, #22
  404e6c:	d53e      	bpl.n	404eec <setvbuf+0x14c>
  404e6e:	4628      	mov	r0, r5
  404e70:	b003      	add	sp, #12
  404e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404e76:	6921      	ldr	r1, [r4, #16]
  404e78:	4628      	mov	r0, r5
  404e7a:	f003 fce9 	bl	408850 <_free_r>
  404e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e82:	e7bd      	b.n	404e00 <setvbuf+0x60>
  404e84:	4628      	mov	r0, r5
  404e86:	f003 fbbd 	bl	408604 <__sinit>
  404e8a:	e796      	b.n	404dba <setvbuf+0x1a>
  404e8c:	2f00      	cmp	r7, #0
  404e8e:	d0cb      	beq.n	404e28 <setvbuf+0x88>
  404e90:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404e92:	2b00      	cmp	r3, #0
  404e94:	d033      	beq.n	404efe <setvbuf+0x15e>
  404e96:	9b00      	ldr	r3, [sp, #0]
  404e98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404e9c:	6027      	str	r7, [r4, #0]
  404e9e:	429e      	cmp	r6, r3
  404ea0:	bf1c      	itt	ne
  404ea2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404ea6:	81a2      	strhne	r2, [r4, #12]
  404ea8:	f1b8 0f01 	cmp.w	r8, #1
  404eac:	bf04      	itt	eq
  404eae:	f042 0201 	orreq.w	r2, r2, #1
  404eb2:	81a2      	strheq	r2, [r4, #12]
  404eb4:	b292      	uxth	r2, r2
  404eb6:	f012 0308 	ands.w	r3, r2, #8
  404eba:	6127      	str	r7, [r4, #16]
  404ebc:	6166      	str	r6, [r4, #20]
  404ebe:	d00e      	beq.n	404ede <setvbuf+0x13e>
  404ec0:	07d1      	lsls	r1, r2, #31
  404ec2:	d51a      	bpl.n	404efa <setvbuf+0x15a>
  404ec4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404ec6:	4276      	negs	r6, r6
  404ec8:	2300      	movs	r3, #0
  404eca:	f015 0501 	ands.w	r5, r5, #1
  404ece:	61a6      	str	r6, [r4, #24]
  404ed0:	60a3      	str	r3, [r4, #8]
  404ed2:	d009      	beq.n	404ee8 <setvbuf+0x148>
  404ed4:	2500      	movs	r5, #0
  404ed6:	4628      	mov	r0, r5
  404ed8:	b003      	add	sp, #12
  404eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404ede:	60a3      	str	r3, [r4, #8]
  404ee0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404ee2:	f015 0501 	ands.w	r5, r5, #1
  404ee6:	d1f5      	bne.n	404ed4 <setvbuf+0x134>
  404ee8:	0593      	lsls	r3, r2, #22
  404eea:	d4c0      	bmi.n	404e6e <setvbuf+0xce>
  404eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404eee:	f003 ff59 	bl	408da4 <__retarget_lock_release_recursive>
  404ef2:	4628      	mov	r0, r5
  404ef4:	b003      	add	sp, #12
  404ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404efa:	60a6      	str	r6, [r4, #8]
  404efc:	e7f0      	b.n	404ee0 <setvbuf+0x140>
  404efe:	4628      	mov	r0, r5
  404f00:	f003 fb80 	bl	408604 <__sinit>
  404f04:	e7c7      	b.n	404e96 <setvbuf+0xf6>
  404f06:	f04f 35ff 	mov.w	r5, #4294967295
  404f0a:	e7b0      	b.n	404e6e <setvbuf+0xce>
  404f0c:	f8dd 9000 	ldr.w	r9, [sp]
  404f10:	45b1      	cmp	r9, r6
  404f12:	d004      	beq.n	404f1e <setvbuf+0x17e>
  404f14:	4648      	mov	r0, r9
  404f16:	f003 ffbf 	bl	408e98 <malloc>
  404f1a:	4607      	mov	r7, r0
  404f1c:	b920      	cbnz	r0, 404f28 <setvbuf+0x188>
  404f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f22:	f04f 35ff 	mov.w	r5, #4294967295
  404f26:	e792      	b.n	404e4e <setvbuf+0xae>
  404f28:	464e      	mov	r6, r9
  404f2a:	e783      	b.n	404e34 <setvbuf+0x94>
  404f2c:	2040000c 	.word	0x2040000c
	...

00404f40 <strlen>:
  404f40:	f890 f000 	pld	[r0]
  404f44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404f48:	f020 0107 	bic.w	r1, r0, #7
  404f4c:	f06f 0c00 	mvn.w	ip, #0
  404f50:	f010 0407 	ands.w	r4, r0, #7
  404f54:	f891 f020 	pld	[r1, #32]
  404f58:	f040 8049 	bne.w	404fee <strlen+0xae>
  404f5c:	f04f 0400 	mov.w	r4, #0
  404f60:	f06f 0007 	mvn.w	r0, #7
  404f64:	e9d1 2300 	ldrd	r2, r3, [r1]
  404f68:	f891 f040 	pld	[r1, #64]	; 0x40
  404f6c:	f100 0008 	add.w	r0, r0, #8
  404f70:	fa82 f24c 	uadd8	r2, r2, ip
  404f74:	faa4 f28c 	sel	r2, r4, ip
  404f78:	fa83 f34c 	uadd8	r3, r3, ip
  404f7c:	faa2 f38c 	sel	r3, r2, ip
  404f80:	bb4b      	cbnz	r3, 404fd6 <strlen+0x96>
  404f82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404f86:	fa82 f24c 	uadd8	r2, r2, ip
  404f8a:	f100 0008 	add.w	r0, r0, #8
  404f8e:	faa4 f28c 	sel	r2, r4, ip
  404f92:	fa83 f34c 	uadd8	r3, r3, ip
  404f96:	faa2 f38c 	sel	r3, r2, ip
  404f9a:	b9e3      	cbnz	r3, 404fd6 <strlen+0x96>
  404f9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404fa0:	fa82 f24c 	uadd8	r2, r2, ip
  404fa4:	f100 0008 	add.w	r0, r0, #8
  404fa8:	faa4 f28c 	sel	r2, r4, ip
  404fac:	fa83 f34c 	uadd8	r3, r3, ip
  404fb0:	faa2 f38c 	sel	r3, r2, ip
  404fb4:	b97b      	cbnz	r3, 404fd6 <strlen+0x96>
  404fb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404fba:	f101 0120 	add.w	r1, r1, #32
  404fbe:	fa82 f24c 	uadd8	r2, r2, ip
  404fc2:	f100 0008 	add.w	r0, r0, #8
  404fc6:	faa4 f28c 	sel	r2, r4, ip
  404fca:	fa83 f34c 	uadd8	r3, r3, ip
  404fce:	faa2 f38c 	sel	r3, r2, ip
  404fd2:	2b00      	cmp	r3, #0
  404fd4:	d0c6      	beq.n	404f64 <strlen+0x24>
  404fd6:	2a00      	cmp	r2, #0
  404fd8:	bf04      	itt	eq
  404fda:	3004      	addeq	r0, #4
  404fdc:	461a      	moveq	r2, r3
  404fde:	ba12      	rev	r2, r2
  404fe0:	fab2 f282 	clz	r2, r2
  404fe4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404fe8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404fec:	4770      	bx	lr
  404fee:	e9d1 2300 	ldrd	r2, r3, [r1]
  404ff2:	f004 0503 	and.w	r5, r4, #3
  404ff6:	f1c4 0000 	rsb	r0, r4, #0
  404ffa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404ffe:	f014 0f04 	tst.w	r4, #4
  405002:	f891 f040 	pld	[r1, #64]	; 0x40
  405006:	fa0c f505 	lsl.w	r5, ip, r5
  40500a:	ea62 0205 	orn	r2, r2, r5
  40500e:	bf1c      	itt	ne
  405010:	ea63 0305 	ornne	r3, r3, r5
  405014:	4662      	movne	r2, ip
  405016:	f04f 0400 	mov.w	r4, #0
  40501a:	e7a9      	b.n	404f70 <strlen+0x30>

0040501c <__sprint_r.part.0>:
  40501c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405020:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  405022:	049c      	lsls	r4, r3, #18
  405024:	4693      	mov	fp, r2
  405026:	d52f      	bpl.n	405088 <__sprint_r.part.0+0x6c>
  405028:	6893      	ldr	r3, [r2, #8]
  40502a:	6812      	ldr	r2, [r2, #0]
  40502c:	b353      	cbz	r3, 405084 <__sprint_r.part.0+0x68>
  40502e:	460e      	mov	r6, r1
  405030:	4607      	mov	r7, r0
  405032:	f102 0908 	add.w	r9, r2, #8
  405036:	e919 0420 	ldmdb	r9, {r5, sl}
  40503a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40503e:	d017      	beq.n	405070 <__sprint_r.part.0+0x54>
  405040:	3d04      	subs	r5, #4
  405042:	2400      	movs	r4, #0
  405044:	e001      	b.n	40504a <__sprint_r.part.0+0x2e>
  405046:	45a0      	cmp	r8, r4
  405048:	d010      	beq.n	40506c <__sprint_r.part.0+0x50>
  40504a:	4632      	mov	r2, r6
  40504c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405050:	4638      	mov	r0, r7
  405052:	f003 fb79 	bl	408748 <_fputwc_r>
  405056:	1c43      	adds	r3, r0, #1
  405058:	f104 0401 	add.w	r4, r4, #1
  40505c:	d1f3      	bne.n	405046 <__sprint_r.part.0+0x2a>
  40505e:	2300      	movs	r3, #0
  405060:	f8cb 3008 	str.w	r3, [fp, #8]
  405064:	f8cb 3004 	str.w	r3, [fp, #4]
  405068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40506c:	f8db 3008 	ldr.w	r3, [fp, #8]
  405070:	f02a 0a03 	bic.w	sl, sl, #3
  405074:	eba3 030a 	sub.w	r3, r3, sl
  405078:	f8cb 3008 	str.w	r3, [fp, #8]
  40507c:	f109 0908 	add.w	r9, r9, #8
  405080:	2b00      	cmp	r3, #0
  405082:	d1d8      	bne.n	405036 <__sprint_r.part.0+0x1a>
  405084:	2000      	movs	r0, #0
  405086:	e7ea      	b.n	40505e <__sprint_r.part.0+0x42>
  405088:	f003 fcc8 	bl	408a1c <__sfvwrite_r>
  40508c:	2300      	movs	r3, #0
  40508e:	f8cb 3008 	str.w	r3, [fp, #8]
  405092:	f8cb 3004 	str.w	r3, [fp, #4]
  405096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40509a:	bf00      	nop

0040509c <__sprint_r>:
  40509c:	6893      	ldr	r3, [r2, #8]
  40509e:	b10b      	cbz	r3, 4050a4 <__sprint_r+0x8>
  4050a0:	f7ff bfbc 	b.w	40501c <__sprint_r.part.0>
  4050a4:	b410      	push	{r4}
  4050a6:	4618      	mov	r0, r3
  4050a8:	6053      	str	r3, [r2, #4]
  4050aa:	bc10      	pop	{r4}
  4050ac:	4770      	bx	lr
  4050ae:	bf00      	nop

004050b0 <_vfiprintf_r>:
  4050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050b4:	b0ad      	sub	sp, #180	; 0xb4
  4050b6:	461d      	mov	r5, r3
  4050b8:	468b      	mov	fp, r1
  4050ba:	4690      	mov	r8, r2
  4050bc:	9307      	str	r3, [sp, #28]
  4050be:	9006      	str	r0, [sp, #24]
  4050c0:	b118      	cbz	r0, 4050ca <_vfiprintf_r+0x1a>
  4050c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4050c4:	2b00      	cmp	r3, #0
  4050c6:	f000 80f3 	beq.w	4052b0 <_vfiprintf_r+0x200>
  4050ca:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4050ce:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4050d2:	07df      	lsls	r7, r3, #31
  4050d4:	b281      	uxth	r1, r0
  4050d6:	d402      	bmi.n	4050de <_vfiprintf_r+0x2e>
  4050d8:	058e      	lsls	r6, r1, #22
  4050da:	f140 80fc 	bpl.w	4052d6 <_vfiprintf_r+0x226>
  4050de:	048c      	lsls	r4, r1, #18
  4050e0:	d40a      	bmi.n	4050f8 <_vfiprintf_r+0x48>
  4050e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4050e6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4050ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4050ee:	f8ab 100c 	strh.w	r1, [fp, #12]
  4050f2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4050f6:	b289      	uxth	r1, r1
  4050f8:	0708      	lsls	r0, r1, #28
  4050fa:	f140 80b3 	bpl.w	405264 <_vfiprintf_r+0x1b4>
  4050fe:	f8db 3010 	ldr.w	r3, [fp, #16]
  405102:	2b00      	cmp	r3, #0
  405104:	f000 80ae 	beq.w	405264 <_vfiprintf_r+0x1b4>
  405108:	f001 031a 	and.w	r3, r1, #26
  40510c:	2b0a      	cmp	r3, #10
  40510e:	f000 80b5 	beq.w	40527c <_vfiprintf_r+0x1cc>
  405112:	2300      	movs	r3, #0
  405114:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405118:	930b      	str	r3, [sp, #44]	; 0x2c
  40511a:	9311      	str	r3, [sp, #68]	; 0x44
  40511c:	9310      	str	r3, [sp, #64]	; 0x40
  40511e:	9303      	str	r3, [sp, #12]
  405120:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405124:	46ca      	mov	sl, r9
  405126:	f8cd b010 	str.w	fp, [sp, #16]
  40512a:	f898 3000 	ldrb.w	r3, [r8]
  40512e:	4644      	mov	r4, r8
  405130:	b1fb      	cbz	r3, 405172 <_vfiprintf_r+0xc2>
  405132:	2b25      	cmp	r3, #37	; 0x25
  405134:	d102      	bne.n	40513c <_vfiprintf_r+0x8c>
  405136:	e01c      	b.n	405172 <_vfiprintf_r+0xc2>
  405138:	2b25      	cmp	r3, #37	; 0x25
  40513a:	d003      	beq.n	405144 <_vfiprintf_r+0x94>
  40513c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405140:	2b00      	cmp	r3, #0
  405142:	d1f9      	bne.n	405138 <_vfiprintf_r+0x88>
  405144:	eba4 0508 	sub.w	r5, r4, r8
  405148:	b19d      	cbz	r5, 405172 <_vfiprintf_r+0xc2>
  40514a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40514c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40514e:	f8ca 8000 	str.w	r8, [sl]
  405152:	3301      	adds	r3, #1
  405154:	442a      	add	r2, r5
  405156:	2b07      	cmp	r3, #7
  405158:	f8ca 5004 	str.w	r5, [sl, #4]
  40515c:	9211      	str	r2, [sp, #68]	; 0x44
  40515e:	9310      	str	r3, [sp, #64]	; 0x40
  405160:	dd7a      	ble.n	405258 <_vfiprintf_r+0x1a8>
  405162:	2a00      	cmp	r2, #0
  405164:	f040 84b0 	bne.w	405ac8 <_vfiprintf_r+0xa18>
  405168:	9b03      	ldr	r3, [sp, #12]
  40516a:	9210      	str	r2, [sp, #64]	; 0x40
  40516c:	442b      	add	r3, r5
  40516e:	46ca      	mov	sl, r9
  405170:	9303      	str	r3, [sp, #12]
  405172:	7823      	ldrb	r3, [r4, #0]
  405174:	2b00      	cmp	r3, #0
  405176:	f000 83e0 	beq.w	40593a <_vfiprintf_r+0x88a>
  40517a:	2000      	movs	r0, #0
  40517c:	f04f 0300 	mov.w	r3, #0
  405180:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405184:	f104 0801 	add.w	r8, r4, #1
  405188:	7862      	ldrb	r2, [r4, #1]
  40518a:	4605      	mov	r5, r0
  40518c:	4606      	mov	r6, r0
  40518e:	4603      	mov	r3, r0
  405190:	f04f 34ff 	mov.w	r4, #4294967295
  405194:	f108 0801 	add.w	r8, r8, #1
  405198:	f1a2 0120 	sub.w	r1, r2, #32
  40519c:	2958      	cmp	r1, #88	; 0x58
  40519e:	f200 82de 	bhi.w	40575e <_vfiprintf_r+0x6ae>
  4051a2:	e8df f011 	tbh	[pc, r1, lsl #1]
  4051a6:	0221      	.short	0x0221
  4051a8:	02dc02dc 	.word	0x02dc02dc
  4051ac:	02dc0229 	.word	0x02dc0229
  4051b0:	02dc02dc 	.word	0x02dc02dc
  4051b4:	02dc02dc 	.word	0x02dc02dc
  4051b8:	028902dc 	.word	0x028902dc
  4051bc:	02dc0295 	.word	0x02dc0295
  4051c0:	02bd00a2 	.word	0x02bd00a2
  4051c4:	019f02dc 	.word	0x019f02dc
  4051c8:	01a401a4 	.word	0x01a401a4
  4051cc:	01a401a4 	.word	0x01a401a4
  4051d0:	01a401a4 	.word	0x01a401a4
  4051d4:	01a401a4 	.word	0x01a401a4
  4051d8:	02dc01a4 	.word	0x02dc01a4
  4051dc:	02dc02dc 	.word	0x02dc02dc
  4051e0:	02dc02dc 	.word	0x02dc02dc
  4051e4:	02dc02dc 	.word	0x02dc02dc
  4051e8:	02dc02dc 	.word	0x02dc02dc
  4051ec:	01b202dc 	.word	0x01b202dc
  4051f0:	02dc02dc 	.word	0x02dc02dc
  4051f4:	02dc02dc 	.word	0x02dc02dc
  4051f8:	02dc02dc 	.word	0x02dc02dc
  4051fc:	02dc02dc 	.word	0x02dc02dc
  405200:	02dc02dc 	.word	0x02dc02dc
  405204:	02dc0197 	.word	0x02dc0197
  405208:	02dc02dc 	.word	0x02dc02dc
  40520c:	02dc02dc 	.word	0x02dc02dc
  405210:	02dc019b 	.word	0x02dc019b
  405214:	025302dc 	.word	0x025302dc
  405218:	02dc02dc 	.word	0x02dc02dc
  40521c:	02dc02dc 	.word	0x02dc02dc
  405220:	02dc02dc 	.word	0x02dc02dc
  405224:	02dc02dc 	.word	0x02dc02dc
  405228:	02dc02dc 	.word	0x02dc02dc
  40522c:	021b025a 	.word	0x021b025a
  405230:	02dc02dc 	.word	0x02dc02dc
  405234:	026e02dc 	.word	0x026e02dc
  405238:	02dc021b 	.word	0x02dc021b
  40523c:	027302dc 	.word	0x027302dc
  405240:	01f502dc 	.word	0x01f502dc
  405244:	02090182 	.word	0x02090182
  405248:	02dc02d7 	.word	0x02dc02d7
  40524c:	02dc029a 	.word	0x02dc029a
  405250:	02dc00a7 	.word	0x02dc00a7
  405254:	022e02dc 	.word	0x022e02dc
  405258:	f10a 0a08 	add.w	sl, sl, #8
  40525c:	9b03      	ldr	r3, [sp, #12]
  40525e:	442b      	add	r3, r5
  405260:	9303      	str	r3, [sp, #12]
  405262:	e786      	b.n	405172 <_vfiprintf_r+0xc2>
  405264:	4659      	mov	r1, fp
  405266:	9806      	ldr	r0, [sp, #24]
  405268:	f002 f89a 	bl	4073a0 <__swsetup_r>
  40526c:	bb18      	cbnz	r0, 4052b6 <_vfiprintf_r+0x206>
  40526e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  405272:	f001 031a 	and.w	r3, r1, #26
  405276:	2b0a      	cmp	r3, #10
  405278:	f47f af4b 	bne.w	405112 <_vfiprintf_r+0x62>
  40527c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  405280:	2b00      	cmp	r3, #0
  405282:	f6ff af46 	blt.w	405112 <_vfiprintf_r+0x62>
  405286:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40528a:	07db      	lsls	r3, r3, #31
  40528c:	d405      	bmi.n	40529a <_vfiprintf_r+0x1ea>
  40528e:	058f      	lsls	r7, r1, #22
  405290:	d403      	bmi.n	40529a <_vfiprintf_r+0x1ea>
  405292:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405296:	f003 fd85 	bl	408da4 <__retarget_lock_release_recursive>
  40529a:	462b      	mov	r3, r5
  40529c:	4642      	mov	r2, r8
  40529e:	4659      	mov	r1, fp
  4052a0:	9806      	ldr	r0, [sp, #24]
  4052a2:	f000 fd4d 	bl	405d40 <__sbprintf>
  4052a6:	9003      	str	r0, [sp, #12]
  4052a8:	9803      	ldr	r0, [sp, #12]
  4052aa:	b02d      	add	sp, #180	; 0xb4
  4052ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052b0:	f003 f9a8 	bl	408604 <__sinit>
  4052b4:	e709      	b.n	4050ca <_vfiprintf_r+0x1a>
  4052b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4052ba:	07d9      	lsls	r1, r3, #31
  4052bc:	d404      	bmi.n	4052c8 <_vfiprintf_r+0x218>
  4052be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4052c2:	059a      	lsls	r2, r3, #22
  4052c4:	f140 84aa 	bpl.w	405c1c <_vfiprintf_r+0xb6c>
  4052c8:	f04f 33ff 	mov.w	r3, #4294967295
  4052cc:	9303      	str	r3, [sp, #12]
  4052ce:	9803      	ldr	r0, [sp, #12]
  4052d0:	b02d      	add	sp, #180	; 0xb4
  4052d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052d6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4052da:	f003 fd61 	bl	408da0 <__retarget_lock_acquire_recursive>
  4052de:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4052e2:	b281      	uxth	r1, r0
  4052e4:	e6fb      	b.n	4050de <_vfiprintf_r+0x2e>
  4052e6:	4276      	negs	r6, r6
  4052e8:	9207      	str	r2, [sp, #28]
  4052ea:	f043 0304 	orr.w	r3, r3, #4
  4052ee:	f898 2000 	ldrb.w	r2, [r8]
  4052f2:	e74f      	b.n	405194 <_vfiprintf_r+0xe4>
  4052f4:	9608      	str	r6, [sp, #32]
  4052f6:	069e      	lsls	r6, r3, #26
  4052f8:	f100 8450 	bmi.w	405b9c <_vfiprintf_r+0xaec>
  4052fc:	9907      	ldr	r1, [sp, #28]
  4052fe:	06dd      	lsls	r5, r3, #27
  405300:	460a      	mov	r2, r1
  405302:	f100 83ef 	bmi.w	405ae4 <_vfiprintf_r+0xa34>
  405306:	0658      	lsls	r0, r3, #25
  405308:	f140 83ec 	bpl.w	405ae4 <_vfiprintf_r+0xa34>
  40530c:	880e      	ldrh	r6, [r1, #0]
  40530e:	3104      	adds	r1, #4
  405310:	2700      	movs	r7, #0
  405312:	2201      	movs	r2, #1
  405314:	9107      	str	r1, [sp, #28]
  405316:	f04f 0100 	mov.w	r1, #0
  40531a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40531e:	2500      	movs	r5, #0
  405320:	1c61      	adds	r1, r4, #1
  405322:	f000 8116 	beq.w	405552 <_vfiprintf_r+0x4a2>
  405326:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40532a:	9102      	str	r1, [sp, #8]
  40532c:	ea56 0107 	orrs.w	r1, r6, r7
  405330:	f040 8114 	bne.w	40555c <_vfiprintf_r+0x4ac>
  405334:	2c00      	cmp	r4, #0
  405336:	f040 835c 	bne.w	4059f2 <_vfiprintf_r+0x942>
  40533a:	2a00      	cmp	r2, #0
  40533c:	f040 83b7 	bne.w	405aae <_vfiprintf_r+0x9fe>
  405340:	f013 0301 	ands.w	r3, r3, #1
  405344:	9305      	str	r3, [sp, #20]
  405346:	f000 8457 	beq.w	405bf8 <_vfiprintf_r+0xb48>
  40534a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40534e:	2330      	movs	r3, #48	; 0x30
  405350:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  405354:	9b05      	ldr	r3, [sp, #20]
  405356:	42a3      	cmp	r3, r4
  405358:	bfb8      	it	lt
  40535a:	4623      	movlt	r3, r4
  40535c:	9301      	str	r3, [sp, #4]
  40535e:	b10d      	cbz	r5, 405364 <_vfiprintf_r+0x2b4>
  405360:	3301      	adds	r3, #1
  405362:	9301      	str	r3, [sp, #4]
  405364:	9b02      	ldr	r3, [sp, #8]
  405366:	f013 0302 	ands.w	r3, r3, #2
  40536a:	9309      	str	r3, [sp, #36]	; 0x24
  40536c:	d002      	beq.n	405374 <_vfiprintf_r+0x2c4>
  40536e:	9b01      	ldr	r3, [sp, #4]
  405370:	3302      	adds	r3, #2
  405372:	9301      	str	r3, [sp, #4]
  405374:	9b02      	ldr	r3, [sp, #8]
  405376:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40537a:	930a      	str	r3, [sp, #40]	; 0x28
  40537c:	f040 8217 	bne.w	4057ae <_vfiprintf_r+0x6fe>
  405380:	9b08      	ldr	r3, [sp, #32]
  405382:	9a01      	ldr	r2, [sp, #4]
  405384:	1a9d      	subs	r5, r3, r2
  405386:	2d00      	cmp	r5, #0
  405388:	f340 8211 	ble.w	4057ae <_vfiprintf_r+0x6fe>
  40538c:	2d10      	cmp	r5, #16
  40538e:	f340 8490 	ble.w	405cb2 <_vfiprintf_r+0xc02>
  405392:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405394:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405396:	4ec4      	ldr	r6, [pc, #784]	; (4056a8 <_vfiprintf_r+0x5f8>)
  405398:	46d6      	mov	lr, sl
  40539a:	2710      	movs	r7, #16
  40539c:	46a2      	mov	sl, r4
  40539e:	4619      	mov	r1, r3
  4053a0:	9c06      	ldr	r4, [sp, #24]
  4053a2:	e007      	b.n	4053b4 <_vfiprintf_r+0x304>
  4053a4:	f101 0c02 	add.w	ip, r1, #2
  4053a8:	f10e 0e08 	add.w	lr, lr, #8
  4053ac:	4601      	mov	r1, r0
  4053ae:	3d10      	subs	r5, #16
  4053b0:	2d10      	cmp	r5, #16
  4053b2:	dd11      	ble.n	4053d8 <_vfiprintf_r+0x328>
  4053b4:	1c48      	adds	r0, r1, #1
  4053b6:	3210      	adds	r2, #16
  4053b8:	2807      	cmp	r0, #7
  4053ba:	9211      	str	r2, [sp, #68]	; 0x44
  4053bc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4053c0:	9010      	str	r0, [sp, #64]	; 0x40
  4053c2:	ddef      	ble.n	4053a4 <_vfiprintf_r+0x2f4>
  4053c4:	2a00      	cmp	r2, #0
  4053c6:	f040 81e4 	bne.w	405792 <_vfiprintf_r+0x6e2>
  4053ca:	3d10      	subs	r5, #16
  4053cc:	2d10      	cmp	r5, #16
  4053ce:	4611      	mov	r1, r2
  4053d0:	f04f 0c01 	mov.w	ip, #1
  4053d4:	46ce      	mov	lr, r9
  4053d6:	dced      	bgt.n	4053b4 <_vfiprintf_r+0x304>
  4053d8:	4654      	mov	r4, sl
  4053da:	4661      	mov	r1, ip
  4053dc:	46f2      	mov	sl, lr
  4053de:	442a      	add	r2, r5
  4053e0:	2907      	cmp	r1, #7
  4053e2:	9211      	str	r2, [sp, #68]	; 0x44
  4053e4:	f8ca 6000 	str.w	r6, [sl]
  4053e8:	f8ca 5004 	str.w	r5, [sl, #4]
  4053ec:	9110      	str	r1, [sp, #64]	; 0x40
  4053ee:	f300 82ec 	bgt.w	4059ca <_vfiprintf_r+0x91a>
  4053f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4053f6:	f10a 0a08 	add.w	sl, sl, #8
  4053fa:	1c48      	adds	r0, r1, #1
  4053fc:	2d00      	cmp	r5, #0
  4053fe:	f040 81de 	bne.w	4057be <_vfiprintf_r+0x70e>
  405402:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405404:	2b00      	cmp	r3, #0
  405406:	f000 81f8 	beq.w	4057fa <_vfiprintf_r+0x74a>
  40540a:	3202      	adds	r2, #2
  40540c:	a90e      	add	r1, sp, #56	; 0x38
  40540e:	2302      	movs	r3, #2
  405410:	2807      	cmp	r0, #7
  405412:	9211      	str	r2, [sp, #68]	; 0x44
  405414:	9010      	str	r0, [sp, #64]	; 0x40
  405416:	e88a 000a 	stmia.w	sl, {r1, r3}
  40541a:	f340 81ea 	ble.w	4057f2 <_vfiprintf_r+0x742>
  40541e:	2a00      	cmp	r2, #0
  405420:	f040 838c 	bne.w	405b3c <_vfiprintf_r+0xa8c>
  405424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405426:	2b80      	cmp	r3, #128	; 0x80
  405428:	f04f 0001 	mov.w	r0, #1
  40542c:	4611      	mov	r1, r2
  40542e:	46ca      	mov	sl, r9
  405430:	f040 81e7 	bne.w	405802 <_vfiprintf_r+0x752>
  405434:	9b08      	ldr	r3, [sp, #32]
  405436:	9d01      	ldr	r5, [sp, #4]
  405438:	1b5e      	subs	r6, r3, r5
  40543a:	2e00      	cmp	r6, #0
  40543c:	f340 81e1 	ble.w	405802 <_vfiprintf_r+0x752>
  405440:	2e10      	cmp	r6, #16
  405442:	4d9a      	ldr	r5, [pc, #616]	; (4056ac <_vfiprintf_r+0x5fc>)
  405444:	f340 8450 	ble.w	405ce8 <_vfiprintf_r+0xc38>
  405448:	46d4      	mov	ip, sl
  40544a:	2710      	movs	r7, #16
  40544c:	46a2      	mov	sl, r4
  40544e:	9c06      	ldr	r4, [sp, #24]
  405450:	e007      	b.n	405462 <_vfiprintf_r+0x3b2>
  405452:	f101 0e02 	add.w	lr, r1, #2
  405456:	f10c 0c08 	add.w	ip, ip, #8
  40545a:	4601      	mov	r1, r0
  40545c:	3e10      	subs	r6, #16
  40545e:	2e10      	cmp	r6, #16
  405460:	dd11      	ble.n	405486 <_vfiprintf_r+0x3d6>
  405462:	1c48      	adds	r0, r1, #1
  405464:	3210      	adds	r2, #16
  405466:	2807      	cmp	r0, #7
  405468:	9211      	str	r2, [sp, #68]	; 0x44
  40546a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40546e:	9010      	str	r0, [sp, #64]	; 0x40
  405470:	ddef      	ble.n	405452 <_vfiprintf_r+0x3a2>
  405472:	2a00      	cmp	r2, #0
  405474:	f040 829d 	bne.w	4059b2 <_vfiprintf_r+0x902>
  405478:	3e10      	subs	r6, #16
  40547a:	2e10      	cmp	r6, #16
  40547c:	f04f 0e01 	mov.w	lr, #1
  405480:	4611      	mov	r1, r2
  405482:	46cc      	mov	ip, r9
  405484:	dced      	bgt.n	405462 <_vfiprintf_r+0x3b2>
  405486:	4654      	mov	r4, sl
  405488:	46e2      	mov	sl, ip
  40548a:	4432      	add	r2, r6
  40548c:	f1be 0f07 	cmp.w	lr, #7
  405490:	9211      	str	r2, [sp, #68]	; 0x44
  405492:	e88a 0060 	stmia.w	sl, {r5, r6}
  405496:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40549a:	f300 8369 	bgt.w	405b70 <_vfiprintf_r+0xac0>
  40549e:	f10a 0a08 	add.w	sl, sl, #8
  4054a2:	f10e 0001 	add.w	r0, lr, #1
  4054a6:	4671      	mov	r1, lr
  4054a8:	e1ab      	b.n	405802 <_vfiprintf_r+0x752>
  4054aa:	9608      	str	r6, [sp, #32]
  4054ac:	f013 0220 	ands.w	r2, r3, #32
  4054b0:	f040 838c 	bne.w	405bcc <_vfiprintf_r+0xb1c>
  4054b4:	f013 0110 	ands.w	r1, r3, #16
  4054b8:	f040 831a 	bne.w	405af0 <_vfiprintf_r+0xa40>
  4054bc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4054c0:	f000 8316 	beq.w	405af0 <_vfiprintf_r+0xa40>
  4054c4:	9807      	ldr	r0, [sp, #28]
  4054c6:	460a      	mov	r2, r1
  4054c8:	4601      	mov	r1, r0
  4054ca:	3104      	adds	r1, #4
  4054cc:	8806      	ldrh	r6, [r0, #0]
  4054ce:	9107      	str	r1, [sp, #28]
  4054d0:	2700      	movs	r7, #0
  4054d2:	e720      	b.n	405316 <_vfiprintf_r+0x266>
  4054d4:	9608      	str	r6, [sp, #32]
  4054d6:	f043 0310 	orr.w	r3, r3, #16
  4054da:	e7e7      	b.n	4054ac <_vfiprintf_r+0x3fc>
  4054dc:	9608      	str	r6, [sp, #32]
  4054de:	f043 0310 	orr.w	r3, r3, #16
  4054e2:	e708      	b.n	4052f6 <_vfiprintf_r+0x246>
  4054e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4054e8:	f898 2000 	ldrb.w	r2, [r8]
  4054ec:	e652      	b.n	405194 <_vfiprintf_r+0xe4>
  4054ee:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4054f2:	2600      	movs	r6, #0
  4054f4:	f818 2b01 	ldrb.w	r2, [r8], #1
  4054f8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4054fc:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405500:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405504:	2909      	cmp	r1, #9
  405506:	d9f5      	bls.n	4054f4 <_vfiprintf_r+0x444>
  405508:	e646      	b.n	405198 <_vfiprintf_r+0xe8>
  40550a:	9608      	str	r6, [sp, #32]
  40550c:	2800      	cmp	r0, #0
  40550e:	f040 8408 	bne.w	405d22 <_vfiprintf_r+0xc72>
  405512:	f043 0310 	orr.w	r3, r3, #16
  405516:	069e      	lsls	r6, r3, #26
  405518:	f100 834c 	bmi.w	405bb4 <_vfiprintf_r+0xb04>
  40551c:	06dd      	lsls	r5, r3, #27
  40551e:	f100 82f3 	bmi.w	405b08 <_vfiprintf_r+0xa58>
  405522:	0658      	lsls	r0, r3, #25
  405524:	f140 82f0 	bpl.w	405b08 <_vfiprintf_r+0xa58>
  405528:	9d07      	ldr	r5, [sp, #28]
  40552a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40552e:	462a      	mov	r2, r5
  405530:	17f7      	asrs	r7, r6, #31
  405532:	3204      	adds	r2, #4
  405534:	4630      	mov	r0, r6
  405536:	4639      	mov	r1, r7
  405538:	9207      	str	r2, [sp, #28]
  40553a:	2800      	cmp	r0, #0
  40553c:	f171 0200 	sbcs.w	r2, r1, #0
  405540:	f2c0 835d 	blt.w	405bfe <_vfiprintf_r+0xb4e>
  405544:	1c61      	adds	r1, r4, #1
  405546:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40554a:	f04f 0201 	mov.w	r2, #1
  40554e:	f47f aeea 	bne.w	405326 <_vfiprintf_r+0x276>
  405552:	ea56 0107 	orrs.w	r1, r6, r7
  405556:	f000 824d 	beq.w	4059f4 <_vfiprintf_r+0x944>
  40555a:	9302      	str	r3, [sp, #8]
  40555c:	2a01      	cmp	r2, #1
  40555e:	f000 828c 	beq.w	405a7a <_vfiprintf_r+0x9ca>
  405562:	2a02      	cmp	r2, #2
  405564:	f040 825c 	bne.w	405a20 <_vfiprintf_r+0x970>
  405568:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40556a:	46cb      	mov	fp, r9
  40556c:	0933      	lsrs	r3, r6, #4
  40556e:	f006 010f 	and.w	r1, r6, #15
  405572:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405576:	093a      	lsrs	r2, r7, #4
  405578:	461e      	mov	r6, r3
  40557a:	4617      	mov	r7, r2
  40557c:	5c43      	ldrb	r3, [r0, r1]
  40557e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  405582:	ea56 0307 	orrs.w	r3, r6, r7
  405586:	d1f1      	bne.n	40556c <_vfiprintf_r+0x4bc>
  405588:	eba9 030b 	sub.w	r3, r9, fp
  40558c:	9305      	str	r3, [sp, #20]
  40558e:	e6e1      	b.n	405354 <_vfiprintf_r+0x2a4>
  405590:	2800      	cmp	r0, #0
  405592:	f040 83c0 	bne.w	405d16 <_vfiprintf_r+0xc66>
  405596:	0699      	lsls	r1, r3, #26
  405598:	f100 8367 	bmi.w	405c6a <_vfiprintf_r+0xbba>
  40559c:	06da      	lsls	r2, r3, #27
  40559e:	f100 80f1 	bmi.w	405784 <_vfiprintf_r+0x6d4>
  4055a2:	065b      	lsls	r3, r3, #25
  4055a4:	f140 80ee 	bpl.w	405784 <_vfiprintf_r+0x6d4>
  4055a8:	9a07      	ldr	r2, [sp, #28]
  4055aa:	6813      	ldr	r3, [r2, #0]
  4055ac:	3204      	adds	r2, #4
  4055ae:	9207      	str	r2, [sp, #28]
  4055b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4055b4:	801a      	strh	r2, [r3, #0]
  4055b6:	e5b8      	b.n	40512a <_vfiprintf_r+0x7a>
  4055b8:	9807      	ldr	r0, [sp, #28]
  4055ba:	4a3d      	ldr	r2, [pc, #244]	; (4056b0 <_vfiprintf_r+0x600>)
  4055bc:	9608      	str	r6, [sp, #32]
  4055be:	920b      	str	r2, [sp, #44]	; 0x2c
  4055c0:	6806      	ldr	r6, [r0, #0]
  4055c2:	2278      	movs	r2, #120	; 0x78
  4055c4:	2130      	movs	r1, #48	; 0x30
  4055c6:	3004      	adds	r0, #4
  4055c8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4055cc:	f043 0302 	orr.w	r3, r3, #2
  4055d0:	9007      	str	r0, [sp, #28]
  4055d2:	2700      	movs	r7, #0
  4055d4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4055d8:	2202      	movs	r2, #2
  4055da:	e69c      	b.n	405316 <_vfiprintf_r+0x266>
  4055dc:	9608      	str	r6, [sp, #32]
  4055de:	2800      	cmp	r0, #0
  4055e0:	d099      	beq.n	405516 <_vfiprintf_r+0x466>
  4055e2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4055e6:	e796      	b.n	405516 <_vfiprintf_r+0x466>
  4055e8:	f898 2000 	ldrb.w	r2, [r8]
  4055ec:	2d00      	cmp	r5, #0
  4055ee:	f47f add1 	bne.w	405194 <_vfiprintf_r+0xe4>
  4055f2:	2001      	movs	r0, #1
  4055f4:	2520      	movs	r5, #32
  4055f6:	e5cd      	b.n	405194 <_vfiprintf_r+0xe4>
  4055f8:	f043 0301 	orr.w	r3, r3, #1
  4055fc:	f898 2000 	ldrb.w	r2, [r8]
  405600:	e5c8      	b.n	405194 <_vfiprintf_r+0xe4>
  405602:	9608      	str	r6, [sp, #32]
  405604:	2800      	cmp	r0, #0
  405606:	f040 8393 	bne.w	405d30 <_vfiprintf_r+0xc80>
  40560a:	4929      	ldr	r1, [pc, #164]	; (4056b0 <_vfiprintf_r+0x600>)
  40560c:	910b      	str	r1, [sp, #44]	; 0x2c
  40560e:	069f      	lsls	r7, r3, #26
  405610:	f100 82e8 	bmi.w	405be4 <_vfiprintf_r+0xb34>
  405614:	9807      	ldr	r0, [sp, #28]
  405616:	06de      	lsls	r6, r3, #27
  405618:	4601      	mov	r1, r0
  40561a:	f100 8270 	bmi.w	405afe <_vfiprintf_r+0xa4e>
  40561e:	065d      	lsls	r5, r3, #25
  405620:	f140 826d 	bpl.w	405afe <_vfiprintf_r+0xa4e>
  405624:	3104      	adds	r1, #4
  405626:	8806      	ldrh	r6, [r0, #0]
  405628:	9107      	str	r1, [sp, #28]
  40562a:	2700      	movs	r7, #0
  40562c:	07d8      	lsls	r0, r3, #31
  40562e:	f140 8222 	bpl.w	405a76 <_vfiprintf_r+0x9c6>
  405632:	ea56 0107 	orrs.w	r1, r6, r7
  405636:	f000 821e 	beq.w	405a76 <_vfiprintf_r+0x9c6>
  40563a:	2130      	movs	r1, #48	; 0x30
  40563c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405640:	f043 0302 	orr.w	r3, r3, #2
  405644:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405648:	2202      	movs	r2, #2
  40564a:	e664      	b.n	405316 <_vfiprintf_r+0x266>
  40564c:	9608      	str	r6, [sp, #32]
  40564e:	2800      	cmp	r0, #0
  405650:	f040 836b 	bne.w	405d2a <_vfiprintf_r+0xc7a>
  405654:	4917      	ldr	r1, [pc, #92]	; (4056b4 <_vfiprintf_r+0x604>)
  405656:	910b      	str	r1, [sp, #44]	; 0x2c
  405658:	e7d9      	b.n	40560e <_vfiprintf_r+0x55e>
  40565a:	9907      	ldr	r1, [sp, #28]
  40565c:	9608      	str	r6, [sp, #32]
  40565e:	680a      	ldr	r2, [r1, #0]
  405660:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405664:	f04f 0000 	mov.w	r0, #0
  405668:	460a      	mov	r2, r1
  40566a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40566e:	3204      	adds	r2, #4
  405670:	2001      	movs	r0, #1
  405672:	9001      	str	r0, [sp, #4]
  405674:	9207      	str	r2, [sp, #28]
  405676:	9005      	str	r0, [sp, #20]
  405678:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40567c:	9302      	str	r3, [sp, #8]
  40567e:	2400      	movs	r4, #0
  405680:	e670      	b.n	405364 <_vfiprintf_r+0x2b4>
  405682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405686:	f898 2000 	ldrb.w	r2, [r8]
  40568a:	e583      	b.n	405194 <_vfiprintf_r+0xe4>
  40568c:	f898 2000 	ldrb.w	r2, [r8]
  405690:	2a6c      	cmp	r2, #108	; 0x6c
  405692:	bf03      	ittte	eq
  405694:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405698:	f043 0320 	orreq.w	r3, r3, #32
  40569c:	f108 0801 	addeq.w	r8, r8, #1
  4056a0:	f043 0310 	orrne.w	r3, r3, #16
  4056a4:	e576      	b.n	405194 <_vfiprintf_r+0xe4>
  4056a6:	bf00      	nop
  4056a8:	0040aa2c 	.word	0x0040aa2c
  4056ac:	0040aa3c 	.word	0x0040aa3c
  4056b0:	0040aa10 	.word	0x0040aa10
  4056b4:	0040a9fc 	.word	0x0040a9fc
  4056b8:	9907      	ldr	r1, [sp, #28]
  4056ba:	680e      	ldr	r6, [r1, #0]
  4056bc:	460a      	mov	r2, r1
  4056be:	2e00      	cmp	r6, #0
  4056c0:	f102 0204 	add.w	r2, r2, #4
  4056c4:	f6ff ae0f 	blt.w	4052e6 <_vfiprintf_r+0x236>
  4056c8:	9207      	str	r2, [sp, #28]
  4056ca:	f898 2000 	ldrb.w	r2, [r8]
  4056ce:	e561      	b.n	405194 <_vfiprintf_r+0xe4>
  4056d0:	f898 2000 	ldrb.w	r2, [r8]
  4056d4:	2001      	movs	r0, #1
  4056d6:	252b      	movs	r5, #43	; 0x2b
  4056d8:	e55c      	b.n	405194 <_vfiprintf_r+0xe4>
  4056da:	9907      	ldr	r1, [sp, #28]
  4056dc:	9608      	str	r6, [sp, #32]
  4056de:	f8d1 b000 	ldr.w	fp, [r1]
  4056e2:	f04f 0200 	mov.w	r2, #0
  4056e6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4056ea:	1d0e      	adds	r6, r1, #4
  4056ec:	f1bb 0f00 	cmp.w	fp, #0
  4056f0:	f000 82e5 	beq.w	405cbe <_vfiprintf_r+0xc0e>
  4056f4:	1c67      	adds	r7, r4, #1
  4056f6:	f000 82c4 	beq.w	405c82 <_vfiprintf_r+0xbd2>
  4056fa:	4622      	mov	r2, r4
  4056fc:	2100      	movs	r1, #0
  4056fe:	4658      	mov	r0, fp
  405700:	9301      	str	r3, [sp, #4]
  405702:	f003 fe9d 	bl	409440 <memchr>
  405706:	9b01      	ldr	r3, [sp, #4]
  405708:	2800      	cmp	r0, #0
  40570a:	f000 82e5 	beq.w	405cd8 <_vfiprintf_r+0xc28>
  40570e:	eba0 020b 	sub.w	r2, r0, fp
  405712:	9205      	str	r2, [sp, #20]
  405714:	9607      	str	r6, [sp, #28]
  405716:	9302      	str	r3, [sp, #8]
  405718:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40571c:	2400      	movs	r4, #0
  40571e:	e619      	b.n	405354 <_vfiprintf_r+0x2a4>
  405720:	f898 2000 	ldrb.w	r2, [r8]
  405724:	2a2a      	cmp	r2, #42	; 0x2a
  405726:	f108 0701 	add.w	r7, r8, #1
  40572a:	f000 82e9 	beq.w	405d00 <_vfiprintf_r+0xc50>
  40572e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405732:	2909      	cmp	r1, #9
  405734:	46b8      	mov	r8, r7
  405736:	f04f 0400 	mov.w	r4, #0
  40573a:	f63f ad2d 	bhi.w	405198 <_vfiprintf_r+0xe8>
  40573e:	f818 2b01 	ldrb.w	r2, [r8], #1
  405742:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405746:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40574a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40574e:	2909      	cmp	r1, #9
  405750:	d9f5      	bls.n	40573e <_vfiprintf_r+0x68e>
  405752:	e521      	b.n	405198 <_vfiprintf_r+0xe8>
  405754:	f043 0320 	orr.w	r3, r3, #32
  405758:	f898 2000 	ldrb.w	r2, [r8]
  40575c:	e51a      	b.n	405194 <_vfiprintf_r+0xe4>
  40575e:	9608      	str	r6, [sp, #32]
  405760:	2800      	cmp	r0, #0
  405762:	f040 82db 	bne.w	405d1c <_vfiprintf_r+0xc6c>
  405766:	2a00      	cmp	r2, #0
  405768:	f000 80e7 	beq.w	40593a <_vfiprintf_r+0x88a>
  40576c:	2101      	movs	r1, #1
  40576e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405772:	f04f 0200 	mov.w	r2, #0
  405776:	9101      	str	r1, [sp, #4]
  405778:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40577c:	9105      	str	r1, [sp, #20]
  40577e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405782:	e77b      	b.n	40567c <_vfiprintf_r+0x5cc>
  405784:	9a07      	ldr	r2, [sp, #28]
  405786:	6813      	ldr	r3, [r2, #0]
  405788:	3204      	adds	r2, #4
  40578a:	9207      	str	r2, [sp, #28]
  40578c:	9a03      	ldr	r2, [sp, #12]
  40578e:	601a      	str	r2, [r3, #0]
  405790:	e4cb      	b.n	40512a <_vfiprintf_r+0x7a>
  405792:	aa0f      	add	r2, sp, #60	; 0x3c
  405794:	9904      	ldr	r1, [sp, #16]
  405796:	4620      	mov	r0, r4
  405798:	f7ff fc40 	bl	40501c <__sprint_r.part.0>
  40579c:	2800      	cmp	r0, #0
  40579e:	f040 8139 	bne.w	405a14 <_vfiprintf_r+0x964>
  4057a2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057a6:	f101 0c01 	add.w	ip, r1, #1
  4057aa:	46ce      	mov	lr, r9
  4057ac:	e5ff      	b.n	4053ae <_vfiprintf_r+0x2fe>
  4057ae:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057b2:	1c48      	adds	r0, r1, #1
  4057b4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4057b8:	2d00      	cmp	r5, #0
  4057ba:	f43f ae22 	beq.w	405402 <_vfiprintf_r+0x352>
  4057be:	3201      	adds	r2, #1
  4057c0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4057c4:	2101      	movs	r1, #1
  4057c6:	2807      	cmp	r0, #7
  4057c8:	9211      	str	r2, [sp, #68]	; 0x44
  4057ca:	9010      	str	r0, [sp, #64]	; 0x40
  4057cc:	f8ca 5000 	str.w	r5, [sl]
  4057d0:	f8ca 1004 	str.w	r1, [sl, #4]
  4057d4:	f340 8108 	ble.w	4059e8 <_vfiprintf_r+0x938>
  4057d8:	2a00      	cmp	r2, #0
  4057da:	f040 81bc 	bne.w	405b56 <_vfiprintf_r+0xaa6>
  4057de:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4057e0:	2b00      	cmp	r3, #0
  4057e2:	f43f ae1f 	beq.w	405424 <_vfiprintf_r+0x374>
  4057e6:	ab0e      	add	r3, sp, #56	; 0x38
  4057e8:	2202      	movs	r2, #2
  4057ea:	4608      	mov	r0, r1
  4057ec:	931c      	str	r3, [sp, #112]	; 0x70
  4057ee:	921d      	str	r2, [sp, #116]	; 0x74
  4057f0:	46ca      	mov	sl, r9
  4057f2:	4601      	mov	r1, r0
  4057f4:	f10a 0a08 	add.w	sl, sl, #8
  4057f8:	3001      	adds	r0, #1
  4057fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4057fc:	2b80      	cmp	r3, #128	; 0x80
  4057fe:	f43f ae19 	beq.w	405434 <_vfiprintf_r+0x384>
  405802:	9b05      	ldr	r3, [sp, #20]
  405804:	1ae4      	subs	r4, r4, r3
  405806:	2c00      	cmp	r4, #0
  405808:	dd2e      	ble.n	405868 <_vfiprintf_r+0x7b8>
  40580a:	2c10      	cmp	r4, #16
  40580c:	4db3      	ldr	r5, [pc, #716]	; (405adc <_vfiprintf_r+0xa2c>)
  40580e:	dd1e      	ble.n	40584e <_vfiprintf_r+0x79e>
  405810:	46d6      	mov	lr, sl
  405812:	2610      	movs	r6, #16
  405814:	9f06      	ldr	r7, [sp, #24]
  405816:	f8dd a010 	ldr.w	sl, [sp, #16]
  40581a:	e006      	b.n	40582a <_vfiprintf_r+0x77a>
  40581c:	1c88      	adds	r0, r1, #2
  40581e:	f10e 0e08 	add.w	lr, lr, #8
  405822:	4619      	mov	r1, r3
  405824:	3c10      	subs	r4, #16
  405826:	2c10      	cmp	r4, #16
  405828:	dd10      	ble.n	40584c <_vfiprintf_r+0x79c>
  40582a:	1c4b      	adds	r3, r1, #1
  40582c:	3210      	adds	r2, #16
  40582e:	2b07      	cmp	r3, #7
  405830:	9211      	str	r2, [sp, #68]	; 0x44
  405832:	e88e 0060 	stmia.w	lr, {r5, r6}
  405836:	9310      	str	r3, [sp, #64]	; 0x40
  405838:	ddf0      	ble.n	40581c <_vfiprintf_r+0x76c>
  40583a:	2a00      	cmp	r2, #0
  40583c:	d165      	bne.n	40590a <_vfiprintf_r+0x85a>
  40583e:	3c10      	subs	r4, #16
  405840:	2c10      	cmp	r4, #16
  405842:	f04f 0001 	mov.w	r0, #1
  405846:	4611      	mov	r1, r2
  405848:	46ce      	mov	lr, r9
  40584a:	dcee      	bgt.n	40582a <_vfiprintf_r+0x77a>
  40584c:	46f2      	mov	sl, lr
  40584e:	4422      	add	r2, r4
  405850:	2807      	cmp	r0, #7
  405852:	9211      	str	r2, [sp, #68]	; 0x44
  405854:	f8ca 5000 	str.w	r5, [sl]
  405858:	f8ca 4004 	str.w	r4, [sl, #4]
  40585c:	9010      	str	r0, [sp, #64]	; 0x40
  40585e:	f300 8085 	bgt.w	40596c <_vfiprintf_r+0x8bc>
  405862:	f10a 0a08 	add.w	sl, sl, #8
  405866:	3001      	adds	r0, #1
  405868:	9905      	ldr	r1, [sp, #20]
  40586a:	f8ca b000 	str.w	fp, [sl]
  40586e:	440a      	add	r2, r1
  405870:	2807      	cmp	r0, #7
  405872:	9211      	str	r2, [sp, #68]	; 0x44
  405874:	f8ca 1004 	str.w	r1, [sl, #4]
  405878:	9010      	str	r0, [sp, #64]	; 0x40
  40587a:	f340 8082 	ble.w	405982 <_vfiprintf_r+0x8d2>
  40587e:	2a00      	cmp	r2, #0
  405880:	f040 8118 	bne.w	405ab4 <_vfiprintf_r+0xa04>
  405884:	9b02      	ldr	r3, [sp, #8]
  405886:	9210      	str	r2, [sp, #64]	; 0x40
  405888:	0758      	lsls	r0, r3, #29
  40588a:	d535      	bpl.n	4058f8 <_vfiprintf_r+0x848>
  40588c:	9b08      	ldr	r3, [sp, #32]
  40588e:	9901      	ldr	r1, [sp, #4]
  405890:	1a5c      	subs	r4, r3, r1
  405892:	2c00      	cmp	r4, #0
  405894:	f340 80e7 	ble.w	405a66 <_vfiprintf_r+0x9b6>
  405898:	46ca      	mov	sl, r9
  40589a:	2c10      	cmp	r4, #16
  40589c:	f340 8218 	ble.w	405cd0 <_vfiprintf_r+0xc20>
  4058a0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4058a2:	4e8f      	ldr	r6, [pc, #572]	; (405ae0 <_vfiprintf_r+0xa30>)
  4058a4:	9f06      	ldr	r7, [sp, #24]
  4058a6:	f8dd b010 	ldr.w	fp, [sp, #16]
  4058aa:	2510      	movs	r5, #16
  4058ac:	e006      	b.n	4058bc <_vfiprintf_r+0x80c>
  4058ae:	1c88      	adds	r0, r1, #2
  4058b0:	f10a 0a08 	add.w	sl, sl, #8
  4058b4:	4619      	mov	r1, r3
  4058b6:	3c10      	subs	r4, #16
  4058b8:	2c10      	cmp	r4, #16
  4058ba:	dd11      	ble.n	4058e0 <_vfiprintf_r+0x830>
  4058bc:	1c4b      	adds	r3, r1, #1
  4058be:	3210      	adds	r2, #16
  4058c0:	2b07      	cmp	r3, #7
  4058c2:	9211      	str	r2, [sp, #68]	; 0x44
  4058c4:	f8ca 6000 	str.w	r6, [sl]
  4058c8:	f8ca 5004 	str.w	r5, [sl, #4]
  4058cc:	9310      	str	r3, [sp, #64]	; 0x40
  4058ce:	ddee      	ble.n	4058ae <_vfiprintf_r+0x7fe>
  4058d0:	bb42      	cbnz	r2, 405924 <_vfiprintf_r+0x874>
  4058d2:	3c10      	subs	r4, #16
  4058d4:	2c10      	cmp	r4, #16
  4058d6:	f04f 0001 	mov.w	r0, #1
  4058da:	4611      	mov	r1, r2
  4058dc:	46ca      	mov	sl, r9
  4058de:	dced      	bgt.n	4058bc <_vfiprintf_r+0x80c>
  4058e0:	4422      	add	r2, r4
  4058e2:	2807      	cmp	r0, #7
  4058e4:	9211      	str	r2, [sp, #68]	; 0x44
  4058e6:	f8ca 6000 	str.w	r6, [sl]
  4058ea:	f8ca 4004 	str.w	r4, [sl, #4]
  4058ee:	9010      	str	r0, [sp, #64]	; 0x40
  4058f0:	dd51      	ble.n	405996 <_vfiprintf_r+0x8e6>
  4058f2:	2a00      	cmp	r2, #0
  4058f4:	f040 819b 	bne.w	405c2e <_vfiprintf_r+0xb7e>
  4058f8:	9b03      	ldr	r3, [sp, #12]
  4058fa:	9a08      	ldr	r2, [sp, #32]
  4058fc:	9901      	ldr	r1, [sp, #4]
  4058fe:	428a      	cmp	r2, r1
  405900:	bfac      	ite	ge
  405902:	189b      	addge	r3, r3, r2
  405904:	185b      	addlt	r3, r3, r1
  405906:	9303      	str	r3, [sp, #12]
  405908:	e04e      	b.n	4059a8 <_vfiprintf_r+0x8f8>
  40590a:	aa0f      	add	r2, sp, #60	; 0x3c
  40590c:	4651      	mov	r1, sl
  40590e:	4638      	mov	r0, r7
  405910:	f7ff fb84 	bl	40501c <__sprint_r.part.0>
  405914:	2800      	cmp	r0, #0
  405916:	f040 813f 	bne.w	405b98 <_vfiprintf_r+0xae8>
  40591a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40591c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40591e:	1c48      	adds	r0, r1, #1
  405920:	46ce      	mov	lr, r9
  405922:	e77f      	b.n	405824 <_vfiprintf_r+0x774>
  405924:	aa0f      	add	r2, sp, #60	; 0x3c
  405926:	4659      	mov	r1, fp
  405928:	4638      	mov	r0, r7
  40592a:	f7ff fb77 	bl	40501c <__sprint_r.part.0>
  40592e:	b960      	cbnz	r0, 40594a <_vfiprintf_r+0x89a>
  405930:	9910      	ldr	r1, [sp, #64]	; 0x40
  405932:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405934:	1c48      	adds	r0, r1, #1
  405936:	46ca      	mov	sl, r9
  405938:	e7bd      	b.n	4058b6 <_vfiprintf_r+0x806>
  40593a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40593c:	f8dd b010 	ldr.w	fp, [sp, #16]
  405940:	2b00      	cmp	r3, #0
  405942:	f040 81d4 	bne.w	405cee <_vfiprintf_r+0xc3e>
  405946:	2300      	movs	r3, #0
  405948:	9310      	str	r3, [sp, #64]	; 0x40
  40594a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40594e:	f013 0f01 	tst.w	r3, #1
  405952:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405956:	d102      	bne.n	40595e <_vfiprintf_r+0x8ae>
  405958:	059a      	lsls	r2, r3, #22
  40595a:	f140 80de 	bpl.w	405b1a <_vfiprintf_r+0xa6a>
  40595e:	065b      	lsls	r3, r3, #25
  405960:	f53f acb2 	bmi.w	4052c8 <_vfiprintf_r+0x218>
  405964:	9803      	ldr	r0, [sp, #12]
  405966:	b02d      	add	sp, #180	; 0xb4
  405968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40596c:	2a00      	cmp	r2, #0
  40596e:	f040 8106 	bne.w	405b7e <_vfiprintf_r+0xace>
  405972:	9a05      	ldr	r2, [sp, #20]
  405974:	921d      	str	r2, [sp, #116]	; 0x74
  405976:	2301      	movs	r3, #1
  405978:	9211      	str	r2, [sp, #68]	; 0x44
  40597a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40597e:	9310      	str	r3, [sp, #64]	; 0x40
  405980:	46ca      	mov	sl, r9
  405982:	f10a 0a08 	add.w	sl, sl, #8
  405986:	9b02      	ldr	r3, [sp, #8]
  405988:	0759      	lsls	r1, r3, #29
  40598a:	d504      	bpl.n	405996 <_vfiprintf_r+0x8e6>
  40598c:	9b08      	ldr	r3, [sp, #32]
  40598e:	9901      	ldr	r1, [sp, #4]
  405990:	1a5c      	subs	r4, r3, r1
  405992:	2c00      	cmp	r4, #0
  405994:	dc81      	bgt.n	40589a <_vfiprintf_r+0x7ea>
  405996:	9b03      	ldr	r3, [sp, #12]
  405998:	9908      	ldr	r1, [sp, #32]
  40599a:	9801      	ldr	r0, [sp, #4]
  40599c:	4281      	cmp	r1, r0
  40599e:	bfac      	ite	ge
  4059a0:	185b      	addge	r3, r3, r1
  4059a2:	181b      	addlt	r3, r3, r0
  4059a4:	9303      	str	r3, [sp, #12]
  4059a6:	bb72      	cbnz	r2, 405a06 <_vfiprintf_r+0x956>
  4059a8:	2300      	movs	r3, #0
  4059aa:	9310      	str	r3, [sp, #64]	; 0x40
  4059ac:	46ca      	mov	sl, r9
  4059ae:	f7ff bbbc 	b.w	40512a <_vfiprintf_r+0x7a>
  4059b2:	aa0f      	add	r2, sp, #60	; 0x3c
  4059b4:	9904      	ldr	r1, [sp, #16]
  4059b6:	4620      	mov	r0, r4
  4059b8:	f7ff fb30 	bl	40501c <__sprint_r.part.0>
  4059bc:	bb50      	cbnz	r0, 405a14 <_vfiprintf_r+0x964>
  4059be:	9910      	ldr	r1, [sp, #64]	; 0x40
  4059c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4059c2:	f101 0e01 	add.w	lr, r1, #1
  4059c6:	46cc      	mov	ip, r9
  4059c8:	e548      	b.n	40545c <_vfiprintf_r+0x3ac>
  4059ca:	2a00      	cmp	r2, #0
  4059cc:	f040 8140 	bne.w	405c50 <_vfiprintf_r+0xba0>
  4059d0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4059d4:	2900      	cmp	r1, #0
  4059d6:	f000 811b 	beq.w	405c10 <_vfiprintf_r+0xb60>
  4059da:	2201      	movs	r2, #1
  4059dc:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4059e0:	4610      	mov	r0, r2
  4059e2:	921d      	str	r2, [sp, #116]	; 0x74
  4059e4:	911c      	str	r1, [sp, #112]	; 0x70
  4059e6:	46ca      	mov	sl, r9
  4059e8:	4601      	mov	r1, r0
  4059ea:	f10a 0a08 	add.w	sl, sl, #8
  4059ee:	3001      	adds	r0, #1
  4059f0:	e507      	b.n	405402 <_vfiprintf_r+0x352>
  4059f2:	9b02      	ldr	r3, [sp, #8]
  4059f4:	2a01      	cmp	r2, #1
  4059f6:	f000 8098 	beq.w	405b2a <_vfiprintf_r+0xa7a>
  4059fa:	2a02      	cmp	r2, #2
  4059fc:	d10d      	bne.n	405a1a <_vfiprintf_r+0x96a>
  4059fe:	9302      	str	r3, [sp, #8]
  405a00:	2600      	movs	r6, #0
  405a02:	2700      	movs	r7, #0
  405a04:	e5b0      	b.n	405568 <_vfiprintf_r+0x4b8>
  405a06:	aa0f      	add	r2, sp, #60	; 0x3c
  405a08:	9904      	ldr	r1, [sp, #16]
  405a0a:	9806      	ldr	r0, [sp, #24]
  405a0c:	f7ff fb06 	bl	40501c <__sprint_r.part.0>
  405a10:	2800      	cmp	r0, #0
  405a12:	d0c9      	beq.n	4059a8 <_vfiprintf_r+0x8f8>
  405a14:	f8dd b010 	ldr.w	fp, [sp, #16]
  405a18:	e797      	b.n	40594a <_vfiprintf_r+0x89a>
  405a1a:	9302      	str	r3, [sp, #8]
  405a1c:	2600      	movs	r6, #0
  405a1e:	2700      	movs	r7, #0
  405a20:	4649      	mov	r1, r9
  405a22:	e000      	b.n	405a26 <_vfiprintf_r+0x976>
  405a24:	4659      	mov	r1, fp
  405a26:	08f2      	lsrs	r2, r6, #3
  405a28:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405a2c:	08f8      	lsrs	r0, r7, #3
  405a2e:	f006 0307 	and.w	r3, r6, #7
  405a32:	4607      	mov	r7, r0
  405a34:	4616      	mov	r6, r2
  405a36:	3330      	adds	r3, #48	; 0x30
  405a38:	ea56 0207 	orrs.w	r2, r6, r7
  405a3c:	f801 3c01 	strb.w	r3, [r1, #-1]
  405a40:	f101 3bff 	add.w	fp, r1, #4294967295
  405a44:	d1ee      	bne.n	405a24 <_vfiprintf_r+0x974>
  405a46:	9a02      	ldr	r2, [sp, #8]
  405a48:	07d6      	lsls	r6, r2, #31
  405a4a:	f57f ad9d 	bpl.w	405588 <_vfiprintf_r+0x4d8>
  405a4e:	2b30      	cmp	r3, #48	; 0x30
  405a50:	f43f ad9a 	beq.w	405588 <_vfiprintf_r+0x4d8>
  405a54:	3902      	subs	r1, #2
  405a56:	2330      	movs	r3, #48	; 0x30
  405a58:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405a5c:	eba9 0301 	sub.w	r3, r9, r1
  405a60:	9305      	str	r3, [sp, #20]
  405a62:	468b      	mov	fp, r1
  405a64:	e476      	b.n	405354 <_vfiprintf_r+0x2a4>
  405a66:	9b03      	ldr	r3, [sp, #12]
  405a68:	9a08      	ldr	r2, [sp, #32]
  405a6a:	428a      	cmp	r2, r1
  405a6c:	bfac      	ite	ge
  405a6e:	189b      	addge	r3, r3, r2
  405a70:	185b      	addlt	r3, r3, r1
  405a72:	9303      	str	r3, [sp, #12]
  405a74:	e798      	b.n	4059a8 <_vfiprintf_r+0x8f8>
  405a76:	2202      	movs	r2, #2
  405a78:	e44d      	b.n	405316 <_vfiprintf_r+0x266>
  405a7a:	2f00      	cmp	r7, #0
  405a7c:	bf08      	it	eq
  405a7e:	2e0a      	cmpeq	r6, #10
  405a80:	d352      	bcc.n	405b28 <_vfiprintf_r+0xa78>
  405a82:	46cb      	mov	fp, r9
  405a84:	4630      	mov	r0, r6
  405a86:	4639      	mov	r1, r7
  405a88:	220a      	movs	r2, #10
  405a8a:	2300      	movs	r3, #0
  405a8c:	f004 fd18 	bl	40a4c0 <__aeabi_uldivmod>
  405a90:	3230      	adds	r2, #48	; 0x30
  405a92:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405a96:	4630      	mov	r0, r6
  405a98:	4639      	mov	r1, r7
  405a9a:	2300      	movs	r3, #0
  405a9c:	220a      	movs	r2, #10
  405a9e:	f004 fd0f 	bl	40a4c0 <__aeabi_uldivmod>
  405aa2:	4606      	mov	r6, r0
  405aa4:	460f      	mov	r7, r1
  405aa6:	ea56 0307 	orrs.w	r3, r6, r7
  405aaa:	d1eb      	bne.n	405a84 <_vfiprintf_r+0x9d4>
  405aac:	e56c      	b.n	405588 <_vfiprintf_r+0x4d8>
  405aae:	9405      	str	r4, [sp, #20]
  405ab0:	46cb      	mov	fp, r9
  405ab2:	e44f      	b.n	405354 <_vfiprintf_r+0x2a4>
  405ab4:	aa0f      	add	r2, sp, #60	; 0x3c
  405ab6:	9904      	ldr	r1, [sp, #16]
  405ab8:	9806      	ldr	r0, [sp, #24]
  405aba:	f7ff faaf 	bl	40501c <__sprint_r.part.0>
  405abe:	2800      	cmp	r0, #0
  405ac0:	d1a8      	bne.n	405a14 <_vfiprintf_r+0x964>
  405ac2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405ac4:	46ca      	mov	sl, r9
  405ac6:	e75e      	b.n	405986 <_vfiprintf_r+0x8d6>
  405ac8:	aa0f      	add	r2, sp, #60	; 0x3c
  405aca:	9904      	ldr	r1, [sp, #16]
  405acc:	9806      	ldr	r0, [sp, #24]
  405ace:	f7ff faa5 	bl	40501c <__sprint_r.part.0>
  405ad2:	2800      	cmp	r0, #0
  405ad4:	d19e      	bne.n	405a14 <_vfiprintf_r+0x964>
  405ad6:	46ca      	mov	sl, r9
  405ad8:	f7ff bbc0 	b.w	40525c <_vfiprintf_r+0x1ac>
  405adc:	0040aa3c 	.word	0x0040aa3c
  405ae0:	0040aa2c 	.word	0x0040aa2c
  405ae4:	3104      	adds	r1, #4
  405ae6:	6816      	ldr	r6, [r2, #0]
  405ae8:	9107      	str	r1, [sp, #28]
  405aea:	2201      	movs	r2, #1
  405aec:	2700      	movs	r7, #0
  405aee:	e412      	b.n	405316 <_vfiprintf_r+0x266>
  405af0:	9807      	ldr	r0, [sp, #28]
  405af2:	4601      	mov	r1, r0
  405af4:	3104      	adds	r1, #4
  405af6:	6806      	ldr	r6, [r0, #0]
  405af8:	9107      	str	r1, [sp, #28]
  405afa:	2700      	movs	r7, #0
  405afc:	e40b      	b.n	405316 <_vfiprintf_r+0x266>
  405afe:	680e      	ldr	r6, [r1, #0]
  405b00:	3104      	adds	r1, #4
  405b02:	9107      	str	r1, [sp, #28]
  405b04:	2700      	movs	r7, #0
  405b06:	e591      	b.n	40562c <_vfiprintf_r+0x57c>
  405b08:	9907      	ldr	r1, [sp, #28]
  405b0a:	680e      	ldr	r6, [r1, #0]
  405b0c:	460a      	mov	r2, r1
  405b0e:	17f7      	asrs	r7, r6, #31
  405b10:	3204      	adds	r2, #4
  405b12:	9207      	str	r2, [sp, #28]
  405b14:	4630      	mov	r0, r6
  405b16:	4639      	mov	r1, r7
  405b18:	e50f      	b.n	40553a <_vfiprintf_r+0x48a>
  405b1a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405b1e:	f003 f941 	bl	408da4 <__retarget_lock_release_recursive>
  405b22:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405b26:	e71a      	b.n	40595e <_vfiprintf_r+0x8ae>
  405b28:	9b02      	ldr	r3, [sp, #8]
  405b2a:	9302      	str	r3, [sp, #8]
  405b2c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405b30:	3630      	adds	r6, #48	; 0x30
  405b32:	2301      	movs	r3, #1
  405b34:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405b38:	9305      	str	r3, [sp, #20]
  405b3a:	e40b      	b.n	405354 <_vfiprintf_r+0x2a4>
  405b3c:	aa0f      	add	r2, sp, #60	; 0x3c
  405b3e:	9904      	ldr	r1, [sp, #16]
  405b40:	9806      	ldr	r0, [sp, #24]
  405b42:	f7ff fa6b 	bl	40501c <__sprint_r.part.0>
  405b46:	2800      	cmp	r0, #0
  405b48:	f47f af64 	bne.w	405a14 <_vfiprintf_r+0x964>
  405b4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  405b4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405b50:	1c48      	adds	r0, r1, #1
  405b52:	46ca      	mov	sl, r9
  405b54:	e651      	b.n	4057fa <_vfiprintf_r+0x74a>
  405b56:	aa0f      	add	r2, sp, #60	; 0x3c
  405b58:	9904      	ldr	r1, [sp, #16]
  405b5a:	9806      	ldr	r0, [sp, #24]
  405b5c:	f7ff fa5e 	bl	40501c <__sprint_r.part.0>
  405b60:	2800      	cmp	r0, #0
  405b62:	f47f af57 	bne.w	405a14 <_vfiprintf_r+0x964>
  405b66:	9910      	ldr	r1, [sp, #64]	; 0x40
  405b68:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405b6a:	1c48      	adds	r0, r1, #1
  405b6c:	46ca      	mov	sl, r9
  405b6e:	e448      	b.n	405402 <_vfiprintf_r+0x352>
  405b70:	2a00      	cmp	r2, #0
  405b72:	f040 8091 	bne.w	405c98 <_vfiprintf_r+0xbe8>
  405b76:	2001      	movs	r0, #1
  405b78:	4611      	mov	r1, r2
  405b7a:	46ca      	mov	sl, r9
  405b7c:	e641      	b.n	405802 <_vfiprintf_r+0x752>
  405b7e:	aa0f      	add	r2, sp, #60	; 0x3c
  405b80:	9904      	ldr	r1, [sp, #16]
  405b82:	9806      	ldr	r0, [sp, #24]
  405b84:	f7ff fa4a 	bl	40501c <__sprint_r.part.0>
  405b88:	2800      	cmp	r0, #0
  405b8a:	f47f af43 	bne.w	405a14 <_vfiprintf_r+0x964>
  405b8e:	9810      	ldr	r0, [sp, #64]	; 0x40
  405b90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405b92:	3001      	adds	r0, #1
  405b94:	46ca      	mov	sl, r9
  405b96:	e667      	b.n	405868 <_vfiprintf_r+0x7b8>
  405b98:	46d3      	mov	fp, sl
  405b9a:	e6d6      	b.n	40594a <_vfiprintf_r+0x89a>
  405b9c:	9e07      	ldr	r6, [sp, #28]
  405b9e:	3607      	adds	r6, #7
  405ba0:	f026 0207 	bic.w	r2, r6, #7
  405ba4:	f102 0108 	add.w	r1, r2, #8
  405ba8:	e9d2 6700 	ldrd	r6, r7, [r2]
  405bac:	9107      	str	r1, [sp, #28]
  405bae:	2201      	movs	r2, #1
  405bb0:	f7ff bbb1 	b.w	405316 <_vfiprintf_r+0x266>
  405bb4:	9e07      	ldr	r6, [sp, #28]
  405bb6:	3607      	adds	r6, #7
  405bb8:	f026 0607 	bic.w	r6, r6, #7
  405bbc:	e9d6 0100 	ldrd	r0, r1, [r6]
  405bc0:	f106 0208 	add.w	r2, r6, #8
  405bc4:	9207      	str	r2, [sp, #28]
  405bc6:	4606      	mov	r6, r0
  405bc8:	460f      	mov	r7, r1
  405bca:	e4b6      	b.n	40553a <_vfiprintf_r+0x48a>
  405bcc:	9e07      	ldr	r6, [sp, #28]
  405bce:	3607      	adds	r6, #7
  405bd0:	f026 0207 	bic.w	r2, r6, #7
  405bd4:	f102 0108 	add.w	r1, r2, #8
  405bd8:	e9d2 6700 	ldrd	r6, r7, [r2]
  405bdc:	9107      	str	r1, [sp, #28]
  405bde:	2200      	movs	r2, #0
  405be0:	f7ff bb99 	b.w	405316 <_vfiprintf_r+0x266>
  405be4:	9e07      	ldr	r6, [sp, #28]
  405be6:	3607      	adds	r6, #7
  405be8:	f026 0107 	bic.w	r1, r6, #7
  405bec:	f101 0008 	add.w	r0, r1, #8
  405bf0:	9007      	str	r0, [sp, #28]
  405bf2:	e9d1 6700 	ldrd	r6, r7, [r1]
  405bf6:	e519      	b.n	40562c <_vfiprintf_r+0x57c>
  405bf8:	46cb      	mov	fp, r9
  405bfa:	f7ff bbab 	b.w	405354 <_vfiprintf_r+0x2a4>
  405bfe:	252d      	movs	r5, #45	; 0x2d
  405c00:	4276      	negs	r6, r6
  405c02:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405c06:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405c0a:	2201      	movs	r2, #1
  405c0c:	f7ff bb88 	b.w	405320 <_vfiprintf_r+0x270>
  405c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405c12:	b9b3      	cbnz	r3, 405c42 <_vfiprintf_r+0xb92>
  405c14:	4611      	mov	r1, r2
  405c16:	2001      	movs	r0, #1
  405c18:	46ca      	mov	sl, r9
  405c1a:	e5f2      	b.n	405802 <_vfiprintf_r+0x752>
  405c1c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405c20:	f003 f8c0 	bl	408da4 <__retarget_lock_release_recursive>
  405c24:	f04f 33ff 	mov.w	r3, #4294967295
  405c28:	9303      	str	r3, [sp, #12]
  405c2a:	f7ff bb50 	b.w	4052ce <_vfiprintf_r+0x21e>
  405c2e:	aa0f      	add	r2, sp, #60	; 0x3c
  405c30:	9904      	ldr	r1, [sp, #16]
  405c32:	9806      	ldr	r0, [sp, #24]
  405c34:	f7ff f9f2 	bl	40501c <__sprint_r.part.0>
  405c38:	2800      	cmp	r0, #0
  405c3a:	f47f aeeb 	bne.w	405a14 <_vfiprintf_r+0x964>
  405c3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c40:	e6a9      	b.n	405996 <_vfiprintf_r+0x8e6>
  405c42:	ab0e      	add	r3, sp, #56	; 0x38
  405c44:	2202      	movs	r2, #2
  405c46:	931c      	str	r3, [sp, #112]	; 0x70
  405c48:	921d      	str	r2, [sp, #116]	; 0x74
  405c4a:	2001      	movs	r0, #1
  405c4c:	46ca      	mov	sl, r9
  405c4e:	e5d0      	b.n	4057f2 <_vfiprintf_r+0x742>
  405c50:	aa0f      	add	r2, sp, #60	; 0x3c
  405c52:	9904      	ldr	r1, [sp, #16]
  405c54:	9806      	ldr	r0, [sp, #24]
  405c56:	f7ff f9e1 	bl	40501c <__sprint_r.part.0>
  405c5a:	2800      	cmp	r0, #0
  405c5c:	f47f aeda 	bne.w	405a14 <_vfiprintf_r+0x964>
  405c60:	9910      	ldr	r1, [sp, #64]	; 0x40
  405c62:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c64:	1c48      	adds	r0, r1, #1
  405c66:	46ca      	mov	sl, r9
  405c68:	e5a4      	b.n	4057b4 <_vfiprintf_r+0x704>
  405c6a:	9a07      	ldr	r2, [sp, #28]
  405c6c:	9903      	ldr	r1, [sp, #12]
  405c6e:	6813      	ldr	r3, [r2, #0]
  405c70:	17cd      	asrs	r5, r1, #31
  405c72:	4608      	mov	r0, r1
  405c74:	3204      	adds	r2, #4
  405c76:	4629      	mov	r1, r5
  405c78:	9207      	str	r2, [sp, #28]
  405c7a:	e9c3 0100 	strd	r0, r1, [r3]
  405c7e:	f7ff ba54 	b.w	40512a <_vfiprintf_r+0x7a>
  405c82:	4658      	mov	r0, fp
  405c84:	9607      	str	r6, [sp, #28]
  405c86:	9302      	str	r3, [sp, #8]
  405c88:	f7ff f95a 	bl	404f40 <strlen>
  405c8c:	2400      	movs	r4, #0
  405c8e:	9005      	str	r0, [sp, #20]
  405c90:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405c94:	f7ff bb5e 	b.w	405354 <_vfiprintf_r+0x2a4>
  405c98:	aa0f      	add	r2, sp, #60	; 0x3c
  405c9a:	9904      	ldr	r1, [sp, #16]
  405c9c:	9806      	ldr	r0, [sp, #24]
  405c9e:	f7ff f9bd 	bl	40501c <__sprint_r.part.0>
  405ca2:	2800      	cmp	r0, #0
  405ca4:	f47f aeb6 	bne.w	405a14 <_vfiprintf_r+0x964>
  405ca8:	9910      	ldr	r1, [sp, #64]	; 0x40
  405caa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405cac:	1c48      	adds	r0, r1, #1
  405cae:	46ca      	mov	sl, r9
  405cb0:	e5a7      	b.n	405802 <_vfiprintf_r+0x752>
  405cb2:	9910      	ldr	r1, [sp, #64]	; 0x40
  405cb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405cb6:	4e20      	ldr	r6, [pc, #128]	; (405d38 <_vfiprintf_r+0xc88>)
  405cb8:	3101      	adds	r1, #1
  405cba:	f7ff bb90 	b.w	4053de <_vfiprintf_r+0x32e>
  405cbe:	2c06      	cmp	r4, #6
  405cc0:	bf28      	it	cs
  405cc2:	2406      	movcs	r4, #6
  405cc4:	9405      	str	r4, [sp, #20]
  405cc6:	9607      	str	r6, [sp, #28]
  405cc8:	9401      	str	r4, [sp, #4]
  405cca:	f8df b070 	ldr.w	fp, [pc, #112]	; 405d3c <_vfiprintf_r+0xc8c>
  405cce:	e4d5      	b.n	40567c <_vfiprintf_r+0x5cc>
  405cd0:	9810      	ldr	r0, [sp, #64]	; 0x40
  405cd2:	4e19      	ldr	r6, [pc, #100]	; (405d38 <_vfiprintf_r+0xc88>)
  405cd4:	3001      	adds	r0, #1
  405cd6:	e603      	b.n	4058e0 <_vfiprintf_r+0x830>
  405cd8:	9405      	str	r4, [sp, #20]
  405cda:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405cde:	9607      	str	r6, [sp, #28]
  405ce0:	9302      	str	r3, [sp, #8]
  405ce2:	4604      	mov	r4, r0
  405ce4:	f7ff bb36 	b.w	405354 <_vfiprintf_r+0x2a4>
  405ce8:	4686      	mov	lr, r0
  405cea:	f7ff bbce 	b.w	40548a <_vfiprintf_r+0x3da>
  405cee:	9806      	ldr	r0, [sp, #24]
  405cf0:	aa0f      	add	r2, sp, #60	; 0x3c
  405cf2:	4659      	mov	r1, fp
  405cf4:	f7ff f992 	bl	40501c <__sprint_r.part.0>
  405cf8:	2800      	cmp	r0, #0
  405cfa:	f43f ae24 	beq.w	405946 <_vfiprintf_r+0x896>
  405cfe:	e624      	b.n	40594a <_vfiprintf_r+0x89a>
  405d00:	9907      	ldr	r1, [sp, #28]
  405d02:	f898 2001 	ldrb.w	r2, [r8, #1]
  405d06:	680c      	ldr	r4, [r1, #0]
  405d08:	3104      	adds	r1, #4
  405d0a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405d0e:	46b8      	mov	r8, r7
  405d10:	9107      	str	r1, [sp, #28]
  405d12:	f7ff ba3f 	b.w	405194 <_vfiprintf_r+0xe4>
  405d16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405d1a:	e43c      	b.n	405596 <_vfiprintf_r+0x4e6>
  405d1c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405d20:	e521      	b.n	405766 <_vfiprintf_r+0x6b6>
  405d22:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405d26:	f7ff bbf4 	b.w	405512 <_vfiprintf_r+0x462>
  405d2a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405d2e:	e491      	b.n	405654 <_vfiprintf_r+0x5a4>
  405d30:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405d34:	e469      	b.n	40560a <_vfiprintf_r+0x55a>
  405d36:	bf00      	nop
  405d38:	0040aa2c 	.word	0x0040aa2c
  405d3c:	0040aa24 	.word	0x0040aa24

00405d40 <__sbprintf>:
  405d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405d44:	460c      	mov	r4, r1
  405d46:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405d4a:	8989      	ldrh	r1, [r1, #12]
  405d4c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405d4e:	89e5      	ldrh	r5, [r4, #14]
  405d50:	9619      	str	r6, [sp, #100]	; 0x64
  405d52:	f021 0102 	bic.w	r1, r1, #2
  405d56:	4606      	mov	r6, r0
  405d58:	69e0      	ldr	r0, [r4, #28]
  405d5a:	f8ad 100c 	strh.w	r1, [sp, #12]
  405d5e:	4617      	mov	r7, r2
  405d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405d64:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405d66:	f8ad 500e 	strh.w	r5, [sp, #14]
  405d6a:	4698      	mov	r8, r3
  405d6c:	ad1a      	add	r5, sp, #104	; 0x68
  405d6e:	2300      	movs	r3, #0
  405d70:	9007      	str	r0, [sp, #28]
  405d72:	a816      	add	r0, sp, #88	; 0x58
  405d74:	9209      	str	r2, [sp, #36]	; 0x24
  405d76:	9306      	str	r3, [sp, #24]
  405d78:	9500      	str	r5, [sp, #0]
  405d7a:	9504      	str	r5, [sp, #16]
  405d7c:	9102      	str	r1, [sp, #8]
  405d7e:	9105      	str	r1, [sp, #20]
  405d80:	f003 f80a 	bl	408d98 <__retarget_lock_init_recursive>
  405d84:	4643      	mov	r3, r8
  405d86:	463a      	mov	r2, r7
  405d88:	4669      	mov	r1, sp
  405d8a:	4630      	mov	r0, r6
  405d8c:	f7ff f990 	bl	4050b0 <_vfiprintf_r>
  405d90:	1e05      	subs	r5, r0, #0
  405d92:	db07      	blt.n	405da4 <__sbprintf+0x64>
  405d94:	4630      	mov	r0, r6
  405d96:	4669      	mov	r1, sp
  405d98:	f002 fbdc 	bl	408554 <_fflush_r>
  405d9c:	2800      	cmp	r0, #0
  405d9e:	bf18      	it	ne
  405da0:	f04f 35ff 	movne.w	r5, #4294967295
  405da4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405da8:	065b      	lsls	r3, r3, #25
  405daa:	d503      	bpl.n	405db4 <__sbprintf+0x74>
  405dac:	89a3      	ldrh	r3, [r4, #12]
  405dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405db2:	81a3      	strh	r3, [r4, #12]
  405db4:	9816      	ldr	r0, [sp, #88]	; 0x58
  405db6:	f002 fff1 	bl	408d9c <__retarget_lock_close_recursive>
  405dba:	4628      	mov	r0, r5
  405dbc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405dc4 <_vfprintf_r>:
  405dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405dc8:	b0c1      	sub	sp, #260	; 0x104
  405dca:	461d      	mov	r5, r3
  405dcc:	468a      	mov	sl, r1
  405dce:	4691      	mov	r9, r2
  405dd0:	4604      	mov	r4, r0
  405dd2:	9008      	str	r0, [sp, #32]
  405dd4:	f002 ffd2 	bl	408d7c <_localeconv_r>
  405dd8:	6803      	ldr	r3, [r0, #0]
  405dda:	9315      	str	r3, [sp, #84]	; 0x54
  405ddc:	4618      	mov	r0, r3
  405dde:	f7ff f8af 	bl	404f40 <strlen>
  405de2:	950e      	str	r5, [sp, #56]	; 0x38
  405de4:	9014      	str	r0, [sp, #80]	; 0x50
  405de6:	b11c      	cbz	r4, 405df0 <_vfprintf_r+0x2c>
  405de8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  405dea:	2b00      	cmp	r3, #0
  405dec:	f000 825f 	beq.w	4062ae <_vfprintf_r+0x4ea>
  405df0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  405df4:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  405df8:	f013 0f01 	tst.w	r3, #1
  405dfc:	b293      	uxth	r3, r2
  405dfe:	d102      	bne.n	405e06 <_vfprintf_r+0x42>
  405e00:	0599      	lsls	r1, r3, #22
  405e02:	f140 8275 	bpl.w	4062f0 <_vfprintf_r+0x52c>
  405e06:	049f      	lsls	r7, r3, #18
  405e08:	d40a      	bmi.n	405e20 <_vfprintf_r+0x5c>
  405e0a:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  405e0e:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  405e12:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  405e16:	f8aa 300c 	strh.w	r3, [sl, #12]
  405e1a:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  405e1e:	b29b      	uxth	r3, r3
  405e20:	071e      	lsls	r6, r3, #28
  405e22:	f140 8223 	bpl.w	40626c <_vfprintf_r+0x4a8>
  405e26:	f8da 2010 	ldr.w	r2, [sl, #16]
  405e2a:	2a00      	cmp	r2, #0
  405e2c:	f000 821e 	beq.w	40626c <_vfprintf_r+0x4a8>
  405e30:	f003 021a 	and.w	r2, r3, #26
  405e34:	2a0a      	cmp	r2, #10
  405e36:	f000 823e 	beq.w	4062b6 <_vfprintf_r+0x4f2>
  405e3a:	2300      	movs	r3, #0
  405e3c:	4618      	mov	r0, r3
  405e3e:	9311      	str	r3, [sp, #68]	; 0x44
  405e40:	9313      	str	r3, [sp, #76]	; 0x4c
  405e42:	9312      	str	r3, [sp, #72]	; 0x48
  405e44:	9325      	str	r3, [sp, #148]	; 0x94
  405e46:	9324      	str	r3, [sp, #144]	; 0x90
  405e48:	9318      	str	r3, [sp, #96]	; 0x60
  405e4a:	9319      	str	r3, [sp, #100]	; 0x64
  405e4c:	930b      	str	r3, [sp, #44]	; 0x2c
  405e4e:	ab30      	add	r3, sp, #192	; 0xc0
  405e50:	9323      	str	r3, [sp, #140]	; 0x8c
  405e52:	4698      	mov	r8, r3
  405e54:	9016      	str	r0, [sp, #88]	; 0x58
  405e56:	9017      	str	r0, [sp, #92]	; 0x5c
  405e58:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  405e5c:	f899 3000 	ldrb.w	r3, [r9]
  405e60:	464c      	mov	r4, r9
  405e62:	b1eb      	cbz	r3, 405ea0 <_vfprintf_r+0xdc>
  405e64:	2b25      	cmp	r3, #37	; 0x25
  405e66:	d102      	bne.n	405e6e <_vfprintf_r+0xaa>
  405e68:	e01a      	b.n	405ea0 <_vfprintf_r+0xdc>
  405e6a:	2b25      	cmp	r3, #37	; 0x25
  405e6c:	d003      	beq.n	405e76 <_vfprintf_r+0xb2>
  405e6e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405e72:	2b00      	cmp	r3, #0
  405e74:	d1f9      	bne.n	405e6a <_vfprintf_r+0xa6>
  405e76:	eba4 0509 	sub.w	r5, r4, r9
  405e7a:	b18d      	cbz	r5, 405ea0 <_vfprintf_r+0xdc>
  405e7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405e7e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405e80:	f8c8 9000 	str.w	r9, [r8]
  405e84:	3301      	adds	r3, #1
  405e86:	442a      	add	r2, r5
  405e88:	2b07      	cmp	r3, #7
  405e8a:	f8c8 5004 	str.w	r5, [r8, #4]
  405e8e:	9225      	str	r2, [sp, #148]	; 0x94
  405e90:	9324      	str	r3, [sp, #144]	; 0x90
  405e92:	f300 8201 	bgt.w	406298 <_vfprintf_r+0x4d4>
  405e96:	f108 0808 	add.w	r8, r8, #8
  405e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405e9c:	442b      	add	r3, r5
  405e9e:	930b      	str	r3, [sp, #44]	; 0x2c
  405ea0:	7823      	ldrb	r3, [r4, #0]
  405ea2:	2b00      	cmp	r3, #0
  405ea4:	f000 83f0 	beq.w	406688 <_vfprintf_r+0x8c4>
  405ea8:	2300      	movs	r3, #0
  405eaa:	461a      	mov	r2, r3
  405eac:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405eb0:	4619      	mov	r1, r3
  405eb2:	930c      	str	r3, [sp, #48]	; 0x30
  405eb4:	469b      	mov	fp, r3
  405eb6:	7866      	ldrb	r6, [r4, #1]
  405eb8:	f04f 33ff 	mov.w	r3, #4294967295
  405ebc:	f104 0901 	add.w	r9, r4, #1
  405ec0:	9309      	str	r3, [sp, #36]	; 0x24
  405ec2:	f109 0901 	add.w	r9, r9, #1
  405ec6:	f1a6 0320 	sub.w	r3, r6, #32
  405eca:	2b58      	cmp	r3, #88	; 0x58
  405ecc:	f200 83bf 	bhi.w	40664e <_vfprintf_r+0x88a>
  405ed0:	e8df f013 	tbh	[pc, r3, lsl #1]
  405ed4:	03bd02e0 	.word	0x03bd02e0
  405ed8:	034f03bd 	.word	0x034f03bd
  405edc:	03bd03bd 	.word	0x03bd03bd
  405ee0:	03bd03bd 	.word	0x03bd03bd
  405ee4:	03bd03bd 	.word	0x03bd03bd
  405ee8:	03080354 	.word	0x03080354
  405eec:	021a03bd 	.word	0x021a03bd
  405ef0:	03bd02e8 	.word	0x03bd02e8
  405ef4:	033a0303 	.word	0x033a0303
  405ef8:	033a033a 	.word	0x033a033a
  405efc:	033a033a 	.word	0x033a033a
  405f00:	033a033a 	.word	0x033a033a
  405f04:	033a033a 	.word	0x033a033a
  405f08:	03bd03bd 	.word	0x03bd03bd
  405f0c:	03bd03bd 	.word	0x03bd03bd
  405f10:	03bd03bd 	.word	0x03bd03bd
  405f14:	03bd03bd 	.word	0x03bd03bd
  405f18:	03bd03bd 	.word	0x03bd03bd
  405f1c:	03620349 	.word	0x03620349
  405f20:	036203bd 	.word	0x036203bd
  405f24:	03bd03bd 	.word	0x03bd03bd
  405f28:	03bd03bd 	.word	0x03bd03bd
  405f2c:	03bd03a2 	.word	0x03bd03a2
  405f30:	006f03bd 	.word	0x006f03bd
  405f34:	03bd03bd 	.word	0x03bd03bd
  405f38:	03bd03bd 	.word	0x03bd03bd
  405f3c:	005903bd 	.word	0x005903bd
  405f40:	03bd03bd 	.word	0x03bd03bd
  405f44:	03bd031e 	.word	0x03bd031e
  405f48:	03bd03bd 	.word	0x03bd03bd
  405f4c:	03bd03bd 	.word	0x03bd03bd
  405f50:	03bd03bd 	.word	0x03bd03bd
  405f54:	03bd03bd 	.word	0x03bd03bd
  405f58:	032403bd 	.word	0x032403bd
  405f5c:	03620273 	.word	0x03620273
  405f60:	03620362 	.word	0x03620362
  405f64:	027302b7 	.word	0x027302b7
  405f68:	03bd03bd 	.word	0x03bd03bd
  405f6c:	03bd02bc 	.word	0x03bd02bc
  405f70:	007102c9 	.word	0x007102c9
  405f74:	0247030d 	.word	0x0247030d
  405f78:	025203bd 	.word	0x025203bd
  405f7c:	005b03bd 	.word	0x005b03bd
  405f80:	03bd03bd 	.word	0x03bd03bd
  405f84:	021f      	.short	0x021f
  405f86:	f04b 0b10 	orr.w	fp, fp, #16
  405f8a:	f01b 0f20 	tst.w	fp, #32
  405f8e:	f040 8353 	bne.w	406638 <_vfprintf_r+0x874>
  405f92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405f94:	f01b 0f10 	tst.w	fp, #16
  405f98:	4613      	mov	r3, r2
  405f9a:	f040 85b4 	bne.w	406b06 <_vfprintf_r+0xd42>
  405f9e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405fa2:	f000 85b0 	beq.w	406b06 <_vfprintf_r+0xd42>
  405fa6:	8814      	ldrh	r4, [r2, #0]
  405fa8:	3204      	adds	r2, #4
  405faa:	2500      	movs	r5, #0
  405fac:	2301      	movs	r3, #1
  405fae:	920e      	str	r2, [sp, #56]	; 0x38
  405fb0:	e014      	b.n	405fdc <_vfprintf_r+0x218>
  405fb2:	f04b 0b10 	orr.w	fp, fp, #16
  405fb6:	f01b 0320 	ands.w	r3, fp, #32
  405fba:	f040 8332 	bne.w	406622 <_vfprintf_r+0x85e>
  405fbe:	f01b 0210 	ands.w	r2, fp, #16
  405fc2:	f040 8589 	bne.w	406ad8 <_vfprintf_r+0xd14>
  405fc6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  405fca:	f000 8585 	beq.w	406ad8 <_vfprintf_r+0xd14>
  405fce:	990e      	ldr	r1, [sp, #56]	; 0x38
  405fd0:	4613      	mov	r3, r2
  405fd2:	460a      	mov	r2, r1
  405fd4:	3204      	adds	r2, #4
  405fd6:	880c      	ldrh	r4, [r1, #0]
  405fd8:	920e      	str	r2, [sp, #56]	; 0x38
  405fda:	2500      	movs	r5, #0
  405fdc:	f04f 0a00 	mov.w	sl, #0
  405fe0:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405fe4:	9909      	ldr	r1, [sp, #36]	; 0x24
  405fe6:	1c4a      	adds	r2, r1, #1
  405fe8:	f000 820b 	beq.w	406402 <_vfprintf_r+0x63e>
  405fec:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  405ff0:	9206      	str	r2, [sp, #24]
  405ff2:	ea54 0205 	orrs.w	r2, r4, r5
  405ff6:	f040 820a 	bne.w	40640e <_vfprintf_r+0x64a>
  405ffa:	2900      	cmp	r1, #0
  405ffc:	f040 846f 	bne.w	4068de <_vfprintf_r+0xb1a>
  406000:	2b00      	cmp	r3, #0
  406002:	f040 852d 	bne.w	406a60 <_vfprintf_r+0xc9c>
  406006:	f01b 0301 	ands.w	r3, fp, #1
  40600a:	930d      	str	r3, [sp, #52]	; 0x34
  40600c:	f000 8668 	beq.w	406ce0 <_vfprintf_r+0xf1c>
  406010:	af40      	add	r7, sp, #256	; 0x100
  406012:	2330      	movs	r3, #48	; 0x30
  406014:	f807 3d41 	strb.w	r3, [r7, #-65]!
  406018:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40601a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40601c:	4293      	cmp	r3, r2
  40601e:	bfb8      	it	lt
  406020:	4613      	movlt	r3, r2
  406022:	9307      	str	r3, [sp, #28]
  406024:	2300      	movs	r3, #0
  406026:	9310      	str	r3, [sp, #64]	; 0x40
  406028:	f1ba 0f00 	cmp.w	sl, #0
  40602c:	d002      	beq.n	406034 <_vfprintf_r+0x270>
  40602e:	9b07      	ldr	r3, [sp, #28]
  406030:	3301      	adds	r3, #1
  406032:	9307      	str	r3, [sp, #28]
  406034:	9b06      	ldr	r3, [sp, #24]
  406036:	f013 0302 	ands.w	r3, r3, #2
  40603a:	930f      	str	r3, [sp, #60]	; 0x3c
  40603c:	d002      	beq.n	406044 <_vfprintf_r+0x280>
  40603e:	9b07      	ldr	r3, [sp, #28]
  406040:	3302      	adds	r3, #2
  406042:	9307      	str	r3, [sp, #28]
  406044:	9b06      	ldr	r3, [sp, #24]
  406046:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40604a:	f040 831b 	bne.w	406684 <_vfprintf_r+0x8c0>
  40604e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406050:	9a07      	ldr	r2, [sp, #28]
  406052:	eba3 0b02 	sub.w	fp, r3, r2
  406056:	f1bb 0f00 	cmp.w	fp, #0
  40605a:	f340 8313 	ble.w	406684 <_vfprintf_r+0x8c0>
  40605e:	f1bb 0f10 	cmp.w	fp, #16
  406062:	9925      	ldr	r1, [sp, #148]	; 0x94
  406064:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406066:	dd28      	ble.n	4060ba <_vfprintf_r+0x2f6>
  406068:	4643      	mov	r3, r8
  40606a:	2410      	movs	r4, #16
  40606c:	46a8      	mov	r8, r5
  40606e:	f8dd a020 	ldr.w	sl, [sp, #32]
  406072:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406074:	e006      	b.n	406084 <_vfprintf_r+0x2c0>
  406076:	f1ab 0b10 	sub.w	fp, fp, #16
  40607a:	f1bb 0f10 	cmp.w	fp, #16
  40607e:	f103 0308 	add.w	r3, r3, #8
  406082:	dd18      	ble.n	4060b6 <_vfprintf_r+0x2f2>
  406084:	3201      	adds	r2, #1
  406086:	48b9      	ldr	r0, [pc, #740]	; (40636c <_vfprintf_r+0x5a8>)
  406088:	9224      	str	r2, [sp, #144]	; 0x90
  40608a:	3110      	adds	r1, #16
  40608c:	2a07      	cmp	r2, #7
  40608e:	9125      	str	r1, [sp, #148]	; 0x94
  406090:	e883 0011 	stmia.w	r3, {r0, r4}
  406094:	ddef      	ble.n	406076 <_vfprintf_r+0x2b2>
  406096:	aa23      	add	r2, sp, #140	; 0x8c
  406098:	4629      	mov	r1, r5
  40609a:	4650      	mov	r0, sl
  40609c:	f7fe fffe 	bl	40509c <__sprint_r>
  4060a0:	2800      	cmp	r0, #0
  4060a2:	f040 836a 	bne.w	40677a <_vfprintf_r+0x9b6>
  4060a6:	f1ab 0b10 	sub.w	fp, fp, #16
  4060aa:	f1bb 0f10 	cmp.w	fp, #16
  4060ae:	9925      	ldr	r1, [sp, #148]	; 0x94
  4060b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4060b2:	ab30      	add	r3, sp, #192	; 0xc0
  4060b4:	dce6      	bgt.n	406084 <_vfprintf_r+0x2c0>
  4060b6:	4645      	mov	r5, r8
  4060b8:	4698      	mov	r8, r3
  4060ba:	3201      	adds	r2, #1
  4060bc:	4bab      	ldr	r3, [pc, #684]	; (40636c <_vfprintf_r+0x5a8>)
  4060be:	9224      	str	r2, [sp, #144]	; 0x90
  4060c0:	eb0b 0401 	add.w	r4, fp, r1
  4060c4:	2a07      	cmp	r2, #7
  4060c6:	9425      	str	r4, [sp, #148]	; 0x94
  4060c8:	e888 0808 	stmia.w	r8, {r3, fp}
  4060cc:	f300 84cd 	bgt.w	406a6a <_vfprintf_r+0xca6>
  4060d0:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4060d4:	f108 0808 	add.w	r8, r8, #8
  4060d8:	f1ba 0f00 	cmp.w	sl, #0
  4060dc:	d00e      	beq.n	4060fc <_vfprintf_r+0x338>
  4060de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4060e0:	3301      	adds	r3, #1
  4060e2:	3401      	adds	r4, #1
  4060e4:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  4060e8:	2201      	movs	r2, #1
  4060ea:	2b07      	cmp	r3, #7
  4060ec:	9425      	str	r4, [sp, #148]	; 0x94
  4060ee:	9324      	str	r3, [sp, #144]	; 0x90
  4060f0:	e888 0006 	stmia.w	r8, {r1, r2}
  4060f4:	f300 840a 	bgt.w	40690c <_vfprintf_r+0xb48>
  4060f8:	f108 0808 	add.w	r8, r8, #8
  4060fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4060fe:	b16b      	cbz	r3, 40611c <_vfprintf_r+0x358>
  406100:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406102:	3301      	adds	r3, #1
  406104:	3402      	adds	r4, #2
  406106:	a91c      	add	r1, sp, #112	; 0x70
  406108:	2202      	movs	r2, #2
  40610a:	2b07      	cmp	r3, #7
  40610c:	9425      	str	r4, [sp, #148]	; 0x94
  40610e:	9324      	str	r3, [sp, #144]	; 0x90
  406110:	e888 0006 	stmia.w	r8, {r1, r2}
  406114:	f300 8406 	bgt.w	406924 <_vfprintf_r+0xb60>
  406118:	f108 0808 	add.w	r8, r8, #8
  40611c:	2d80      	cmp	r5, #128	; 0x80
  40611e:	f000 832e 	beq.w	40677e <_vfprintf_r+0x9ba>
  406122:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406124:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406126:	eba3 0a02 	sub.w	sl, r3, r2
  40612a:	f1ba 0f00 	cmp.w	sl, #0
  40612e:	dd3b      	ble.n	4061a8 <_vfprintf_r+0x3e4>
  406130:	f1ba 0f10 	cmp.w	sl, #16
  406134:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406136:	4d8e      	ldr	r5, [pc, #568]	; (406370 <_vfprintf_r+0x5ac>)
  406138:	dd2b      	ble.n	406192 <_vfprintf_r+0x3ce>
  40613a:	4642      	mov	r2, r8
  40613c:	4621      	mov	r1, r4
  40613e:	46b0      	mov	r8, r6
  406140:	f04f 0b10 	mov.w	fp, #16
  406144:	462e      	mov	r6, r5
  406146:	9c08      	ldr	r4, [sp, #32]
  406148:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40614a:	e006      	b.n	40615a <_vfprintf_r+0x396>
  40614c:	f1aa 0a10 	sub.w	sl, sl, #16
  406150:	f1ba 0f10 	cmp.w	sl, #16
  406154:	f102 0208 	add.w	r2, r2, #8
  406158:	dd17      	ble.n	40618a <_vfprintf_r+0x3c6>
  40615a:	3301      	adds	r3, #1
  40615c:	3110      	adds	r1, #16
  40615e:	2b07      	cmp	r3, #7
  406160:	9125      	str	r1, [sp, #148]	; 0x94
  406162:	9324      	str	r3, [sp, #144]	; 0x90
  406164:	e882 0840 	stmia.w	r2, {r6, fp}
  406168:	ddf0      	ble.n	40614c <_vfprintf_r+0x388>
  40616a:	aa23      	add	r2, sp, #140	; 0x8c
  40616c:	4629      	mov	r1, r5
  40616e:	4620      	mov	r0, r4
  406170:	f7fe ff94 	bl	40509c <__sprint_r>
  406174:	2800      	cmp	r0, #0
  406176:	f040 8300 	bne.w	40677a <_vfprintf_r+0x9b6>
  40617a:	f1aa 0a10 	sub.w	sl, sl, #16
  40617e:	f1ba 0f10 	cmp.w	sl, #16
  406182:	9925      	ldr	r1, [sp, #148]	; 0x94
  406184:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406186:	aa30      	add	r2, sp, #192	; 0xc0
  406188:	dce7      	bgt.n	40615a <_vfprintf_r+0x396>
  40618a:	4635      	mov	r5, r6
  40618c:	460c      	mov	r4, r1
  40618e:	4646      	mov	r6, r8
  406190:	4690      	mov	r8, r2
  406192:	3301      	adds	r3, #1
  406194:	4454      	add	r4, sl
  406196:	2b07      	cmp	r3, #7
  406198:	9425      	str	r4, [sp, #148]	; 0x94
  40619a:	9324      	str	r3, [sp, #144]	; 0x90
  40619c:	e888 0420 	stmia.w	r8, {r5, sl}
  4061a0:	f300 83a9 	bgt.w	4068f6 <_vfprintf_r+0xb32>
  4061a4:	f108 0808 	add.w	r8, r8, #8
  4061a8:	9b06      	ldr	r3, [sp, #24]
  4061aa:	05db      	lsls	r3, r3, #23
  4061ac:	f100 8285 	bmi.w	4066ba <_vfprintf_r+0x8f6>
  4061b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4061b2:	990d      	ldr	r1, [sp, #52]	; 0x34
  4061b4:	f8c8 7000 	str.w	r7, [r8]
  4061b8:	3301      	adds	r3, #1
  4061ba:	440c      	add	r4, r1
  4061bc:	2b07      	cmp	r3, #7
  4061be:	9425      	str	r4, [sp, #148]	; 0x94
  4061c0:	f8c8 1004 	str.w	r1, [r8, #4]
  4061c4:	9324      	str	r3, [sp, #144]	; 0x90
  4061c6:	f300 8375 	bgt.w	4068b4 <_vfprintf_r+0xaf0>
  4061ca:	f108 0808 	add.w	r8, r8, #8
  4061ce:	9b06      	ldr	r3, [sp, #24]
  4061d0:	0759      	lsls	r1, r3, #29
  4061d2:	d53b      	bpl.n	40624c <_vfprintf_r+0x488>
  4061d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4061d6:	9a07      	ldr	r2, [sp, #28]
  4061d8:	1a9d      	subs	r5, r3, r2
  4061da:	2d00      	cmp	r5, #0
  4061dc:	dd36      	ble.n	40624c <_vfprintf_r+0x488>
  4061de:	2d10      	cmp	r5, #16
  4061e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4061e2:	dd21      	ble.n	406228 <_vfprintf_r+0x464>
  4061e4:	2610      	movs	r6, #16
  4061e6:	9f08      	ldr	r7, [sp, #32]
  4061e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4061ec:	e004      	b.n	4061f8 <_vfprintf_r+0x434>
  4061ee:	3d10      	subs	r5, #16
  4061f0:	2d10      	cmp	r5, #16
  4061f2:	f108 0808 	add.w	r8, r8, #8
  4061f6:	dd17      	ble.n	406228 <_vfprintf_r+0x464>
  4061f8:	3301      	adds	r3, #1
  4061fa:	4a5c      	ldr	r2, [pc, #368]	; (40636c <_vfprintf_r+0x5a8>)
  4061fc:	9324      	str	r3, [sp, #144]	; 0x90
  4061fe:	3410      	adds	r4, #16
  406200:	2b07      	cmp	r3, #7
  406202:	9425      	str	r4, [sp, #148]	; 0x94
  406204:	e888 0044 	stmia.w	r8, {r2, r6}
  406208:	ddf1      	ble.n	4061ee <_vfprintf_r+0x42a>
  40620a:	aa23      	add	r2, sp, #140	; 0x8c
  40620c:	4651      	mov	r1, sl
  40620e:	4638      	mov	r0, r7
  406210:	f7fe ff44 	bl	40509c <__sprint_r>
  406214:	2800      	cmp	r0, #0
  406216:	f040 823f 	bne.w	406698 <_vfprintf_r+0x8d4>
  40621a:	3d10      	subs	r5, #16
  40621c:	2d10      	cmp	r5, #16
  40621e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406220:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406222:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406226:	dce7      	bgt.n	4061f8 <_vfprintf_r+0x434>
  406228:	3301      	adds	r3, #1
  40622a:	4a50      	ldr	r2, [pc, #320]	; (40636c <_vfprintf_r+0x5a8>)
  40622c:	9324      	str	r3, [sp, #144]	; 0x90
  40622e:	442c      	add	r4, r5
  406230:	2b07      	cmp	r3, #7
  406232:	9425      	str	r4, [sp, #148]	; 0x94
  406234:	e888 0024 	stmia.w	r8, {r2, r5}
  406238:	dd08      	ble.n	40624c <_vfprintf_r+0x488>
  40623a:	aa23      	add	r2, sp, #140	; 0x8c
  40623c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40623e:	9808      	ldr	r0, [sp, #32]
  406240:	f7fe ff2c 	bl	40509c <__sprint_r>
  406244:	2800      	cmp	r0, #0
  406246:	f040 8347 	bne.w	4068d8 <_vfprintf_r+0xb14>
  40624a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40624c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40624e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406250:	9907      	ldr	r1, [sp, #28]
  406252:	428a      	cmp	r2, r1
  406254:	bfac      	ite	ge
  406256:	189b      	addge	r3, r3, r2
  406258:	185b      	addlt	r3, r3, r1
  40625a:	930b      	str	r3, [sp, #44]	; 0x2c
  40625c:	2c00      	cmp	r4, #0
  40625e:	f040 8333 	bne.w	4068c8 <_vfprintf_r+0xb04>
  406262:	2300      	movs	r3, #0
  406264:	9324      	str	r3, [sp, #144]	; 0x90
  406266:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40626a:	e5f7      	b.n	405e5c <_vfprintf_r+0x98>
  40626c:	4651      	mov	r1, sl
  40626e:	9808      	ldr	r0, [sp, #32]
  406270:	f001 f896 	bl	4073a0 <__swsetup_r>
  406274:	2800      	cmp	r0, #0
  406276:	d038      	beq.n	4062ea <_vfprintf_r+0x526>
  406278:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  40627c:	07dd      	lsls	r5, r3, #31
  40627e:	d404      	bmi.n	40628a <_vfprintf_r+0x4c6>
  406280:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406284:	059c      	lsls	r4, r3, #22
  406286:	f140 85ca 	bpl.w	406e1e <_vfprintf_r+0x105a>
  40628a:	f04f 33ff 	mov.w	r3, #4294967295
  40628e:	930b      	str	r3, [sp, #44]	; 0x2c
  406290:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406292:	b041      	add	sp, #260	; 0x104
  406294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406298:	aa23      	add	r2, sp, #140	; 0x8c
  40629a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40629c:	9808      	ldr	r0, [sp, #32]
  40629e:	f7fe fefd 	bl	40509c <__sprint_r>
  4062a2:	2800      	cmp	r0, #0
  4062a4:	f040 8318 	bne.w	4068d8 <_vfprintf_r+0xb14>
  4062a8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4062ac:	e5f5      	b.n	405e9a <_vfprintf_r+0xd6>
  4062ae:	9808      	ldr	r0, [sp, #32]
  4062b0:	f002 f9a8 	bl	408604 <__sinit>
  4062b4:	e59c      	b.n	405df0 <_vfprintf_r+0x2c>
  4062b6:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  4062ba:	2a00      	cmp	r2, #0
  4062bc:	f6ff adbd 	blt.w	405e3a <_vfprintf_r+0x76>
  4062c0:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  4062c4:	07d0      	lsls	r0, r2, #31
  4062c6:	d405      	bmi.n	4062d4 <_vfprintf_r+0x510>
  4062c8:	0599      	lsls	r1, r3, #22
  4062ca:	d403      	bmi.n	4062d4 <_vfprintf_r+0x510>
  4062cc:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4062d0:	f002 fd68 	bl	408da4 <__retarget_lock_release_recursive>
  4062d4:	462b      	mov	r3, r5
  4062d6:	464a      	mov	r2, r9
  4062d8:	4651      	mov	r1, sl
  4062da:	9808      	ldr	r0, [sp, #32]
  4062dc:	f001 f81e 	bl	40731c <__sbprintf>
  4062e0:	900b      	str	r0, [sp, #44]	; 0x2c
  4062e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4062e4:	b041      	add	sp, #260	; 0x104
  4062e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4062ea:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4062ee:	e59f      	b.n	405e30 <_vfprintf_r+0x6c>
  4062f0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4062f4:	f002 fd54 	bl	408da0 <__retarget_lock_acquire_recursive>
  4062f8:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  4062fc:	b293      	uxth	r3, r2
  4062fe:	e582      	b.n	405e06 <_vfprintf_r+0x42>
  406300:	980c      	ldr	r0, [sp, #48]	; 0x30
  406302:	930e      	str	r3, [sp, #56]	; 0x38
  406304:	4240      	negs	r0, r0
  406306:	900c      	str	r0, [sp, #48]	; 0x30
  406308:	f04b 0b04 	orr.w	fp, fp, #4
  40630c:	f899 6000 	ldrb.w	r6, [r9]
  406310:	e5d7      	b.n	405ec2 <_vfprintf_r+0xfe>
  406312:	2a00      	cmp	r2, #0
  406314:	f040 87df 	bne.w	4072d6 <_vfprintf_r+0x1512>
  406318:	4b16      	ldr	r3, [pc, #88]	; (406374 <_vfprintf_r+0x5b0>)
  40631a:	9318      	str	r3, [sp, #96]	; 0x60
  40631c:	f01b 0f20 	tst.w	fp, #32
  406320:	f040 84b9 	bne.w	406c96 <_vfprintf_r+0xed2>
  406324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406326:	f01b 0f10 	tst.w	fp, #16
  40632a:	4613      	mov	r3, r2
  40632c:	f040 83dc 	bne.w	406ae8 <_vfprintf_r+0xd24>
  406330:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406334:	f000 83d8 	beq.w	406ae8 <_vfprintf_r+0xd24>
  406338:	3304      	adds	r3, #4
  40633a:	8814      	ldrh	r4, [r2, #0]
  40633c:	930e      	str	r3, [sp, #56]	; 0x38
  40633e:	2500      	movs	r5, #0
  406340:	f01b 0f01 	tst.w	fp, #1
  406344:	f000 8322 	beq.w	40698c <_vfprintf_r+0xbc8>
  406348:	ea54 0305 	orrs.w	r3, r4, r5
  40634c:	f000 831e 	beq.w	40698c <_vfprintf_r+0xbc8>
  406350:	2330      	movs	r3, #48	; 0x30
  406352:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  406356:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40635a:	f04b 0b02 	orr.w	fp, fp, #2
  40635e:	2302      	movs	r3, #2
  406360:	e63c      	b.n	405fdc <_vfprintf_r+0x218>
  406362:	f04b 0b20 	orr.w	fp, fp, #32
  406366:	f899 6000 	ldrb.w	r6, [r9]
  40636a:	e5aa      	b.n	405ec2 <_vfprintf_r+0xfe>
  40636c:	0040aa60 	.word	0x0040aa60
  406370:	0040aa70 	.word	0x0040aa70
  406374:	0040aa10 	.word	0x0040aa10
  406378:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40637a:	6817      	ldr	r7, [r2, #0]
  40637c:	2400      	movs	r4, #0
  40637e:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  406382:	1d15      	adds	r5, r2, #4
  406384:	2f00      	cmp	r7, #0
  406386:	f000 864e 	beq.w	407026 <_vfprintf_r+0x1262>
  40638a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40638c:	1c53      	adds	r3, r2, #1
  40638e:	f000 85cc 	beq.w	406f2a <_vfprintf_r+0x1166>
  406392:	4621      	mov	r1, r4
  406394:	4638      	mov	r0, r7
  406396:	f003 f853 	bl	409440 <memchr>
  40639a:	2800      	cmp	r0, #0
  40639c:	f000 8697 	beq.w	4070ce <_vfprintf_r+0x130a>
  4063a0:	1bc3      	subs	r3, r0, r7
  4063a2:	930d      	str	r3, [sp, #52]	; 0x34
  4063a4:	9409      	str	r4, [sp, #36]	; 0x24
  4063a6:	950e      	str	r5, [sp, #56]	; 0x38
  4063a8:	f8cd b018 	str.w	fp, [sp, #24]
  4063ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4063b0:	9307      	str	r3, [sp, #28]
  4063b2:	9410      	str	r4, [sp, #64]	; 0x40
  4063b4:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4063b8:	e636      	b.n	406028 <_vfprintf_r+0x264>
  4063ba:	2a00      	cmp	r2, #0
  4063bc:	f040 8796 	bne.w	4072ec <_vfprintf_r+0x1528>
  4063c0:	f01b 0f20 	tst.w	fp, #32
  4063c4:	f040 845a 	bne.w	406c7c <_vfprintf_r+0xeb8>
  4063c8:	f01b 0f10 	tst.w	fp, #16
  4063cc:	f040 83a2 	bne.w	406b14 <_vfprintf_r+0xd50>
  4063d0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4063d4:	f000 839e 	beq.w	406b14 <_vfprintf_r+0xd50>
  4063d8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4063da:	f9b1 4000 	ldrsh.w	r4, [r1]
  4063de:	3104      	adds	r1, #4
  4063e0:	17e5      	asrs	r5, r4, #31
  4063e2:	4622      	mov	r2, r4
  4063e4:	462b      	mov	r3, r5
  4063e6:	910e      	str	r1, [sp, #56]	; 0x38
  4063e8:	2a00      	cmp	r2, #0
  4063ea:	f173 0300 	sbcs.w	r3, r3, #0
  4063ee:	f2c0 8487 	blt.w	406d00 <_vfprintf_r+0xf3c>
  4063f2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4063f4:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4063f8:	1c4a      	adds	r2, r1, #1
  4063fa:	f04f 0301 	mov.w	r3, #1
  4063fe:	f47f adf5 	bne.w	405fec <_vfprintf_r+0x228>
  406402:	ea54 0205 	orrs.w	r2, r4, r5
  406406:	f000 826c 	beq.w	4068e2 <_vfprintf_r+0xb1e>
  40640a:	f8cd b018 	str.w	fp, [sp, #24]
  40640e:	2b01      	cmp	r3, #1
  406410:	f000 8308 	beq.w	406a24 <_vfprintf_r+0xc60>
  406414:	2b02      	cmp	r3, #2
  406416:	f040 8295 	bne.w	406944 <_vfprintf_r+0xb80>
  40641a:	9818      	ldr	r0, [sp, #96]	; 0x60
  40641c:	af30      	add	r7, sp, #192	; 0xc0
  40641e:	0923      	lsrs	r3, r4, #4
  406420:	f004 010f 	and.w	r1, r4, #15
  406424:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  406428:	092a      	lsrs	r2, r5, #4
  40642a:	461c      	mov	r4, r3
  40642c:	4615      	mov	r5, r2
  40642e:	5c43      	ldrb	r3, [r0, r1]
  406430:	f807 3d01 	strb.w	r3, [r7, #-1]!
  406434:	ea54 0305 	orrs.w	r3, r4, r5
  406438:	d1f1      	bne.n	40641e <_vfprintf_r+0x65a>
  40643a:	ab30      	add	r3, sp, #192	; 0xc0
  40643c:	1bdb      	subs	r3, r3, r7
  40643e:	930d      	str	r3, [sp, #52]	; 0x34
  406440:	e5ea      	b.n	406018 <_vfprintf_r+0x254>
  406442:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  406446:	f899 6000 	ldrb.w	r6, [r9]
  40644a:	e53a      	b.n	405ec2 <_vfprintf_r+0xfe>
  40644c:	f899 6000 	ldrb.w	r6, [r9]
  406450:	2e6c      	cmp	r6, #108	; 0x6c
  406452:	bf03      	ittte	eq
  406454:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  406458:	f04b 0b20 	orreq.w	fp, fp, #32
  40645c:	f109 0901 	addeq.w	r9, r9, #1
  406460:	f04b 0b10 	orrne.w	fp, fp, #16
  406464:	e52d      	b.n	405ec2 <_vfprintf_r+0xfe>
  406466:	2a00      	cmp	r2, #0
  406468:	f040 874c 	bne.w	407304 <_vfprintf_r+0x1540>
  40646c:	f01b 0f20 	tst.w	fp, #32
  406470:	f040 853f 	bne.w	406ef2 <_vfprintf_r+0x112e>
  406474:	f01b 0f10 	tst.w	fp, #16
  406478:	f040 80fc 	bne.w	406674 <_vfprintf_r+0x8b0>
  40647c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406480:	f000 80f8 	beq.w	406674 <_vfprintf_r+0x8b0>
  406484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406486:	6813      	ldr	r3, [r2, #0]
  406488:	3204      	adds	r2, #4
  40648a:	920e      	str	r2, [sp, #56]	; 0x38
  40648c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  406490:	801a      	strh	r2, [r3, #0]
  406492:	e4e3      	b.n	405e5c <_vfprintf_r+0x98>
  406494:	f899 6000 	ldrb.w	r6, [r9]
  406498:	2900      	cmp	r1, #0
  40649a:	f47f ad12 	bne.w	405ec2 <_vfprintf_r+0xfe>
  40649e:	2201      	movs	r2, #1
  4064a0:	2120      	movs	r1, #32
  4064a2:	e50e      	b.n	405ec2 <_vfprintf_r+0xfe>
  4064a4:	f899 6000 	ldrb.w	r6, [r9]
  4064a8:	2e2a      	cmp	r6, #42	; 0x2a
  4064aa:	f109 0001 	add.w	r0, r9, #1
  4064ae:	f000 86f1 	beq.w	407294 <_vfprintf_r+0x14d0>
  4064b2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4064b6:	2b09      	cmp	r3, #9
  4064b8:	4681      	mov	r9, r0
  4064ba:	bf98      	it	ls
  4064bc:	2000      	movls	r0, #0
  4064be:	f200 863d 	bhi.w	40713c <_vfprintf_r+0x1378>
  4064c2:	f819 6b01 	ldrb.w	r6, [r9], #1
  4064c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4064ca:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  4064ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4064d2:	2b09      	cmp	r3, #9
  4064d4:	d9f5      	bls.n	4064c2 <_vfprintf_r+0x6fe>
  4064d6:	9009      	str	r0, [sp, #36]	; 0x24
  4064d8:	e4f5      	b.n	405ec6 <_vfprintf_r+0x102>
  4064da:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4064de:	f899 6000 	ldrb.w	r6, [r9]
  4064e2:	e4ee      	b.n	405ec2 <_vfprintf_r+0xfe>
  4064e4:	f899 6000 	ldrb.w	r6, [r9]
  4064e8:	2201      	movs	r2, #1
  4064ea:	212b      	movs	r1, #43	; 0x2b
  4064ec:	e4e9      	b.n	405ec2 <_vfprintf_r+0xfe>
  4064ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4064f0:	4bae      	ldr	r3, [pc, #696]	; (4067ac <_vfprintf_r+0x9e8>)
  4064f2:	6814      	ldr	r4, [r2, #0]
  4064f4:	9318      	str	r3, [sp, #96]	; 0x60
  4064f6:	2678      	movs	r6, #120	; 0x78
  4064f8:	2330      	movs	r3, #48	; 0x30
  4064fa:	3204      	adds	r2, #4
  4064fc:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  406500:	f04b 0b02 	orr.w	fp, fp, #2
  406504:	920e      	str	r2, [sp, #56]	; 0x38
  406506:	2500      	movs	r5, #0
  406508:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40650c:	2302      	movs	r3, #2
  40650e:	e565      	b.n	405fdc <_vfprintf_r+0x218>
  406510:	2a00      	cmp	r2, #0
  406512:	f040 86e4 	bne.w	4072de <_vfprintf_r+0x151a>
  406516:	4ba6      	ldr	r3, [pc, #664]	; (4067b0 <_vfprintf_r+0x9ec>)
  406518:	9318      	str	r3, [sp, #96]	; 0x60
  40651a:	e6ff      	b.n	40631c <_vfprintf_r+0x558>
  40651c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40651e:	f8cd b018 	str.w	fp, [sp, #24]
  406522:	680a      	ldr	r2, [r1, #0]
  406524:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  406528:	2300      	movs	r3, #0
  40652a:	460a      	mov	r2, r1
  40652c:	469a      	mov	sl, r3
  40652e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406532:	3204      	adds	r2, #4
  406534:	2301      	movs	r3, #1
  406536:	9307      	str	r3, [sp, #28]
  406538:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  40653c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  406540:	920e      	str	r2, [sp, #56]	; 0x38
  406542:	930d      	str	r3, [sp, #52]	; 0x34
  406544:	af26      	add	r7, sp, #152	; 0x98
  406546:	e575      	b.n	406034 <_vfprintf_r+0x270>
  406548:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40654c:	2000      	movs	r0, #0
  40654e:	f819 6b01 	ldrb.w	r6, [r9], #1
  406552:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406556:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  40655a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40655e:	2b09      	cmp	r3, #9
  406560:	d9f5      	bls.n	40654e <_vfprintf_r+0x78a>
  406562:	900c      	str	r0, [sp, #48]	; 0x30
  406564:	e4af      	b.n	405ec6 <_vfprintf_r+0x102>
  406566:	2a00      	cmp	r2, #0
  406568:	f040 86c8 	bne.w	4072fc <_vfprintf_r+0x1538>
  40656c:	f04b 0b10 	orr.w	fp, fp, #16
  406570:	e726      	b.n	4063c0 <_vfprintf_r+0x5fc>
  406572:	f04b 0b01 	orr.w	fp, fp, #1
  406576:	f899 6000 	ldrb.w	r6, [r9]
  40657a:	e4a2      	b.n	405ec2 <_vfprintf_r+0xfe>
  40657c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40657e:	6823      	ldr	r3, [r4, #0]
  406580:	930c      	str	r3, [sp, #48]	; 0x30
  406582:	4618      	mov	r0, r3
  406584:	2800      	cmp	r0, #0
  406586:	4623      	mov	r3, r4
  406588:	f103 0304 	add.w	r3, r3, #4
  40658c:	f6ff aeb8 	blt.w	406300 <_vfprintf_r+0x53c>
  406590:	930e      	str	r3, [sp, #56]	; 0x38
  406592:	f899 6000 	ldrb.w	r6, [r9]
  406596:	e494      	b.n	405ec2 <_vfprintf_r+0xfe>
  406598:	2a00      	cmp	r2, #0
  40659a:	f040 86b7 	bne.w	40730c <_vfprintf_r+0x1548>
  40659e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4065a0:	3507      	adds	r5, #7
  4065a2:	f025 0307 	bic.w	r3, r5, #7
  4065a6:	f103 0208 	add.w	r2, r3, #8
  4065aa:	920e      	str	r2, [sp, #56]	; 0x38
  4065ac:	681a      	ldr	r2, [r3, #0]
  4065ae:	9213      	str	r2, [sp, #76]	; 0x4c
  4065b0:	685b      	ldr	r3, [r3, #4]
  4065b2:	9312      	str	r3, [sp, #72]	; 0x48
  4065b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4065b6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  4065b8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4065bc:	4628      	mov	r0, r5
  4065be:	4621      	mov	r1, r4
  4065c0:	f04f 32ff 	mov.w	r2, #4294967295
  4065c4:	4b7b      	ldr	r3, [pc, #492]	; (4067b4 <_vfprintf_r+0x9f0>)
  4065c6:	f003 ff3d 	bl	40a444 <__aeabi_dcmpun>
  4065ca:	2800      	cmp	r0, #0
  4065cc:	f040 83a2 	bne.w	406d14 <_vfprintf_r+0xf50>
  4065d0:	4628      	mov	r0, r5
  4065d2:	4621      	mov	r1, r4
  4065d4:	f04f 32ff 	mov.w	r2, #4294967295
  4065d8:	4b76      	ldr	r3, [pc, #472]	; (4067b4 <_vfprintf_r+0x9f0>)
  4065da:	f7fe fa6d 	bl	404ab8 <__aeabi_dcmple>
  4065de:	2800      	cmp	r0, #0
  4065e0:	f040 8398 	bne.w	406d14 <_vfprintf_r+0xf50>
  4065e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4065e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4065e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4065ea:	9912      	ldr	r1, [sp, #72]	; 0x48
  4065ec:	f7fe fa5a 	bl	404aa4 <__aeabi_dcmplt>
  4065f0:	2800      	cmp	r0, #0
  4065f2:	f040 8435 	bne.w	406e60 <_vfprintf_r+0x109c>
  4065f6:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4065fa:	4f6f      	ldr	r7, [pc, #444]	; (4067b8 <_vfprintf_r+0x9f4>)
  4065fc:	4b6f      	ldr	r3, [pc, #444]	; (4067bc <_vfprintf_r+0x9f8>)
  4065fe:	2203      	movs	r2, #3
  406600:	2100      	movs	r1, #0
  406602:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  406606:	9207      	str	r2, [sp, #28]
  406608:	9109      	str	r1, [sp, #36]	; 0x24
  40660a:	9006      	str	r0, [sp, #24]
  40660c:	2e47      	cmp	r6, #71	; 0x47
  40660e:	bfd8      	it	le
  406610:	461f      	movle	r7, r3
  406612:	920d      	str	r2, [sp, #52]	; 0x34
  406614:	9110      	str	r1, [sp, #64]	; 0x40
  406616:	e507      	b.n	406028 <_vfprintf_r+0x264>
  406618:	f04b 0b08 	orr.w	fp, fp, #8
  40661c:	f899 6000 	ldrb.w	r6, [r9]
  406620:	e44f      	b.n	405ec2 <_vfprintf_r+0xfe>
  406622:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406624:	3507      	adds	r5, #7
  406626:	f025 0307 	bic.w	r3, r5, #7
  40662a:	f103 0208 	add.w	r2, r3, #8
  40662e:	e9d3 4500 	ldrd	r4, r5, [r3]
  406632:	920e      	str	r2, [sp, #56]	; 0x38
  406634:	2300      	movs	r3, #0
  406636:	e4d1      	b.n	405fdc <_vfprintf_r+0x218>
  406638:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40663a:	3507      	adds	r5, #7
  40663c:	f025 0307 	bic.w	r3, r5, #7
  406640:	f103 0208 	add.w	r2, r3, #8
  406644:	e9d3 4500 	ldrd	r4, r5, [r3]
  406648:	920e      	str	r2, [sp, #56]	; 0x38
  40664a:	2301      	movs	r3, #1
  40664c:	e4c6      	b.n	405fdc <_vfprintf_r+0x218>
  40664e:	2a00      	cmp	r2, #0
  406650:	f040 8650 	bne.w	4072f4 <_vfprintf_r+0x1530>
  406654:	b1c6      	cbz	r6, 406688 <_vfprintf_r+0x8c4>
  406656:	2300      	movs	r3, #0
  406658:	2201      	movs	r2, #1
  40665a:	469a      	mov	sl, r3
  40665c:	9207      	str	r2, [sp, #28]
  40665e:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  406662:	f8cd b018 	str.w	fp, [sp, #24]
  406666:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40666a:	9309      	str	r3, [sp, #36]	; 0x24
  40666c:	9310      	str	r3, [sp, #64]	; 0x40
  40666e:	920d      	str	r2, [sp, #52]	; 0x34
  406670:	af26      	add	r7, sp, #152	; 0x98
  406672:	e4df      	b.n	406034 <_vfprintf_r+0x270>
  406674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406676:	6813      	ldr	r3, [r2, #0]
  406678:	3204      	adds	r2, #4
  40667a:	920e      	str	r2, [sp, #56]	; 0x38
  40667c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40667e:	601a      	str	r2, [r3, #0]
  406680:	f7ff bbec 	b.w	405e5c <_vfprintf_r+0x98>
  406684:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406686:	e527      	b.n	4060d8 <_vfprintf_r+0x314>
  406688:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40668a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  40668e:	2b00      	cmp	r3, #0
  406690:	f040 8594 	bne.w	4071bc <_vfprintf_r+0x13f8>
  406694:	2300      	movs	r3, #0
  406696:	9324      	str	r3, [sp, #144]	; 0x90
  406698:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  40669c:	f013 0f01 	tst.w	r3, #1
  4066a0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4066a4:	d102      	bne.n	4066ac <_vfprintf_r+0x8e8>
  4066a6:	059a      	lsls	r2, r3, #22
  4066a8:	f140 8249 	bpl.w	406b3e <_vfprintf_r+0xd7a>
  4066ac:	065b      	lsls	r3, r3, #25
  4066ae:	f53f adec 	bmi.w	40628a <_vfprintf_r+0x4c6>
  4066b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4066b4:	b041      	add	sp, #260	; 0x104
  4066b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4066ba:	2e65      	cmp	r6, #101	; 0x65
  4066bc:	f340 80b2 	ble.w	406824 <_vfprintf_r+0xa60>
  4066c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4066c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4066c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4066c6:	9912      	ldr	r1, [sp, #72]	; 0x48
  4066c8:	f7fe f9e2 	bl	404a90 <__aeabi_dcmpeq>
  4066cc:	2800      	cmp	r0, #0
  4066ce:	f000 8160 	beq.w	406992 <_vfprintf_r+0xbce>
  4066d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4066d4:	4a3a      	ldr	r2, [pc, #232]	; (4067c0 <_vfprintf_r+0x9fc>)
  4066d6:	f8c8 2000 	str.w	r2, [r8]
  4066da:	3301      	adds	r3, #1
  4066dc:	3401      	adds	r4, #1
  4066de:	2201      	movs	r2, #1
  4066e0:	2b07      	cmp	r3, #7
  4066e2:	9425      	str	r4, [sp, #148]	; 0x94
  4066e4:	9324      	str	r3, [sp, #144]	; 0x90
  4066e6:	f8c8 2004 	str.w	r2, [r8, #4]
  4066ea:	f300 83bf 	bgt.w	406e6c <_vfprintf_r+0x10a8>
  4066ee:	f108 0808 	add.w	r8, r8, #8
  4066f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4066f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4066f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4066f8:	4293      	cmp	r3, r2
  4066fa:	db03      	blt.n	406704 <_vfprintf_r+0x940>
  4066fc:	9b06      	ldr	r3, [sp, #24]
  4066fe:	07df      	lsls	r7, r3, #31
  406700:	f57f ad65 	bpl.w	4061ce <_vfprintf_r+0x40a>
  406704:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406706:	9914      	ldr	r1, [sp, #80]	; 0x50
  406708:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40670a:	f8c8 2000 	str.w	r2, [r8]
  40670e:	3301      	adds	r3, #1
  406710:	440c      	add	r4, r1
  406712:	2b07      	cmp	r3, #7
  406714:	f8c8 1004 	str.w	r1, [r8, #4]
  406718:	9425      	str	r4, [sp, #148]	; 0x94
  40671a:	9324      	str	r3, [sp, #144]	; 0x90
  40671c:	f300 83f8 	bgt.w	406f10 <_vfprintf_r+0x114c>
  406720:	f108 0808 	add.w	r8, r8, #8
  406724:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406726:	1e5e      	subs	r6, r3, #1
  406728:	2e00      	cmp	r6, #0
  40672a:	f77f ad50 	ble.w	4061ce <_vfprintf_r+0x40a>
  40672e:	2e10      	cmp	r6, #16
  406730:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406732:	4d24      	ldr	r5, [pc, #144]	; (4067c4 <_vfprintf_r+0xa00>)
  406734:	f340 81dd 	ble.w	406af2 <_vfprintf_r+0xd2e>
  406738:	2710      	movs	r7, #16
  40673a:	f8dd a020 	ldr.w	sl, [sp, #32]
  40673e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406742:	e005      	b.n	406750 <_vfprintf_r+0x98c>
  406744:	f108 0808 	add.w	r8, r8, #8
  406748:	3e10      	subs	r6, #16
  40674a:	2e10      	cmp	r6, #16
  40674c:	f340 81d1 	ble.w	406af2 <_vfprintf_r+0xd2e>
  406750:	3301      	adds	r3, #1
  406752:	3410      	adds	r4, #16
  406754:	2b07      	cmp	r3, #7
  406756:	9425      	str	r4, [sp, #148]	; 0x94
  406758:	9324      	str	r3, [sp, #144]	; 0x90
  40675a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40675e:	ddf1      	ble.n	406744 <_vfprintf_r+0x980>
  406760:	aa23      	add	r2, sp, #140	; 0x8c
  406762:	4659      	mov	r1, fp
  406764:	4650      	mov	r0, sl
  406766:	f7fe fc99 	bl	40509c <__sprint_r>
  40676a:	2800      	cmp	r0, #0
  40676c:	f040 83cd 	bne.w	406f0a <_vfprintf_r+0x1146>
  406770:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406772:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406774:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406778:	e7e6      	b.n	406748 <_vfprintf_r+0x984>
  40677a:	46aa      	mov	sl, r5
  40677c:	e78c      	b.n	406698 <_vfprintf_r+0x8d4>
  40677e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406780:	9a07      	ldr	r2, [sp, #28]
  406782:	eba3 0a02 	sub.w	sl, r3, r2
  406786:	f1ba 0f00 	cmp.w	sl, #0
  40678a:	f77f acca 	ble.w	406122 <_vfprintf_r+0x35e>
  40678e:	f1ba 0f10 	cmp.w	sl, #16
  406792:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406794:	4d0b      	ldr	r5, [pc, #44]	; (4067c4 <_vfprintf_r+0xa00>)
  406796:	dd39      	ble.n	40680c <_vfprintf_r+0xa48>
  406798:	4642      	mov	r2, r8
  40679a:	4621      	mov	r1, r4
  40679c:	46b0      	mov	r8, r6
  40679e:	f04f 0b10 	mov.w	fp, #16
  4067a2:	462e      	mov	r6, r5
  4067a4:	9c08      	ldr	r4, [sp, #32]
  4067a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4067a8:	e015      	b.n	4067d6 <_vfprintf_r+0xa12>
  4067aa:	bf00      	nop
  4067ac:	0040aa10 	.word	0x0040aa10
  4067b0:	0040a9fc 	.word	0x0040a9fc
  4067b4:	7fefffff 	.word	0x7fefffff
  4067b8:	0040aa50 	.word	0x0040aa50
  4067bc:	0040aa4c 	.word	0x0040aa4c
  4067c0:	0040aa5c 	.word	0x0040aa5c
  4067c4:	0040aa70 	.word	0x0040aa70
  4067c8:	f1aa 0a10 	sub.w	sl, sl, #16
  4067cc:	f1ba 0f10 	cmp.w	sl, #16
  4067d0:	f102 0208 	add.w	r2, r2, #8
  4067d4:	dd16      	ble.n	406804 <_vfprintf_r+0xa40>
  4067d6:	3301      	adds	r3, #1
  4067d8:	3110      	adds	r1, #16
  4067da:	2b07      	cmp	r3, #7
  4067dc:	9125      	str	r1, [sp, #148]	; 0x94
  4067de:	9324      	str	r3, [sp, #144]	; 0x90
  4067e0:	e882 0840 	stmia.w	r2, {r6, fp}
  4067e4:	ddf0      	ble.n	4067c8 <_vfprintf_r+0xa04>
  4067e6:	aa23      	add	r2, sp, #140	; 0x8c
  4067e8:	4629      	mov	r1, r5
  4067ea:	4620      	mov	r0, r4
  4067ec:	f7fe fc56 	bl	40509c <__sprint_r>
  4067f0:	2800      	cmp	r0, #0
  4067f2:	d1c2      	bne.n	40677a <_vfprintf_r+0x9b6>
  4067f4:	f1aa 0a10 	sub.w	sl, sl, #16
  4067f8:	f1ba 0f10 	cmp.w	sl, #16
  4067fc:	9925      	ldr	r1, [sp, #148]	; 0x94
  4067fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406800:	aa30      	add	r2, sp, #192	; 0xc0
  406802:	dce8      	bgt.n	4067d6 <_vfprintf_r+0xa12>
  406804:	4635      	mov	r5, r6
  406806:	460c      	mov	r4, r1
  406808:	4646      	mov	r6, r8
  40680a:	4690      	mov	r8, r2
  40680c:	3301      	adds	r3, #1
  40680e:	4454      	add	r4, sl
  406810:	2b07      	cmp	r3, #7
  406812:	9425      	str	r4, [sp, #148]	; 0x94
  406814:	9324      	str	r3, [sp, #144]	; 0x90
  406816:	e888 0420 	stmia.w	r8, {r5, sl}
  40681a:	f300 8264 	bgt.w	406ce6 <_vfprintf_r+0xf22>
  40681e:	f108 0808 	add.w	r8, r8, #8
  406822:	e47e      	b.n	406122 <_vfprintf_r+0x35e>
  406824:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406826:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406828:	2b01      	cmp	r3, #1
  40682a:	f340 81fd 	ble.w	406c28 <_vfprintf_r+0xe64>
  40682e:	3601      	adds	r6, #1
  406830:	3401      	adds	r4, #1
  406832:	2301      	movs	r3, #1
  406834:	2e07      	cmp	r6, #7
  406836:	9425      	str	r4, [sp, #148]	; 0x94
  406838:	9624      	str	r6, [sp, #144]	; 0x90
  40683a:	f8c8 7000 	str.w	r7, [r8]
  40683e:	f8c8 3004 	str.w	r3, [r8, #4]
  406842:	f300 820e 	bgt.w	406c62 <_vfprintf_r+0xe9e>
  406846:	f108 0808 	add.w	r8, r8, #8
  40684a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40684c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40684e:	f8c8 3000 	str.w	r3, [r8]
  406852:	3601      	adds	r6, #1
  406854:	4414      	add	r4, r2
  406856:	2e07      	cmp	r6, #7
  406858:	9425      	str	r4, [sp, #148]	; 0x94
  40685a:	9624      	str	r6, [sp, #144]	; 0x90
  40685c:	f8c8 2004 	str.w	r2, [r8, #4]
  406860:	f300 822e 	bgt.w	406cc0 <_vfprintf_r+0xefc>
  406864:	f108 0808 	add.w	r8, r8, #8
  406868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40686a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40686c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40686e:	9912      	ldr	r1, [sp, #72]	; 0x48
  406870:	f7fe f90e 	bl	404a90 <__aeabi_dcmpeq>
  406874:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406876:	2800      	cmp	r0, #0
  406878:	f040 8106 	bne.w	406a88 <_vfprintf_r+0xcc4>
  40687c:	3b01      	subs	r3, #1
  40687e:	3601      	adds	r6, #1
  406880:	3701      	adds	r7, #1
  406882:	441c      	add	r4, r3
  406884:	2e07      	cmp	r6, #7
  406886:	9624      	str	r6, [sp, #144]	; 0x90
  406888:	9425      	str	r4, [sp, #148]	; 0x94
  40688a:	f8c8 7000 	str.w	r7, [r8]
  40688e:	f8c8 3004 	str.w	r3, [r8, #4]
  406892:	f300 81d9 	bgt.w	406c48 <_vfprintf_r+0xe84>
  406896:	f108 0808 	add.w	r8, r8, #8
  40689a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40689c:	f8c8 2004 	str.w	r2, [r8, #4]
  4068a0:	3601      	adds	r6, #1
  4068a2:	4414      	add	r4, r2
  4068a4:	ab1f      	add	r3, sp, #124	; 0x7c
  4068a6:	2e07      	cmp	r6, #7
  4068a8:	9425      	str	r4, [sp, #148]	; 0x94
  4068aa:	9624      	str	r6, [sp, #144]	; 0x90
  4068ac:	f8c8 3000 	str.w	r3, [r8]
  4068b0:	f77f ac8b 	ble.w	4061ca <_vfprintf_r+0x406>
  4068b4:	aa23      	add	r2, sp, #140	; 0x8c
  4068b6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4068b8:	9808      	ldr	r0, [sp, #32]
  4068ba:	f7fe fbef 	bl	40509c <__sprint_r>
  4068be:	b958      	cbnz	r0, 4068d8 <_vfprintf_r+0xb14>
  4068c0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4068c2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4068c6:	e482      	b.n	4061ce <_vfprintf_r+0x40a>
  4068c8:	aa23      	add	r2, sp, #140	; 0x8c
  4068ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  4068cc:	9808      	ldr	r0, [sp, #32]
  4068ce:	f7fe fbe5 	bl	40509c <__sprint_r>
  4068d2:	2800      	cmp	r0, #0
  4068d4:	f43f acc5 	beq.w	406262 <_vfprintf_r+0x49e>
  4068d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4068dc:	e6dc      	b.n	406698 <_vfprintf_r+0x8d4>
  4068de:	f8dd b018 	ldr.w	fp, [sp, #24]
  4068e2:	2b01      	cmp	r3, #1
  4068e4:	f000 8121 	beq.w	406b2a <_vfprintf_r+0xd66>
  4068e8:	2b02      	cmp	r3, #2
  4068ea:	d127      	bne.n	40693c <_vfprintf_r+0xb78>
  4068ec:	f8cd b018 	str.w	fp, [sp, #24]
  4068f0:	2400      	movs	r4, #0
  4068f2:	2500      	movs	r5, #0
  4068f4:	e591      	b.n	40641a <_vfprintf_r+0x656>
  4068f6:	aa23      	add	r2, sp, #140	; 0x8c
  4068f8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4068fa:	9808      	ldr	r0, [sp, #32]
  4068fc:	f7fe fbce 	bl	40509c <__sprint_r>
  406900:	2800      	cmp	r0, #0
  406902:	d1e9      	bne.n	4068d8 <_vfprintf_r+0xb14>
  406904:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406906:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40690a:	e44d      	b.n	4061a8 <_vfprintf_r+0x3e4>
  40690c:	aa23      	add	r2, sp, #140	; 0x8c
  40690e:	990a      	ldr	r1, [sp, #40]	; 0x28
  406910:	9808      	ldr	r0, [sp, #32]
  406912:	f7fe fbc3 	bl	40509c <__sprint_r>
  406916:	2800      	cmp	r0, #0
  406918:	d1de      	bne.n	4068d8 <_vfprintf_r+0xb14>
  40691a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40691c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406920:	f7ff bbec 	b.w	4060fc <_vfprintf_r+0x338>
  406924:	aa23      	add	r2, sp, #140	; 0x8c
  406926:	990a      	ldr	r1, [sp, #40]	; 0x28
  406928:	9808      	ldr	r0, [sp, #32]
  40692a:	f7fe fbb7 	bl	40509c <__sprint_r>
  40692e:	2800      	cmp	r0, #0
  406930:	d1d2      	bne.n	4068d8 <_vfprintf_r+0xb14>
  406932:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406934:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406938:	f7ff bbf0 	b.w	40611c <_vfprintf_r+0x358>
  40693c:	f8cd b018 	str.w	fp, [sp, #24]
  406940:	2400      	movs	r4, #0
  406942:	2500      	movs	r5, #0
  406944:	a930      	add	r1, sp, #192	; 0xc0
  406946:	e000      	b.n	40694a <_vfprintf_r+0xb86>
  406948:	4639      	mov	r1, r7
  40694a:	08e2      	lsrs	r2, r4, #3
  40694c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  406950:	08e8      	lsrs	r0, r5, #3
  406952:	f004 0307 	and.w	r3, r4, #7
  406956:	4605      	mov	r5, r0
  406958:	4614      	mov	r4, r2
  40695a:	3330      	adds	r3, #48	; 0x30
  40695c:	ea54 0205 	orrs.w	r2, r4, r5
  406960:	f801 3c01 	strb.w	r3, [r1, #-1]
  406964:	f101 37ff 	add.w	r7, r1, #4294967295
  406968:	d1ee      	bne.n	406948 <_vfprintf_r+0xb84>
  40696a:	9a06      	ldr	r2, [sp, #24]
  40696c:	07d2      	lsls	r2, r2, #31
  40696e:	f57f ad64 	bpl.w	40643a <_vfprintf_r+0x676>
  406972:	2b30      	cmp	r3, #48	; 0x30
  406974:	f43f ad61 	beq.w	40643a <_vfprintf_r+0x676>
  406978:	2330      	movs	r3, #48	; 0x30
  40697a:	3902      	subs	r1, #2
  40697c:	f807 3c01 	strb.w	r3, [r7, #-1]
  406980:	ab30      	add	r3, sp, #192	; 0xc0
  406982:	1a5b      	subs	r3, r3, r1
  406984:	930d      	str	r3, [sp, #52]	; 0x34
  406986:	460f      	mov	r7, r1
  406988:	f7ff bb46 	b.w	406018 <_vfprintf_r+0x254>
  40698c:	2302      	movs	r3, #2
  40698e:	f7ff bb25 	b.w	405fdc <_vfprintf_r+0x218>
  406992:	991d      	ldr	r1, [sp, #116]	; 0x74
  406994:	2900      	cmp	r1, #0
  406996:	f340 8274 	ble.w	406e82 <_vfprintf_r+0x10be>
  40699a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40699c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40699e:	4293      	cmp	r3, r2
  4069a0:	bfa8      	it	ge
  4069a2:	4613      	movge	r3, r2
  4069a4:	2b00      	cmp	r3, #0
  4069a6:	461e      	mov	r6, r3
  4069a8:	dd0d      	ble.n	4069c6 <_vfprintf_r+0xc02>
  4069aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4069ac:	f8c8 7000 	str.w	r7, [r8]
  4069b0:	3301      	adds	r3, #1
  4069b2:	4434      	add	r4, r6
  4069b4:	2b07      	cmp	r3, #7
  4069b6:	9425      	str	r4, [sp, #148]	; 0x94
  4069b8:	f8c8 6004 	str.w	r6, [r8, #4]
  4069bc:	9324      	str	r3, [sp, #144]	; 0x90
  4069be:	f300 8324 	bgt.w	40700a <_vfprintf_r+0x1246>
  4069c2:	f108 0808 	add.w	r8, r8, #8
  4069c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4069c8:	2e00      	cmp	r6, #0
  4069ca:	bfa8      	it	ge
  4069cc:	1b9b      	subge	r3, r3, r6
  4069ce:	2b00      	cmp	r3, #0
  4069d0:	461e      	mov	r6, r3
  4069d2:	f340 80d0 	ble.w	406b76 <_vfprintf_r+0xdb2>
  4069d6:	2e10      	cmp	r6, #16
  4069d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4069da:	4dc0      	ldr	r5, [pc, #768]	; (406cdc <_vfprintf_r+0xf18>)
  4069dc:	f340 80b7 	ble.w	406b4e <_vfprintf_r+0xd8a>
  4069e0:	4622      	mov	r2, r4
  4069e2:	f04f 0a10 	mov.w	sl, #16
  4069e6:	f8dd b020 	ldr.w	fp, [sp, #32]
  4069ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4069ec:	e005      	b.n	4069fa <_vfprintf_r+0xc36>
  4069ee:	f108 0808 	add.w	r8, r8, #8
  4069f2:	3e10      	subs	r6, #16
  4069f4:	2e10      	cmp	r6, #16
  4069f6:	f340 80a9 	ble.w	406b4c <_vfprintf_r+0xd88>
  4069fa:	3301      	adds	r3, #1
  4069fc:	3210      	adds	r2, #16
  4069fe:	2b07      	cmp	r3, #7
  406a00:	9225      	str	r2, [sp, #148]	; 0x94
  406a02:	9324      	str	r3, [sp, #144]	; 0x90
  406a04:	e888 0420 	stmia.w	r8, {r5, sl}
  406a08:	ddf1      	ble.n	4069ee <_vfprintf_r+0xc2a>
  406a0a:	aa23      	add	r2, sp, #140	; 0x8c
  406a0c:	4621      	mov	r1, r4
  406a0e:	4658      	mov	r0, fp
  406a10:	f7fe fb44 	bl	40509c <__sprint_r>
  406a14:	2800      	cmp	r0, #0
  406a16:	f040 8324 	bne.w	407062 <_vfprintf_r+0x129e>
  406a1a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406a1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406a1e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406a22:	e7e6      	b.n	4069f2 <_vfprintf_r+0xc2e>
  406a24:	2d00      	cmp	r5, #0
  406a26:	bf08      	it	eq
  406a28:	2c0a      	cmpeq	r4, #10
  406a2a:	d37c      	bcc.n	406b26 <_vfprintf_r+0xd62>
  406a2c:	af30      	add	r7, sp, #192	; 0xc0
  406a2e:	4620      	mov	r0, r4
  406a30:	4629      	mov	r1, r5
  406a32:	220a      	movs	r2, #10
  406a34:	2300      	movs	r3, #0
  406a36:	f003 fd43 	bl	40a4c0 <__aeabi_uldivmod>
  406a3a:	3230      	adds	r2, #48	; 0x30
  406a3c:	f807 2d01 	strb.w	r2, [r7, #-1]!
  406a40:	4620      	mov	r0, r4
  406a42:	4629      	mov	r1, r5
  406a44:	2300      	movs	r3, #0
  406a46:	220a      	movs	r2, #10
  406a48:	f003 fd3a 	bl	40a4c0 <__aeabi_uldivmod>
  406a4c:	4604      	mov	r4, r0
  406a4e:	460d      	mov	r5, r1
  406a50:	ea54 0305 	orrs.w	r3, r4, r5
  406a54:	d1eb      	bne.n	406a2e <_vfprintf_r+0xc6a>
  406a56:	ab30      	add	r3, sp, #192	; 0xc0
  406a58:	1bdb      	subs	r3, r3, r7
  406a5a:	930d      	str	r3, [sp, #52]	; 0x34
  406a5c:	f7ff badc 	b.w	406018 <_vfprintf_r+0x254>
  406a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a62:	930d      	str	r3, [sp, #52]	; 0x34
  406a64:	af30      	add	r7, sp, #192	; 0xc0
  406a66:	f7ff bad7 	b.w	406018 <_vfprintf_r+0x254>
  406a6a:	aa23      	add	r2, sp, #140	; 0x8c
  406a6c:	990a      	ldr	r1, [sp, #40]	; 0x28
  406a6e:	9808      	ldr	r0, [sp, #32]
  406a70:	f7fe fb14 	bl	40509c <__sprint_r>
  406a74:	2800      	cmp	r0, #0
  406a76:	f47f af2f 	bne.w	4068d8 <_vfprintf_r+0xb14>
  406a7a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406a7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406a80:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406a84:	f7ff bb28 	b.w	4060d8 <_vfprintf_r+0x314>
  406a88:	1e5f      	subs	r7, r3, #1
  406a8a:	2f00      	cmp	r7, #0
  406a8c:	f77f af05 	ble.w	40689a <_vfprintf_r+0xad6>
  406a90:	2f10      	cmp	r7, #16
  406a92:	4d92      	ldr	r5, [pc, #584]	; (406cdc <_vfprintf_r+0xf18>)
  406a94:	f340 810a 	ble.w	406cac <_vfprintf_r+0xee8>
  406a98:	f04f 0a10 	mov.w	sl, #16
  406a9c:	f8dd b020 	ldr.w	fp, [sp, #32]
  406aa0:	e005      	b.n	406aae <_vfprintf_r+0xcea>
  406aa2:	f108 0808 	add.w	r8, r8, #8
  406aa6:	3f10      	subs	r7, #16
  406aa8:	2f10      	cmp	r7, #16
  406aaa:	f340 80ff 	ble.w	406cac <_vfprintf_r+0xee8>
  406aae:	3601      	adds	r6, #1
  406ab0:	3410      	adds	r4, #16
  406ab2:	2e07      	cmp	r6, #7
  406ab4:	9425      	str	r4, [sp, #148]	; 0x94
  406ab6:	9624      	str	r6, [sp, #144]	; 0x90
  406ab8:	e888 0420 	stmia.w	r8, {r5, sl}
  406abc:	ddf1      	ble.n	406aa2 <_vfprintf_r+0xcde>
  406abe:	aa23      	add	r2, sp, #140	; 0x8c
  406ac0:	990a      	ldr	r1, [sp, #40]	; 0x28
  406ac2:	4658      	mov	r0, fp
  406ac4:	f7fe faea 	bl	40509c <__sprint_r>
  406ac8:	2800      	cmp	r0, #0
  406aca:	f47f af05 	bne.w	4068d8 <_vfprintf_r+0xb14>
  406ace:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406ad0:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406ad2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406ad6:	e7e6      	b.n	406aa6 <_vfprintf_r+0xce2>
  406ad8:	990e      	ldr	r1, [sp, #56]	; 0x38
  406ada:	460a      	mov	r2, r1
  406adc:	3204      	adds	r2, #4
  406ade:	680c      	ldr	r4, [r1, #0]
  406ae0:	920e      	str	r2, [sp, #56]	; 0x38
  406ae2:	2500      	movs	r5, #0
  406ae4:	f7ff ba7a 	b.w	405fdc <_vfprintf_r+0x218>
  406ae8:	681c      	ldr	r4, [r3, #0]
  406aea:	3304      	adds	r3, #4
  406aec:	930e      	str	r3, [sp, #56]	; 0x38
  406aee:	2500      	movs	r5, #0
  406af0:	e426      	b.n	406340 <_vfprintf_r+0x57c>
  406af2:	3301      	adds	r3, #1
  406af4:	4434      	add	r4, r6
  406af6:	2b07      	cmp	r3, #7
  406af8:	9425      	str	r4, [sp, #148]	; 0x94
  406afa:	9324      	str	r3, [sp, #144]	; 0x90
  406afc:	e888 0060 	stmia.w	r8, {r5, r6}
  406b00:	f77f ab63 	ble.w	4061ca <_vfprintf_r+0x406>
  406b04:	e6d6      	b.n	4068b4 <_vfprintf_r+0xaf0>
  406b06:	3204      	adds	r2, #4
  406b08:	681c      	ldr	r4, [r3, #0]
  406b0a:	920e      	str	r2, [sp, #56]	; 0x38
  406b0c:	2301      	movs	r3, #1
  406b0e:	2500      	movs	r5, #0
  406b10:	f7ff ba64 	b.w	405fdc <_vfprintf_r+0x218>
  406b14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406b16:	6814      	ldr	r4, [r2, #0]
  406b18:	4613      	mov	r3, r2
  406b1a:	3304      	adds	r3, #4
  406b1c:	17e5      	asrs	r5, r4, #31
  406b1e:	930e      	str	r3, [sp, #56]	; 0x38
  406b20:	4622      	mov	r2, r4
  406b22:	462b      	mov	r3, r5
  406b24:	e460      	b.n	4063e8 <_vfprintf_r+0x624>
  406b26:	f8dd b018 	ldr.w	fp, [sp, #24]
  406b2a:	f8cd b018 	str.w	fp, [sp, #24]
  406b2e:	af40      	add	r7, sp, #256	; 0x100
  406b30:	3430      	adds	r4, #48	; 0x30
  406b32:	2301      	movs	r3, #1
  406b34:	f807 4d41 	strb.w	r4, [r7, #-65]!
  406b38:	930d      	str	r3, [sp, #52]	; 0x34
  406b3a:	f7ff ba6d 	b.w	406018 <_vfprintf_r+0x254>
  406b3e:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406b42:	f002 f92f 	bl	408da4 <__retarget_lock_release_recursive>
  406b46:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406b4a:	e5af      	b.n	4066ac <_vfprintf_r+0x8e8>
  406b4c:	4614      	mov	r4, r2
  406b4e:	3301      	adds	r3, #1
  406b50:	4434      	add	r4, r6
  406b52:	2b07      	cmp	r3, #7
  406b54:	9425      	str	r4, [sp, #148]	; 0x94
  406b56:	9324      	str	r3, [sp, #144]	; 0x90
  406b58:	e888 0060 	stmia.w	r8, {r5, r6}
  406b5c:	f340 816d 	ble.w	406e3a <_vfprintf_r+0x1076>
  406b60:	aa23      	add	r2, sp, #140	; 0x8c
  406b62:	990a      	ldr	r1, [sp, #40]	; 0x28
  406b64:	9808      	ldr	r0, [sp, #32]
  406b66:	f7fe fa99 	bl	40509c <__sprint_r>
  406b6a:	2800      	cmp	r0, #0
  406b6c:	f47f aeb4 	bne.w	4068d8 <_vfprintf_r+0xb14>
  406b70:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406b72:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406b76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406b78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406b7a:	4293      	cmp	r3, r2
  406b7c:	f280 8158 	bge.w	406e30 <_vfprintf_r+0x106c>
  406b80:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406b82:	9814      	ldr	r0, [sp, #80]	; 0x50
  406b84:	9915      	ldr	r1, [sp, #84]	; 0x54
  406b86:	f8c8 1000 	str.w	r1, [r8]
  406b8a:	3201      	adds	r2, #1
  406b8c:	4404      	add	r4, r0
  406b8e:	2a07      	cmp	r2, #7
  406b90:	9425      	str	r4, [sp, #148]	; 0x94
  406b92:	f8c8 0004 	str.w	r0, [r8, #4]
  406b96:	9224      	str	r2, [sp, #144]	; 0x90
  406b98:	f300 8152 	bgt.w	406e40 <_vfprintf_r+0x107c>
  406b9c:	f108 0808 	add.w	r8, r8, #8
  406ba0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406ba2:	9910      	ldr	r1, [sp, #64]	; 0x40
  406ba4:	1ad3      	subs	r3, r2, r3
  406ba6:	1a56      	subs	r6, r2, r1
  406ba8:	429e      	cmp	r6, r3
  406baa:	bfa8      	it	ge
  406bac:	461e      	movge	r6, r3
  406bae:	2e00      	cmp	r6, #0
  406bb0:	dd0e      	ble.n	406bd0 <_vfprintf_r+0xe0c>
  406bb2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406bb4:	f8c8 6004 	str.w	r6, [r8, #4]
  406bb8:	3201      	adds	r2, #1
  406bba:	440f      	add	r7, r1
  406bbc:	4434      	add	r4, r6
  406bbe:	2a07      	cmp	r2, #7
  406bc0:	f8c8 7000 	str.w	r7, [r8]
  406bc4:	9425      	str	r4, [sp, #148]	; 0x94
  406bc6:	9224      	str	r2, [sp, #144]	; 0x90
  406bc8:	f300 823c 	bgt.w	407044 <_vfprintf_r+0x1280>
  406bcc:	f108 0808 	add.w	r8, r8, #8
  406bd0:	2e00      	cmp	r6, #0
  406bd2:	bfac      	ite	ge
  406bd4:	1b9e      	subge	r6, r3, r6
  406bd6:	461e      	movlt	r6, r3
  406bd8:	2e00      	cmp	r6, #0
  406bda:	f77f aaf8 	ble.w	4061ce <_vfprintf_r+0x40a>
  406bde:	2e10      	cmp	r6, #16
  406be0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406be2:	4d3e      	ldr	r5, [pc, #248]	; (406cdc <_vfprintf_r+0xf18>)
  406be4:	dd85      	ble.n	406af2 <_vfprintf_r+0xd2e>
  406be6:	2710      	movs	r7, #16
  406be8:	f8dd a020 	ldr.w	sl, [sp, #32]
  406bec:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406bf0:	e005      	b.n	406bfe <_vfprintf_r+0xe3a>
  406bf2:	f108 0808 	add.w	r8, r8, #8
  406bf6:	3e10      	subs	r6, #16
  406bf8:	2e10      	cmp	r6, #16
  406bfa:	f77f af7a 	ble.w	406af2 <_vfprintf_r+0xd2e>
  406bfe:	3301      	adds	r3, #1
  406c00:	3410      	adds	r4, #16
  406c02:	2b07      	cmp	r3, #7
  406c04:	9425      	str	r4, [sp, #148]	; 0x94
  406c06:	9324      	str	r3, [sp, #144]	; 0x90
  406c08:	e888 00a0 	stmia.w	r8, {r5, r7}
  406c0c:	ddf1      	ble.n	406bf2 <_vfprintf_r+0xe2e>
  406c0e:	aa23      	add	r2, sp, #140	; 0x8c
  406c10:	4659      	mov	r1, fp
  406c12:	4650      	mov	r0, sl
  406c14:	f7fe fa42 	bl	40509c <__sprint_r>
  406c18:	2800      	cmp	r0, #0
  406c1a:	f040 8176 	bne.w	406f0a <_vfprintf_r+0x1146>
  406c1e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406c20:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406c22:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406c26:	e7e6      	b.n	406bf6 <_vfprintf_r+0xe32>
  406c28:	9b06      	ldr	r3, [sp, #24]
  406c2a:	07d8      	lsls	r0, r3, #31
  406c2c:	f53f adff 	bmi.w	40682e <_vfprintf_r+0xa6a>
  406c30:	3601      	adds	r6, #1
  406c32:	3401      	adds	r4, #1
  406c34:	2301      	movs	r3, #1
  406c36:	2e07      	cmp	r6, #7
  406c38:	9425      	str	r4, [sp, #148]	; 0x94
  406c3a:	9624      	str	r6, [sp, #144]	; 0x90
  406c3c:	f8c8 7000 	str.w	r7, [r8]
  406c40:	f8c8 3004 	str.w	r3, [r8, #4]
  406c44:	f77f ae27 	ble.w	406896 <_vfprintf_r+0xad2>
  406c48:	aa23      	add	r2, sp, #140	; 0x8c
  406c4a:	990a      	ldr	r1, [sp, #40]	; 0x28
  406c4c:	9808      	ldr	r0, [sp, #32]
  406c4e:	f7fe fa25 	bl	40509c <__sprint_r>
  406c52:	2800      	cmp	r0, #0
  406c54:	f47f ae40 	bne.w	4068d8 <_vfprintf_r+0xb14>
  406c58:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406c5a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406c5c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406c60:	e61b      	b.n	40689a <_vfprintf_r+0xad6>
  406c62:	aa23      	add	r2, sp, #140	; 0x8c
  406c64:	990a      	ldr	r1, [sp, #40]	; 0x28
  406c66:	9808      	ldr	r0, [sp, #32]
  406c68:	f7fe fa18 	bl	40509c <__sprint_r>
  406c6c:	2800      	cmp	r0, #0
  406c6e:	f47f ae33 	bne.w	4068d8 <_vfprintf_r+0xb14>
  406c72:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406c74:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406c76:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406c7a:	e5e6      	b.n	40684a <_vfprintf_r+0xa86>
  406c7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406c7e:	3507      	adds	r5, #7
  406c80:	f025 0507 	bic.w	r5, r5, #7
  406c84:	e9d5 2300 	ldrd	r2, r3, [r5]
  406c88:	f105 0108 	add.w	r1, r5, #8
  406c8c:	910e      	str	r1, [sp, #56]	; 0x38
  406c8e:	4614      	mov	r4, r2
  406c90:	461d      	mov	r5, r3
  406c92:	f7ff bba9 	b.w	4063e8 <_vfprintf_r+0x624>
  406c96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406c98:	3507      	adds	r5, #7
  406c9a:	f025 0307 	bic.w	r3, r5, #7
  406c9e:	f103 0208 	add.w	r2, r3, #8
  406ca2:	920e      	str	r2, [sp, #56]	; 0x38
  406ca4:	e9d3 4500 	ldrd	r4, r5, [r3]
  406ca8:	f7ff bb4a 	b.w	406340 <_vfprintf_r+0x57c>
  406cac:	3601      	adds	r6, #1
  406cae:	443c      	add	r4, r7
  406cb0:	2e07      	cmp	r6, #7
  406cb2:	9425      	str	r4, [sp, #148]	; 0x94
  406cb4:	9624      	str	r6, [sp, #144]	; 0x90
  406cb6:	e888 00a0 	stmia.w	r8, {r5, r7}
  406cba:	f77f adec 	ble.w	406896 <_vfprintf_r+0xad2>
  406cbe:	e7c3      	b.n	406c48 <_vfprintf_r+0xe84>
  406cc0:	aa23      	add	r2, sp, #140	; 0x8c
  406cc2:	990a      	ldr	r1, [sp, #40]	; 0x28
  406cc4:	9808      	ldr	r0, [sp, #32]
  406cc6:	f7fe f9e9 	bl	40509c <__sprint_r>
  406cca:	2800      	cmp	r0, #0
  406ccc:	f47f ae04 	bne.w	4068d8 <_vfprintf_r+0xb14>
  406cd0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406cd2:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406cd4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406cd8:	e5c6      	b.n	406868 <_vfprintf_r+0xaa4>
  406cda:	bf00      	nop
  406cdc:	0040aa70 	.word	0x0040aa70
  406ce0:	af30      	add	r7, sp, #192	; 0xc0
  406ce2:	f7ff b999 	b.w	406018 <_vfprintf_r+0x254>
  406ce6:	aa23      	add	r2, sp, #140	; 0x8c
  406ce8:	990a      	ldr	r1, [sp, #40]	; 0x28
  406cea:	9808      	ldr	r0, [sp, #32]
  406cec:	f7fe f9d6 	bl	40509c <__sprint_r>
  406cf0:	2800      	cmp	r0, #0
  406cf2:	f47f adf1 	bne.w	4068d8 <_vfprintf_r+0xb14>
  406cf6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406cf8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406cfc:	f7ff ba11 	b.w	406122 <_vfprintf_r+0x35e>
  406d00:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  406d04:	4264      	negs	r4, r4
  406d06:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  406d0a:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  406d0e:	2301      	movs	r3, #1
  406d10:	f7ff b968 	b.w	405fe4 <_vfprintf_r+0x220>
  406d14:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  406d16:	4622      	mov	r2, r4
  406d18:	4620      	mov	r0, r4
  406d1a:	9c12      	ldr	r4, [sp, #72]	; 0x48
  406d1c:	4623      	mov	r3, r4
  406d1e:	4621      	mov	r1, r4
  406d20:	f003 fb90 	bl	40a444 <__aeabi_dcmpun>
  406d24:	2800      	cmp	r0, #0
  406d26:	f040 828c 	bne.w	407242 <_vfprintf_r+0x147e>
  406d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406d2c:	3301      	adds	r3, #1
  406d2e:	f026 0320 	bic.w	r3, r6, #32
  406d32:	930d      	str	r3, [sp, #52]	; 0x34
  406d34:	f000 8091 	beq.w	406e5a <_vfprintf_r+0x1096>
  406d38:	2b47      	cmp	r3, #71	; 0x47
  406d3a:	d104      	bne.n	406d46 <_vfprintf_r+0xf82>
  406d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406d3e:	2b00      	cmp	r3, #0
  406d40:	bf08      	it	eq
  406d42:	2301      	moveq	r3, #1
  406d44:	9309      	str	r3, [sp, #36]	; 0x24
  406d46:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  406d4a:	9306      	str	r3, [sp, #24]
  406d4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406d4e:	f1b3 0a00 	subs.w	sl, r3, #0
  406d52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406d54:	9307      	str	r3, [sp, #28]
  406d56:	bfbb      	ittet	lt
  406d58:	4653      	movlt	r3, sl
  406d5a:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  406d5e:	2300      	movge	r3, #0
  406d60:	232d      	movlt	r3, #45	; 0x2d
  406d62:	2e66      	cmp	r6, #102	; 0x66
  406d64:	930f      	str	r3, [sp, #60]	; 0x3c
  406d66:	f000 817f 	beq.w	407068 <_vfprintf_r+0x12a4>
  406d6a:	2e46      	cmp	r6, #70	; 0x46
  406d6c:	f000 81d4 	beq.w	407118 <_vfprintf_r+0x1354>
  406d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406d72:	9a07      	ldr	r2, [sp, #28]
  406d74:	2b45      	cmp	r3, #69	; 0x45
  406d76:	bf0c      	ite	eq
  406d78:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  406d7a:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  406d7c:	a821      	add	r0, sp, #132	; 0x84
  406d7e:	a91e      	add	r1, sp, #120	; 0x78
  406d80:	bf08      	it	eq
  406d82:	1c5d      	addeq	r5, r3, #1
  406d84:	9004      	str	r0, [sp, #16]
  406d86:	9103      	str	r1, [sp, #12]
  406d88:	a81d      	add	r0, sp, #116	; 0x74
  406d8a:	2102      	movs	r1, #2
  406d8c:	9002      	str	r0, [sp, #8]
  406d8e:	4653      	mov	r3, sl
  406d90:	9501      	str	r5, [sp, #4]
  406d92:	9100      	str	r1, [sp, #0]
  406d94:	9808      	ldr	r0, [sp, #32]
  406d96:	f000 fc13 	bl	4075c0 <_dtoa_r>
  406d9a:	2e67      	cmp	r6, #103	; 0x67
  406d9c:	4607      	mov	r7, r0
  406d9e:	f040 81af 	bne.w	407100 <_vfprintf_r+0x133c>
  406da2:	f01b 0f01 	tst.w	fp, #1
  406da6:	f000 8213 	beq.w	4071d0 <_vfprintf_r+0x140c>
  406daa:	197c      	adds	r4, r7, r5
  406dac:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406dae:	9807      	ldr	r0, [sp, #28]
  406db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406db2:	4651      	mov	r1, sl
  406db4:	f7fd fe6c 	bl	404a90 <__aeabi_dcmpeq>
  406db8:	2800      	cmp	r0, #0
  406dba:	f040 8132 	bne.w	407022 <_vfprintf_r+0x125e>
  406dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406dc0:	42a3      	cmp	r3, r4
  406dc2:	d206      	bcs.n	406dd2 <_vfprintf_r+0x100e>
  406dc4:	2130      	movs	r1, #48	; 0x30
  406dc6:	1c5a      	adds	r2, r3, #1
  406dc8:	9221      	str	r2, [sp, #132]	; 0x84
  406dca:	7019      	strb	r1, [r3, #0]
  406dcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406dce:	429c      	cmp	r4, r3
  406dd0:	d8f9      	bhi.n	406dc6 <_vfprintf_r+0x1002>
  406dd2:	1bdb      	subs	r3, r3, r7
  406dd4:	9311      	str	r3, [sp, #68]	; 0x44
  406dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406dd8:	2b47      	cmp	r3, #71	; 0x47
  406dda:	f000 80b9 	beq.w	406f50 <_vfprintf_r+0x118c>
  406dde:	2e65      	cmp	r6, #101	; 0x65
  406de0:	f340 8276 	ble.w	4072d0 <_vfprintf_r+0x150c>
  406de4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406de6:	9310      	str	r3, [sp, #64]	; 0x40
  406de8:	2e66      	cmp	r6, #102	; 0x66
  406dea:	f000 8162 	beq.w	4070b2 <_vfprintf_r+0x12ee>
  406dee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406df0:	9a10      	ldr	r2, [sp, #64]	; 0x40
  406df2:	4619      	mov	r1, r3
  406df4:	4291      	cmp	r1, r2
  406df6:	f300 814f 	bgt.w	407098 <_vfprintf_r+0x12d4>
  406dfa:	f01b 0f01 	tst.w	fp, #1
  406dfe:	f040 8209 	bne.w	407214 <_vfprintf_r+0x1450>
  406e02:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406e06:	9307      	str	r3, [sp, #28]
  406e08:	920d      	str	r2, [sp, #52]	; 0x34
  406e0a:	2667      	movs	r6, #103	; 0x67
  406e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406e0e:	2b00      	cmp	r3, #0
  406e10:	f040 8096 	bne.w	406f40 <_vfprintf_r+0x117c>
  406e14:	9309      	str	r3, [sp, #36]	; 0x24
  406e16:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406e1a:	f7ff b905 	b.w	406028 <_vfprintf_r+0x264>
  406e1e:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406e22:	f001 ffbf 	bl	408da4 <__retarget_lock_release_recursive>
  406e26:	f04f 33ff 	mov.w	r3, #4294967295
  406e2a:	930b      	str	r3, [sp, #44]	; 0x2c
  406e2c:	f7ff ba30 	b.w	406290 <_vfprintf_r+0x4cc>
  406e30:	9a06      	ldr	r2, [sp, #24]
  406e32:	07d5      	lsls	r5, r2, #31
  406e34:	f57f aeb4 	bpl.w	406ba0 <_vfprintf_r+0xddc>
  406e38:	e6a2      	b.n	406b80 <_vfprintf_r+0xdbc>
  406e3a:	f108 0808 	add.w	r8, r8, #8
  406e3e:	e69a      	b.n	406b76 <_vfprintf_r+0xdb2>
  406e40:	aa23      	add	r2, sp, #140	; 0x8c
  406e42:	990a      	ldr	r1, [sp, #40]	; 0x28
  406e44:	9808      	ldr	r0, [sp, #32]
  406e46:	f7fe f929 	bl	40509c <__sprint_r>
  406e4a:	2800      	cmp	r0, #0
  406e4c:	f47f ad44 	bne.w	4068d8 <_vfprintf_r+0xb14>
  406e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406e52:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406e54:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406e58:	e6a2      	b.n	406ba0 <_vfprintf_r+0xddc>
  406e5a:	2306      	movs	r3, #6
  406e5c:	9309      	str	r3, [sp, #36]	; 0x24
  406e5e:	e772      	b.n	406d46 <_vfprintf_r+0xf82>
  406e60:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  406e64:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  406e68:	f7ff bbc7 	b.w	4065fa <_vfprintf_r+0x836>
  406e6c:	aa23      	add	r2, sp, #140	; 0x8c
  406e6e:	990a      	ldr	r1, [sp, #40]	; 0x28
  406e70:	9808      	ldr	r0, [sp, #32]
  406e72:	f7fe f913 	bl	40509c <__sprint_r>
  406e76:	2800      	cmp	r0, #0
  406e78:	f47f ad2e 	bne.w	4068d8 <_vfprintf_r+0xb14>
  406e7c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406e80:	e437      	b.n	4066f2 <_vfprintf_r+0x92e>
  406e82:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406e84:	4ab4      	ldr	r2, [pc, #720]	; (407158 <_vfprintf_r+0x1394>)
  406e86:	f8c8 2000 	str.w	r2, [r8]
  406e8a:	3301      	adds	r3, #1
  406e8c:	3401      	adds	r4, #1
  406e8e:	2201      	movs	r2, #1
  406e90:	2b07      	cmp	r3, #7
  406e92:	9425      	str	r4, [sp, #148]	; 0x94
  406e94:	9324      	str	r3, [sp, #144]	; 0x90
  406e96:	f8c8 2004 	str.w	r2, [r8, #4]
  406e9a:	f300 8124 	bgt.w	4070e6 <_vfprintf_r+0x1322>
  406e9e:	f108 0808 	add.w	r8, r8, #8
  406ea2:	b929      	cbnz	r1, 406eb0 <_vfprintf_r+0x10ec>
  406ea4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406ea6:	b91b      	cbnz	r3, 406eb0 <_vfprintf_r+0x10ec>
  406ea8:	9b06      	ldr	r3, [sp, #24]
  406eaa:	07de      	lsls	r6, r3, #31
  406eac:	f57f a98f 	bpl.w	4061ce <_vfprintf_r+0x40a>
  406eb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406eb2:	9814      	ldr	r0, [sp, #80]	; 0x50
  406eb4:	9a15      	ldr	r2, [sp, #84]	; 0x54
  406eb6:	f8c8 2000 	str.w	r2, [r8]
  406eba:	3301      	adds	r3, #1
  406ebc:	4602      	mov	r2, r0
  406ebe:	4422      	add	r2, r4
  406ec0:	2b07      	cmp	r3, #7
  406ec2:	9225      	str	r2, [sp, #148]	; 0x94
  406ec4:	f8c8 0004 	str.w	r0, [r8, #4]
  406ec8:	9324      	str	r3, [sp, #144]	; 0x90
  406eca:	f300 8169 	bgt.w	4071a0 <_vfprintf_r+0x13dc>
  406ece:	f108 0808 	add.w	r8, r8, #8
  406ed2:	2900      	cmp	r1, #0
  406ed4:	f2c0 8136 	blt.w	407144 <_vfprintf_r+0x1380>
  406ed8:	9911      	ldr	r1, [sp, #68]	; 0x44
  406eda:	f8c8 7000 	str.w	r7, [r8]
  406ede:	3301      	adds	r3, #1
  406ee0:	188c      	adds	r4, r1, r2
  406ee2:	2b07      	cmp	r3, #7
  406ee4:	9425      	str	r4, [sp, #148]	; 0x94
  406ee6:	9324      	str	r3, [sp, #144]	; 0x90
  406ee8:	f8c8 1004 	str.w	r1, [r8, #4]
  406eec:	f77f a96d 	ble.w	4061ca <_vfprintf_r+0x406>
  406ef0:	e4e0      	b.n	4068b4 <_vfprintf_r+0xaf0>
  406ef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406ef6:	6813      	ldr	r3, [r2, #0]
  406ef8:	17cd      	asrs	r5, r1, #31
  406efa:	4608      	mov	r0, r1
  406efc:	3204      	adds	r2, #4
  406efe:	4629      	mov	r1, r5
  406f00:	920e      	str	r2, [sp, #56]	; 0x38
  406f02:	e9c3 0100 	strd	r0, r1, [r3]
  406f06:	f7fe bfa9 	b.w	405e5c <_vfprintf_r+0x98>
  406f0a:	46da      	mov	sl, fp
  406f0c:	f7ff bbc4 	b.w	406698 <_vfprintf_r+0x8d4>
  406f10:	aa23      	add	r2, sp, #140	; 0x8c
  406f12:	990a      	ldr	r1, [sp, #40]	; 0x28
  406f14:	9808      	ldr	r0, [sp, #32]
  406f16:	f7fe f8c1 	bl	40509c <__sprint_r>
  406f1a:	2800      	cmp	r0, #0
  406f1c:	f47f acdc 	bne.w	4068d8 <_vfprintf_r+0xb14>
  406f20:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406f22:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406f26:	f7ff bbfd 	b.w	406724 <_vfprintf_r+0x960>
  406f2a:	4638      	mov	r0, r7
  406f2c:	9409      	str	r4, [sp, #36]	; 0x24
  406f2e:	f7fe f807 	bl	404f40 <strlen>
  406f32:	950e      	str	r5, [sp, #56]	; 0x38
  406f34:	900d      	str	r0, [sp, #52]	; 0x34
  406f36:	f8cd b018 	str.w	fp, [sp, #24]
  406f3a:	4603      	mov	r3, r0
  406f3c:	f7ff ba36 	b.w	4063ac <_vfprintf_r+0x5e8>
  406f40:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  406f44:	2300      	movs	r3, #0
  406f46:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  406f4a:	9309      	str	r3, [sp, #36]	; 0x24
  406f4c:	f7ff b86f 	b.w	40602e <_vfprintf_r+0x26a>
  406f50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406f52:	9310      	str	r3, [sp, #64]	; 0x40
  406f54:	461a      	mov	r2, r3
  406f56:	3303      	adds	r3, #3
  406f58:	db04      	blt.n	406f64 <_vfprintf_r+0x11a0>
  406f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406f5c:	4619      	mov	r1, r3
  406f5e:	4291      	cmp	r1, r2
  406f60:	f6bf af45 	bge.w	406dee <_vfprintf_r+0x102a>
  406f64:	3e02      	subs	r6, #2
  406f66:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406f68:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  406f6c:	3b01      	subs	r3, #1
  406f6e:	2b00      	cmp	r3, #0
  406f70:	931d      	str	r3, [sp, #116]	; 0x74
  406f72:	bfbd      	ittte	lt
  406f74:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  406f76:	f1c3 0301 	rsblt	r3, r3, #1
  406f7a:	222d      	movlt	r2, #45	; 0x2d
  406f7c:	222b      	movge	r2, #43	; 0x2b
  406f7e:	2b09      	cmp	r3, #9
  406f80:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  406f84:	f340 813e 	ble.w	407204 <_vfprintf_r+0x1440>
  406f88:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  406f8c:	4620      	mov	r0, r4
  406f8e:	4d73      	ldr	r5, [pc, #460]	; (40715c <_vfprintf_r+0x1398>)
  406f90:	e000      	b.n	406f94 <_vfprintf_r+0x11d0>
  406f92:	4610      	mov	r0, r2
  406f94:	fb85 1203 	smull	r1, r2, r5, r3
  406f98:	17d9      	asrs	r1, r3, #31
  406f9a:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  406f9e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  406fa2:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  406fa6:	3230      	adds	r2, #48	; 0x30
  406fa8:	2909      	cmp	r1, #9
  406faa:	f800 2c01 	strb.w	r2, [r0, #-1]
  406fae:	460b      	mov	r3, r1
  406fb0:	f100 32ff 	add.w	r2, r0, #4294967295
  406fb4:	dced      	bgt.n	406f92 <_vfprintf_r+0x11ce>
  406fb6:	3330      	adds	r3, #48	; 0x30
  406fb8:	3802      	subs	r0, #2
  406fba:	b2d9      	uxtb	r1, r3
  406fbc:	4284      	cmp	r4, r0
  406fbe:	f802 1c01 	strb.w	r1, [r2, #-1]
  406fc2:	f240 8190 	bls.w	4072e6 <_vfprintf_r+0x1522>
  406fc6:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  406fca:	4613      	mov	r3, r2
  406fcc:	e001      	b.n	406fd2 <_vfprintf_r+0x120e>
  406fce:	f813 1b01 	ldrb.w	r1, [r3], #1
  406fd2:	f800 1b01 	strb.w	r1, [r0], #1
  406fd6:	42a3      	cmp	r3, r4
  406fd8:	d1f9      	bne.n	406fce <_vfprintf_r+0x120a>
  406fda:	3301      	adds	r3, #1
  406fdc:	1a9b      	subs	r3, r3, r2
  406fde:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  406fe2:	4413      	add	r3, r2
  406fe4:	aa1f      	add	r2, sp, #124	; 0x7c
  406fe6:	1a9b      	subs	r3, r3, r2
  406fe8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406fea:	9319      	str	r3, [sp, #100]	; 0x64
  406fec:	2a01      	cmp	r2, #1
  406fee:	4413      	add	r3, r2
  406ff0:	930d      	str	r3, [sp, #52]	; 0x34
  406ff2:	f340 8145 	ble.w	407280 <_vfprintf_r+0x14bc>
  406ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406ff8:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406ffa:	4413      	add	r3, r2
  406ffc:	930d      	str	r3, [sp, #52]	; 0x34
  406ffe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407002:	9307      	str	r3, [sp, #28]
  407004:	2300      	movs	r3, #0
  407006:	9310      	str	r3, [sp, #64]	; 0x40
  407008:	e700      	b.n	406e0c <_vfprintf_r+0x1048>
  40700a:	aa23      	add	r2, sp, #140	; 0x8c
  40700c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40700e:	9808      	ldr	r0, [sp, #32]
  407010:	f7fe f844 	bl	40509c <__sprint_r>
  407014:	2800      	cmp	r0, #0
  407016:	f47f ac5f 	bne.w	4068d8 <_vfprintf_r+0xb14>
  40701a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40701c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407020:	e4d1      	b.n	4069c6 <_vfprintf_r+0xc02>
  407022:	4623      	mov	r3, r4
  407024:	e6d5      	b.n	406dd2 <_vfprintf_r+0x100e>
  407026:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407028:	9710      	str	r7, [sp, #64]	; 0x40
  40702a:	2b06      	cmp	r3, #6
  40702c:	bf28      	it	cs
  40702e:	2306      	movcs	r3, #6
  407030:	9709      	str	r7, [sp, #36]	; 0x24
  407032:	46ba      	mov	sl, r7
  407034:	9307      	str	r3, [sp, #28]
  407036:	950e      	str	r5, [sp, #56]	; 0x38
  407038:	f8cd b018 	str.w	fp, [sp, #24]
  40703c:	930d      	str	r3, [sp, #52]	; 0x34
  40703e:	4f48      	ldr	r7, [pc, #288]	; (407160 <_vfprintf_r+0x139c>)
  407040:	f7fe bff2 	b.w	406028 <_vfprintf_r+0x264>
  407044:	aa23      	add	r2, sp, #140	; 0x8c
  407046:	990a      	ldr	r1, [sp, #40]	; 0x28
  407048:	9808      	ldr	r0, [sp, #32]
  40704a:	f7fe f827 	bl	40509c <__sprint_r>
  40704e:	2800      	cmp	r0, #0
  407050:	f47f ac42 	bne.w	4068d8 <_vfprintf_r+0xb14>
  407054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407056:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407058:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40705a:	1ad3      	subs	r3, r2, r3
  40705c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407060:	e5b6      	b.n	406bd0 <_vfprintf_r+0xe0c>
  407062:	46a2      	mov	sl, r4
  407064:	f7ff bb18 	b.w	406698 <_vfprintf_r+0x8d4>
  407068:	a821      	add	r0, sp, #132	; 0x84
  40706a:	a91e      	add	r1, sp, #120	; 0x78
  40706c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40706e:	9004      	str	r0, [sp, #16]
  407070:	9103      	str	r1, [sp, #12]
  407072:	a81d      	add	r0, sp, #116	; 0x74
  407074:	2103      	movs	r1, #3
  407076:	9002      	str	r0, [sp, #8]
  407078:	9a07      	ldr	r2, [sp, #28]
  40707a:	9501      	str	r5, [sp, #4]
  40707c:	4653      	mov	r3, sl
  40707e:	9100      	str	r1, [sp, #0]
  407080:	9808      	ldr	r0, [sp, #32]
  407082:	f000 fa9d 	bl	4075c0 <_dtoa_r>
  407086:	4607      	mov	r7, r0
  407088:	1944      	adds	r4, r0, r5
  40708a:	783b      	ldrb	r3, [r7, #0]
  40708c:	2b30      	cmp	r3, #48	; 0x30
  40708e:	f000 80ca 	beq.w	407226 <_vfprintf_r+0x1462>
  407092:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  407094:	442c      	add	r4, r5
  407096:	e689      	b.n	406dac <_vfprintf_r+0xfe8>
  407098:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40709a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40709c:	4413      	add	r3, r2
  40709e:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4070a0:	930d      	str	r3, [sp, #52]	; 0x34
  4070a2:	2a00      	cmp	r2, #0
  4070a4:	f340 80e4 	ble.w	407270 <_vfprintf_r+0x14ac>
  4070a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4070ac:	9307      	str	r3, [sp, #28]
  4070ae:	2667      	movs	r6, #103	; 0x67
  4070b0:	e6ac      	b.n	406e0c <_vfprintf_r+0x1048>
  4070b2:	2b00      	cmp	r3, #0
  4070b4:	f340 80fb 	ble.w	4072ae <_vfprintf_r+0x14ea>
  4070b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4070ba:	2a00      	cmp	r2, #0
  4070bc:	f040 80ce 	bne.w	40725c <_vfprintf_r+0x1498>
  4070c0:	f01b 0f01 	tst.w	fp, #1
  4070c4:	f040 80ca 	bne.w	40725c <_vfprintf_r+0x1498>
  4070c8:	9307      	str	r3, [sp, #28]
  4070ca:	930d      	str	r3, [sp, #52]	; 0x34
  4070cc:	e69e      	b.n	406e0c <_vfprintf_r+0x1048>
  4070ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4070d0:	9307      	str	r3, [sp, #28]
  4070d2:	930d      	str	r3, [sp, #52]	; 0x34
  4070d4:	9009      	str	r0, [sp, #36]	; 0x24
  4070d6:	950e      	str	r5, [sp, #56]	; 0x38
  4070d8:	f8cd b018 	str.w	fp, [sp, #24]
  4070dc:	9010      	str	r0, [sp, #64]	; 0x40
  4070de:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4070e2:	f7fe bfa1 	b.w	406028 <_vfprintf_r+0x264>
  4070e6:	aa23      	add	r2, sp, #140	; 0x8c
  4070e8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4070ea:	9808      	ldr	r0, [sp, #32]
  4070ec:	f7fd ffd6 	bl	40509c <__sprint_r>
  4070f0:	2800      	cmp	r0, #0
  4070f2:	f47f abf1 	bne.w	4068d8 <_vfprintf_r+0xb14>
  4070f6:	991d      	ldr	r1, [sp, #116]	; 0x74
  4070f8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4070fa:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4070fe:	e6d0      	b.n	406ea2 <_vfprintf_r+0x10de>
  407100:	2e47      	cmp	r6, #71	; 0x47
  407102:	f47f ae52 	bne.w	406daa <_vfprintf_r+0xfe6>
  407106:	f01b 0f01 	tst.w	fp, #1
  40710a:	f000 80da 	beq.w	4072c2 <_vfprintf_r+0x14fe>
  40710e:	2e46      	cmp	r6, #70	; 0x46
  407110:	eb07 0405 	add.w	r4, r7, r5
  407114:	d0b9      	beq.n	40708a <_vfprintf_r+0x12c6>
  407116:	e649      	b.n	406dac <_vfprintf_r+0xfe8>
  407118:	a821      	add	r0, sp, #132	; 0x84
  40711a:	a91e      	add	r1, sp, #120	; 0x78
  40711c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40711e:	9004      	str	r0, [sp, #16]
  407120:	9103      	str	r1, [sp, #12]
  407122:	a81d      	add	r0, sp, #116	; 0x74
  407124:	2103      	movs	r1, #3
  407126:	9002      	str	r0, [sp, #8]
  407128:	9a07      	ldr	r2, [sp, #28]
  40712a:	9401      	str	r4, [sp, #4]
  40712c:	4653      	mov	r3, sl
  40712e:	9100      	str	r1, [sp, #0]
  407130:	9808      	ldr	r0, [sp, #32]
  407132:	f000 fa45 	bl	4075c0 <_dtoa_r>
  407136:	4625      	mov	r5, r4
  407138:	4607      	mov	r7, r0
  40713a:	e7e8      	b.n	40710e <_vfprintf_r+0x134a>
  40713c:	2300      	movs	r3, #0
  40713e:	9309      	str	r3, [sp, #36]	; 0x24
  407140:	f7fe bec1 	b.w	405ec6 <_vfprintf_r+0x102>
  407144:	424e      	negs	r6, r1
  407146:	3110      	adds	r1, #16
  407148:	4d06      	ldr	r5, [pc, #24]	; (407164 <_vfprintf_r+0x13a0>)
  40714a:	da43      	bge.n	4071d4 <_vfprintf_r+0x1410>
  40714c:	2410      	movs	r4, #16
  40714e:	f8dd a020 	ldr.w	sl, [sp, #32]
  407152:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407156:	e00c      	b.n	407172 <_vfprintf_r+0x13ae>
  407158:	0040aa5c 	.word	0x0040aa5c
  40715c:	66666667 	.word	0x66666667
  407160:	0040aa24 	.word	0x0040aa24
  407164:	0040aa70 	.word	0x0040aa70
  407168:	f108 0808 	add.w	r8, r8, #8
  40716c:	3e10      	subs	r6, #16
  40716e:	2e10      	cmp	r6, #16
  407170:	dd30      	ble.n	4071d4 <_vfprintf_r+0x1410>
  407172:	3301      	adds	r3, #1
  407174:	3210      	adds	r2, #16
  407176:	2b07      	cmp	r3, #7
  407178:	9225      	str	r2, [sp, #148]	; 0x94
  40717a:	9324      	str	r3, [sp, #144]	; 0x90
  40717c:	f8c8 5000 	str.w	r5, [r8]
  407180:	f8c8 4004 	str.w	r4, [r8, #4]
  407184:	ddf0      	ble.n	407168 <_vfprintf_r+0x13a4>
  407186:	aa23      	add	r2, sp, #140	; 0x8c
  407188:	4659      	mov	r1, fp
  40718a:	4650      	mov	r0, sl
  40718c:	f7fd ff86 	bl	40509c <__sprint_r>
  407190:	2800      	cmp	r0, #0
  407192:	f47f aeba 	bne.w	406f0a <_vfprintf_r+0x1146>
  407196:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407198:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40719a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40719e:	e7e5      	b.n	40716c <_vfprintf_r+0x13a8>
  4071a0:	aa23      	add	r2, sp, #140	; 0x8c
  4071a2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4071a4:	9808      	ldr	r0, [sp, #32]
  4071a6:	f7fd ff79 	bl	40509c <__sprint_r>
  4071aa:	2800      	cmp	r0, #0
  4071ac:	f47f ab94 	bne.w	4068d8 <_vfprintf_r+0xb14>
  4071b0:	991d      	ldr	r1, [sp, #116]	; 0x74
  4071b2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4071b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4071b6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4071ba:	e68a      	b.n	406ed2 <_vfprintf_r+0x110e>
  4071bc:	9808      	ldr	r0, [sp, #32]
  4071be:	aa23      	add	r2, sp, #140	; 0x8c
  4071c0:	4651      	mov	r1, sl
  4071c2:	f7fd ff6b 	bl	40509c <__sprint_r>
  4071c6:	2800      	cmp	r0, #0
  4071c8:	f43f aa64 	beq.w	406694 <_vfprintf_r+0x8d0>
  4071cc:	f7ff ba64 	b.w	406698 <_vfprintf_r+0x8d4>
  4071d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4071d2:	e5fe      	b.n	406dd2 <_vfprintf_r+0x100e>
  4071d4:	3301      	adds	r3, #1
  4071d6:	4432      	add	r2, r6
  4071d8:	2b07      	cmp	r3, #7
  4071da:	e888 0060 	stmia.w	r8, {r5, r6}
  4071de:	9225      	str	r2, [sp, #148]	; 0x94
  4071e0:	9324      	str	r3, [sp, #144]	; 0x90
  4071e2:	f108 0808 	add.w	r8, r8, #8
  4071e6:	f77f ae77 	ble.w	406ed8 <_vfprintf_r+0x1114>
  4071ea:	aa23      	add	r2, sp, #140	; 0x8c
  4071ec:	990a      	ldr	r1, [sp, #40]	; 0x28
  4071ee:	9808      	ldr	r0, [sp, #32]
  4071f0:	f7fd ff54 	bl	40509c <__sprint_r>
  4071f4:	2800      	cmp	r0, #0
  4071f6:	f47f ab6f 	bne.w	4068d8 <_vfprintf_r+0xb14>
  4071fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4071fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4071fe:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407202:	e669      	b.n	406ed8 <_vfprintf_r+0x1114>
  407204:	3330      	adds	r3, #48	; 0x30
  407206:	2230      	movs	r2, #48	; 0x30
  407208:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40720c:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  407210:	ab20      	add	r3, sp, #128	; 0x80
  407212:	e6e7      	b.n	406fe4 <_vfprintf_r+0x1220>
  407214:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407216:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407218:	4413      	add	r3, r2
  40721a:	930d      	str	r3, [sp, #52]	; 0x34
  40721c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407220:	9307      	str	r3, [sp, #28]
  407222:	2667      	movs	r6, #103	; 0x67
  407224:	e5f2      	b.n	406e0c <_vfprintf_r+0x1048>
  407226:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407228:	9807      	ldr	r0, [sp, #28]
  40722a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40722c:	4651      	mov	r1, sl
  40722e:	f7fd fc2f 	bl	404a90 <__aeabi_dcmpeq>
  407232:	2800      	cmp	r0, #0
  407234:	f47f af2d 	bne.w	407092 <_vfprintf_r+0x12ce>
  407238:	f1c5 0501 	rsb	r5, r5, #1
  40723c:	951d      	str	r5, [sp, #116]	; 0x74
  40723e:	442c      	add	r4, r5
  407240:	e5b4      	b.n	406dac <_vfprintf_r+0xfe8>
  407242:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407244:	4f33      	ldr	r7, [pc, #204]	; (407314 <_vfprintf_r+0x1550>)
  407246:	2b00      	cmp	r3, #0
  407248:	bfb6      	itet	lt
  40724a:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  40724e:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  407252:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  407256:	4b30      	ldr	r3, [pc, #192]	; (407318 <_vfprintf_r+0x1554>)
  407258:	f7ff b9d1 	b.w	4065fe <_vfprintf_r+0x83a>
  40725c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40725e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407260:	4413      	add	r3, r2
  407262:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407264:	441a      	add	r2, r3
  407266:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40726a:	920d      	str	r2, [sp, #52]	; 0x34
  40726c:	9307      	str	r3, [sp, #28]
  40726e:	e5cd      	b.n	406e0c <_vfprintf_r+0x1048>
  407270:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407272:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407274:	f1c3 0301 	rsb	r3, r3, #1
  407278:	441a      	add	r2, r3
  40727a:	4613      	mov	r3, r2
  40727c:	920d      	str	r2, [sp, #52]	; 0x34
  40727e:	e713      	b.n	4070a8 <_vfprintf_r+0x12e4>
  407280:	f01b 0301 	ands.w	r3, fp, #1
  407284:	9310      	str	r3, [sp, #64]	; 0x40
  407286:	f47f aeb6 	bne.w	406ff6 <_vfprintf_r+0x1232>
  40728a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40728c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407290:	9307      	str	r3, [sp, #28]
  407292:	e5bb      	b.n	406e0c <_vfprintf_r+0x1048>
  407294:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  407296:	f899 6001 	ldrb.w	r6, [r9, #1]
  40729a:	6823      	ldr	r3, [r4, #0]
  40729c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  4072a0:	9309      	str	r3, [sp, #36]	; 0x24
  4072a2:	4623      	mov	r3, r4
  4072a4:	3304      	adds	r3, #4
  4072a6:	4681      	mov	r9, r0
  4072a8:	930e      	str	r3, [sp, #56]	; 0x38
  4072aa:	f7fe be0a 	b.w	405ec2 <_vfprintf_r+0xfe>
  4072ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4072b0:	b913      	cbnz	r3, 4072b8 <_vfprintf_r+0x14f4>
  4072b2:	f01b 0f01 	tst.w	fp, #1
  4072b6:	d002      	beq.n	4072be <_vfprintf_r+0x14fa>
  4072b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4072ba:	3301      	adds	r3, #1
  4072bc:	e7d1      	b.n	407262 <_vfprintf_r+0x149e>
  4072be:	2301      	movs	r3, #1
  4072c0:	e702      	b.n	4070c8 <_vfprintf_r+0x1304>
  4072c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4072c4:	1bdb      	subs	r3, r3, r7
  4072c6:	9311      	str	r3, [sp, #68]	; 0x44
  4072c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4072ca:	2b47      	cmp	r3, #71	; 0x47
  4072cc:	f43f ae40 	beq.w	406f50 <_vfprintf_r+0x118c>
  4072d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4072d2:	9310      	str	r3, [sp, #64]	; 0x40
  4072d4:	e647      	b.n	406f66 <_vfprintf_r+0x11a2>
  4072d6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4072da:	f7ff b81d 	b.w	406318 <_vfprintf_r+0x554>
  4072de:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4072e2:	f7ff b918 	b.w	406516 <_vfprintf_r+0x752>
  4072e6:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  4072ea:	e67b      	b.n	406fe4 <_vfprintf_r+0x1220>
  4072ec:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4072f0:	f7ff b866 	b.w	4063c0 <_vfprintf_r+0x5fc>
  4072f4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4072f8:	f7ff b9ac 	b.w	406654 <_vfprintf_r+0x890>
  4072fc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407300:	f7ff b934 	b.w	40656c <_vfprintf_r+0x7a8>
  407304:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407308:	f7ff b8b0 	b.w	40646c <_vfprintf_r+0x6a8>
  40730c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407310:	f7ff b945 	b.w	40659e <_vfprintf_r+0x7da>
  407314:	0040aa58 	.word	0x0040aa58
  407318:	0040aa54 	.word	0x0040aa54

0040731c <__sbprintf>:
  40731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407320:	460c      	mov	r4, r1
  407322:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  407326:	8989      	ldrh	r1, [r1, #12]
  407328:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40732a:	89e5      	ldrh	r5, [r4, #14]
  40732c:	9619      	str	r6, [sp, #100]	; 0x64
  40732e:	f021 0102 	bic.w	r1, r1, #2
  407332:	4606      	mov	r6, r0
  407334:	69e0      	ldr	r0, [r4, #28]
  407336:	f8ad 100c 	strh.w	r1, [sp, #12]
  40733a:	4617      	mov	r7, r2
  40733c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  407340:	6a62      	ldr	r2, [r4, #36]	; 0x24
  407342:	f8ad 500e 	strh.w	r5, [sp, #14]
  407346:	4698      	mov	r8, r3
  407348:	ad1a      	add	r5, sp, #104	; 0x68
  40734a:	2300      	movs	r3, #0
  40734c:	9007      	str	r0, [sp, #28]
  40734e:	a816      	add	r0, sp, #88	; 0x58
  407350:	9209      	str	r2, [sp, #36]	; 0x24
  407352:	9306      	str	r3, [sp, #24]
  407354:	9500      	str	r5, [sp, #0]
  407356:	9504      	str	r5, [sp, #16]
  407358:	9102      	str	r1, [sp, #8]
  40735a:	9105      	str	r1, [sp, #20]
  40735c:	f001 fd1c 	bl	408d98 <__retarget_lock_init_recursive>
  407360:	4643      	mov	r3, r8
  407362:	463a      	mov	r2, r7
  407364:	4669      	mov	r1, sp
  407366:	4630      	mov	r0, r6
  407368:	f7fe fd2c 	bl	405dc4 <_vfprintf_r>
  40736c:	1e05      	subs	r5, r0, #0
  40736e:	db07      	blt.n	407380 <__sbprintf+0x64>
  407370:	4630      	mov	r0, r6
  407372:	4669      	mov	r1, sp
  407374:	f001 f8ee 	bl	408554 <_fflush_r>
  407378:	2800      	cmp	r0, #0
  40737a:	bf18      	it	ne
  40737c:	f04f 35ff 	movne.w	r5, #4294967295
  407380:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407384:	065b      	lsls	r3, r3, #25
  407386:	d503      	bpl.n	407390 <__sbprintf+0x74>
  407388:	89a3      	ldrh	r3, [r4, #12]
  40738a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40738e:	81a3      	strh	r3, [r4, #12]
  407390:	9816      	ldr	r0, [sp, #88]	; 0x58
  407392:	f001 fd03 	bl	408d9c <__retarget_lock_close_recursive>
  407396:	4628      	mov	r0, r5
  407398:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004073a0 <__swsetup_r>:
  4073a0:	b538      	push	{r3, r4, r5, lr}
  4073a2:	4b30      	ldr	r3, [pc, #192]	; (407464 <__swsetup_r+0xc4>)
  4073a4:	681b      	ldr	r3, [r3, #0]
  4073a6:	4605      	mov	r5, r0
  4073a8:	460c      	mov	r4, r1
  4073aa:	b113      	cbz	r3, 4073b2 <__swsetup_r+0x12>
  4073ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4073ae:	2a00      	cmp	r2, #0
  4073b0:	d038      	beq.n	407424 <__swsetup_r+0x84>
  4073b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4073b6:	b293      	uxth	r3, r2
  4073b8:	0718      	lsls	r0, r3, #28
  4073ba:	d50c      	bpl.n	4073d6 <__swsetup_r+0x36>
  4073bc:	6920      	ldr	r0, [r4, #16]
  4073be:	b1a8      	cbz	r0, 4073ec <__swsetup_r+0x4c>
  4073c0:	f013 0201 	ands.w	r2, r3, #1
  4073c4:	d01e      	beq.n	407404 <__swsetup_r+0x64>
  4073c6:	6963      	ldr	r3, [r4, #20]
  4073c8:	2200      	movs	r2, #0
  4073ca:	425b      	negs	r3, r3
  4073cc:	61a3      	str	r3, [r4, #24]
  4073ce:	60a2      	str	r2, [r4, #8]
  4073d0:	b1f0      	cbz	r0, 407410 <__swsetup_r+0x70>
  4073d2:	2000      	movs	r0, #0
  4073d4:	bd38      	pop	{r3, r4, r5, pc}
  4073d6:	06d9      	lsls	r1, r3, #27
  4073d8:	d53c      	bpl.n	407454 <__swsetup_r+0xb4>
  4073da:	0758      	lsls	r0, r3, #29
  4073dc:	d426      	bmi.n	40742c <__swsetup_r+0x8c>
  4073de:	6920      	ldr	r0, [r4, #16]
  4073e0:	f042 0308 	orr.w	r3, r2, #8
  4073e4:	81a3      	strh	r3, [r4, #12]
  4073e6:	b29b      	uxth	r3, r3
  4073e8:	2800      	cmp	r0, #0
  4073ea:	d1e9      	bne.n	4073c0 <__swsetup_r+0x20>
  4073ec:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4073f0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4073f4:	d0e4      	beq.n	4073c0 <__swsetup_r+0x20>
  4073f6:	4628      	mov	r0, r5
  4073f8:	4621      	mov	r1, r4
  4073fa:	f001 fd03 	bl	408e04 <__smakebuf_r>
  4073fe:	89a3      	ldrh	r3, [r4, #12]
  407400:	6920      	ldr	r0, [r4, #16]
  407402:	e7dd      	b.n	4073c0 <__swsetup_r+0x20>
  407404:	0799      	lsls	r1, r3, #30
  407406:	bf58      	it	pl
  407408:	6962      	ldrpl	r2, [r4, #20]
  40740a:	60a2      	str	r2, [r4, #8]
  40740c:	2800      	cmp	r0, #0
  40740e:	d1e0      	bne.n	4073d2 <__swsetup_r+0x32>
  407410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407414:	061a      	lsls	r2, r3, #24
  407416:	d5dd      	bpl.n	4073d4 <__swsetup_r+0x34>
  407418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40741c:	81a3      	strh	r3, [r4, #12]
  40741e:	f04f 30ff 	mov.w	r0, #4294967295
  407422:	bd38      	pop	{r3, r4, r5, pc}
  407424:	4618      	mov	r0, r3
  407426:	f001 f8ed 	bl	408604 <__sinit>
  40742a:	e7c2      	b.n	4073b2 <__swsetup_r+0x12>
  40742c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40742e:	b151      	cbz	r1, 407446 <__swsetup_r+0xa6>
  407430:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407434:	4299      	cmp	r1, r3
  407436:	d004      	beq.n	407442 <__swsetup_r+0xa2>
  407438:	4628      	mov	r0, r5
  40743a:	f001 fa09 	bl	408850 <_free_r>
  40743e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407442:	2300      	movs	r3, #0
  407444:	6323      	str	r3, [r4, #48]	; 0x30
  407446:	2300      	movs	r3, #0
  407448:	6920      	ldr	r0, [r4, #16]
  40744a:	6063      	str	r3, [r4, #4]
  40744c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407450:	6020      	str	r0, [r4, #0]
  407452:	e7c5      	b.n	4073e0 <__swsetup_r+0x40>
  407454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407458:	2309      	movs	r3, #9
  40745a:	602b      	str	r3, [r5, #0]
  40745c:	f04f 30ff 	mov.w	r0, #4294967295
  407460:	81a2      	strh	r2, [r4, #12]
  407462:	bd38      	pop	{r3, r4, r5, pc}
  407464:	2040000c 	.word	0x2040000c

00407468 <register_fini>:
  407468:	4b02      	ldr	r3, [pc, #8]	; (407474 <register_fini+0xc>)
  40746a:	b113      	cbz	r3, 407472 <register_fini+0xa>
  40746c:	4802      	ldr	r0, [pc, #8]	; (407478 <register_fini+0x10>)
  40746e:	f000 b80d 	b.w	40748c <atexit>
  407472:	4770      	bx	lr
  407474:	00000000 	.word	0x00000000
  407478:	00408675 	.word	0x00408675

0040747c <abort>:
  40747c:	b508      	push	{r3, lr}
  40747e:	2006      	movs	r0, #6
  407480:	f002 fd80 	bl	409f84 <raise>
  407484:	2001      	movs	r0, #1
  407486:	f7fc fb3d 	bl	403b04 <_exit>
  40748a:	bf00      	nop

0040748c <atexit>:
  40748c:	2300      	movs	r3, #0
  40748e:	4601      	mov	r1, r0
  407490:	461a      	mov	r2, r3
  407492:	4618      	mov	r0, r3
  407494:	f002 be7e 	b.w	40a194 <__register_exitproc>

00407498 <quorem>:
  407498:	6902      	ldr	r2, [r0, #16]
  40749a:	690b      	ldr	r3, [r1, #16]
  40749c:	4293      	cmp	r3, r2
  40749e:	f300 808d 	bgt.w	4075bc <quorem+0x124>
  4074a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4074a6:	f103 38ff 	add.w	r8, r3, #4294967295
  4074aa:	f101 0714 	add.w	r7, r1, #20
  4074ae:	f100 0b14 	add.w	fp, r0, #20
  4074b2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4074b6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4074ba:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4074be:	b083      	sub	sp, #12
  4074c0:	3201      	adds	r2, #1
  4074c2:	fbb3 f9f2 	udiv	r9, r3, r2
  4074c6:	eb0b 0304 	add.w	r3, fp, r4
  4074ca:	9400      	str	r4, [sp, #0]
  4074cc:	eb07 0a04 	add.w	sl, r7, r4
  4074d0:	9301      	str	r3, [sp, #4]
  4074d2:	f1b9 0f00 	cmp.w	r9, #0
  4074d6:	d039      	beq.n	40754c <quorem+0xb4>
  4074d8:	2500      	movs	r5, #0
  4074da:	462e      	mov	r6, r5
  4074dc:	46bc      	mov	ip, r7
  4074de:	46de      	mov	lr, fp
  4074e0:	f85c 4b04 	ldr.w	r4, [ip], #4
  4074e4:	f8de 3000 	ldr.w	r3, [lr]
  4074e8:	b2a2      	uxth	r2, r4
  4074ea:	fb09 5502 	mla	r5, r9, r2, r5
  4074ee:	0c22      	lsrs	r2, r4, #16
  4074f0:	0c2c      	lsrs	r4, r5, #16
  4074f2:	fb09 4202 	mla	r2, r9, r2, r4
  4074f6:	b2ad      	uxth	r5, r5
  4074f8:	1b75      	subs	r5, r6, r5
  4074fa:	b296      	uxth	r6, r2
  4074fc:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  407500:	fa15 f383 	uxtah	r3, r5, r3
  407504:	eb06 4623 	add.w	r6, r6, r3, asr #16
  407508:	b29b      	uxth	r3, r3
  40750a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40750e:	45e2      	cmp	sl, ip
  407510:	ea4f 4512 	mov.w	r5, r2, lsr #16
  407514:	f84e 3b04 	str.w	r3, [lr], #4
  407518:	ea4f 4626 	mov.w	r6, r6, asr #16
  40751c:	d2e0      	bcs.n	4074e0 <quorem+0x48>
  40751e:	9b00      	ldr	r3, [sp, #0]
  407520:	f85b 3003 	ldr.w	r3, [fp, r3]
  407524:	b993      	cbnz	r3, 40754c <quorem+0xb4>
  407526:	9c01      	ldr	r4, [sp, #4]
  407528:	1f23      	subs	r3, r4, #4
  40752a:	459b      	cmp	fp, r3
  40752c:	d20c      	bcs.n	407548 <quorem+0xb0>
  40752e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407532:	b94b      	cbnz	r3, 407548 <quorem+0xb0>
  407534:	f1a4 0308 	sub.w	r3, r4, #8
  407538:	e002      	b.n	407540 <quorem+0xa8>
  40753a:	681a      	ldr	r2, [r3, #0]
  40753c:	3b04      	subs	r3, #4
  40753e:	b91a      	cbnz	r2, 407548 <quorem+0xb0>
  407540:	459b      	cmp	fp, r3
  407542:	f108 38ff 	add.w	r8, r8, #4294967295
  407546:	d3f8      	bcc.n	40753a <quorem+0xa2>
  407548:	f8c0 8010 	str.w	r8, [r0, #16]
  40754c:	4604      	mov	r4, r0
  40754e:	f002 fa35 	bl	4099bc <__mcmp>
  407552:	2800      	cmp	r0, #0
  407554:	db2e      	blt.n	4075b4 <quorem+0x11c>
  407556:	f109 0901 	add.w	r9, r9, #1
  40755a:	465d      	mov	r5, fp
  40755c:	2300      	movs	r3, #0
  40755e:	f857 1b04 	ldr.w	r1, [r7], #4
  407562:	6828      	ldr	r0, [r5, #0]
  407564:	b28a      	uxth	r2, r1
  407566:	1a9a      	subs	r2, r3, r2
  407568:	0c0b      	lsrs	r3, r1, #16
  40756a:	fa12 f280 	uxtah	r2, r2, r0
  40756e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  407572:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407576:	b292      	uxth	r2, r2
  407578:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40757c:	45ba      	cmp	sl, r7
  40757e:	f845 2b04 	str.w	r2, [r5], #4
  407582:	ea4f 4323 	mov.w	r3, r3, asr #16
  407586:	d2ea      	bcs.n	40755e <quorem+0xc6>
  407588:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40758c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  407590:	b982      	cbnz	r2, 4075b4 <quorem+0x11c>
  407592:	1f1a      	subs	r2, r3, #4
  407594:	4593      	cmp	fp, r2
  407596:	d20b      	bcs.n	4075b0 <quorem+0x118>
  407598:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40759c:	b942      	cbnz	r2, 4075b0 <quorem+0x118>
  40759e:	3b08      	subs	r3, #8
  4075a0:	e002      	b.n	4075a8 <quorem+0x110>
  4075a2:	681a      	ldr	r2, [r3, #0]
  4075a4:	3b04      	subs	r3, #4
  4075a6:	b91a      	cbnz	r2, 4075b0 <quorem+0x118>
  4075a8:	459b      	cmp	fp, r3
  4075aa:	f108 38ff 	add.w	r8, r8, #4294967295
  4075ae:	d3f8      	bcc.n	4075a2 <quorem+0x10a>
  4075b0:	f8c4 8010 	str.w	r8, [r4, #16]
  4075b4:	4648      	mov	r0, r9
  4075b6:	b003      	add	sp, #12
  4075b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4075bc:	2000      	movs	r0, #0
  4075be:	4770      	bx	lr

004075c0 <_dtoa_r>:
  4075c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4075c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4075c6:	b09b      	sub	sp, #108	; 0x6c
  4075c8:	4604      	mov	r4, r0
  4075ca:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4075cc:	4692      	mov	sl, r2
  4075ce:	469b      	mov	fp, r3
  4075d0:	b141      	cbz	r1, 4075e4 <_dtoa_r+0x24>
  4075d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4075d4:	604a      	str	r2, [r1, #4]
  4075d6:	2301      	movs	r3, #1
  4075d8:	4093      	lsls	r3, r2
  4075da:	608b      	str	r3, [r1, #8]
  4075dc:	f002 f816 	bl	40960c <_Bfree>
  4075e0:	2300      	movs	r3, #0
  4075e2:	6423      	str	r3, [r4, #64]	; 0x40
  4075e4:	f1bb 0f00 	cmp.w	fp, #0
  4075e8:	465d      	mov	r5, fp
  4075ea:	db35      	blt.n	407658 <_dtoa_r+0x98>
  4075ec:	2300      	movs	r3, #0
  4075ee:	6033      	str	r3, [r6, #0]
  4075f0:	4b9d      	ldr	r3, [pc, #628]	; (407868 <_dtoa_r+0x2a8>)
  4075f2:	43ab      	bics	r3, r5
  4075f4:	d015      	beq.n	407622 <_dtoa_r+0x62>
  4075f6:	4650      	mov	r0, sl
  4075f8:	4659      	mov	r1, fp
  4075fa:	2200      	movs	r2, #0
  4075fc:	2300      	movs	r3, #0
  4075fe:	f7fd fa47 	bl	404a90 <__aeabi_dcmpeq>
  407602:	4680      	mov	r8, r0
  407604:	2800      	cmp	r0, #0
  407606:	d02d      	beq.n	407664 <_dtoa_r+0xa4>
  407608:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40760a:	2301      	movs	r3, #1
  40760c:	6013      	str	r3, [r2, #0]
  40760e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407610:	2b00      	cmp	r3, #0
  407612:	f000 80bd 	beq.w	407790 <_dtoa_r+0x1d0>
  407616:	4895      	ldr	r0, [pc, #596]	; (40786c <_dtoa_r+0x2ac>)
  407618:	6018      	str	r0, [r3, #0]
  40761a:	3801      	subs	r0, #1
  40761c:	b01b      	add	sp, #108	; 0x6c
  40761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407622:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407624:	f242 730f 	movw	r3, #9999	; 0x270f
  407628:	6013      	str	r3, [r2, #0]
  40762a:	f1ba 0f00 	cmp.w	sl, #0
  40762e:	d10d      	bne.n	40764c <_dtoa_r+0x8c>
  407630:	f3c5 0513 	ubfx	r5, r5, #0, #20
  407634:	b955      	cbnz	r5, 40764c <_dtoa_r+0x8c>
  407636:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407638:	488d      	ldr	r0, [pc, #564]	; (407870 <_dtoa_r+0x2b0>)
  40763a:	2b00      	cmp	r3, #0
  40763c:	d0ee      	beq.n	40761c <_dtoa_r+0x5c>
  40763e:	f100 0308 	add.w	r3, r0, #8
  407642:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  407644:	6013      	str	r3, [r2, #0]
  407646:	b01b      	add	sp, #108	; 0x6c
  407648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40764c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40764e:	4889      	ldr	r0, [pc, #548]	; (407874 <_dtoa_r+0x2b4>)
  407650:	2b00      	cmp	r3, #0
  407652:	d0e3      	beq.n	40761c <_dtoa_r+0x5c>
  407654:	1cc3      	adds	r3, r0, #3
  407656:	e7f4      	b.n	407642 <_dtoa_r+0x82>
  407658:	2301      	movs	r3, #1
  40765a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40765e:	6033      	str	r3, [r6, #0]
  407660:	46ab      	mov	fp, r5
  407662:	e7c5      	b.n	4075f0 <_dtoa_r+0x30>
  407664:	aa18      	add	r2, sp, #96	; 0x60
  407666:	ab19      	add	r3, sp, #100	; 0x64
  407668:	9201      	str	r2, [sp, #4]
  40766a:	9300      	str	r3, [sp, #0]
  40766c:	4652      	mov	r2, sl
  40766e:	465b      	mov	r3, fp
  407670:	4620      	mov	r0, r4
  407672:	f002 fa43 	bl	409afc <__d2b>
  407676:	0d2b      	lsrs	r3, r5, #20
  407678:	4681      	mov	r9, r0
  40767a:	d071      	beq.n	407760 <_dtoa_r+0x1a0>
  40767c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  407680:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  407684:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407686:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40768a:	4650      	mov	r0, sl
  40768c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  407690:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  407694:	2200      	movs	r2, #0
  407696:	4b78      	ldr	r3, [pc, #480]	; (407878 <_dtoa_r+0x2b8>)
  407698:	f7fc fdde 	bl	404258 <__aeabi_dsub>
  40769c:	a36c      	add	r3, pc, #432	; (adr r3, 407850 <_dtoa_r+0x290>)
  40769e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4076a2:	f7fc ff8d 	bl	4045c0 <__aeabi_dmul>
  4076a6:	a36c      	add	r3, pc, #432	; (adr r3, 407858 <_dtoa_r+0x298>)
  4076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4076ac:	f7fc fdd6 	bl	40425c <__adddf3>
  4076b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4076b4:	4630      	mov	r0, r6
  4076b6:	f7fc ff1d 	bl	4044f4 <__aeabi_i2d>
  4076ba:	a369      	add	r3, pc, #420	; (adr r3, 407860 <_dtoa_r+0x2a0>)
  4076bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4076c0:	f7fc ff7e 	bl	4045c0 <__aeabi_dmul>
  4076c4:	4602      	mov	r2, r0
  4076c6:	460b      	mov	r3, r1
  4076c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4076cc:	f7fc fdc6 	bl	40425c <__adddf3>
  4076d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4076d4:	f002 fecc 	bl	40a470 <__aeabi_d2iz>
  4076d8:	2200      	movs	r2, #0
  4076da:	9002      	str	r0, [sp, #8]
  4076dc:	2300      	movs	r3, #0
  4076de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4076e2:	f7fd f9df 	bl	404aa4 <__aeabi_dcmplt>
  4076e6:	2800      	cmp	r0, #0
  4076e8:	f040 8173 	bne.w	4079d2 <_dtoa_r+0x412>
  4076ec:	9d02      	ldr	r5, [sp, #8]
  4076ee:	2d16      	cmp	r5, #22
  4076f0:	f200 815d 	bhi.w	4079ae <_dtoa_r+0x3ee>
  4076f4:	4b61      	ldr	r3, [pc, #388]	; (40787c <_dtoa_r+0x2bc>)
  4076f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4076fa:	e9d3 0100 	ldrd	r0, r1, [r3]
  4076fe:	4652      	mov	r2, sl
  407700:	465b      	mov	r3, fp
  407702:	f7fd f9ed 	bl	404ae0 <__aeabi_dcmpgt>
  407706:	2800      	cmp	r0, #0
  407708:	f000 81c5 	beq.w	407a96 <_dtoa_r+0x4d6>
  40770c:	1e6b      	subs	r3, r5, #1
  40770e:	9302      	str	r3, [sp, #8]
  407710:	2300      	movs	r3, #0
  407712:	930e      	str	r3, [sp, #56]	; 0x38
  407714:	1bbf      	subs	r7, r7, r6
  407716:	1e7b      	subs	r3, r7, #1
  407718:	9306      	str	r3, [sp, #24]
  40771a:	f100 8154 	bmi.w	4079c6 <_dtoa_r+0x406>
  40771e:	2300      	movs	r3, #0
  407720:	9308      	str	r3, [sp, #32]
  407722:	9b02      	ldr	r3, [sp, #8]
  407724:	2b00      	cmp	r3, #0
  407726:	f2c0 8145 	blt.w	4079b4 <_dtoa_r+0x3f4>
  40772a:	9a06      	ldr	r2, [sp, #24]
  40772c:	930d      	str	r3, [sp, #52]	; 0x34
  40772e:	4611      	mov	r1, r2
  407730:	4419      	add	r1, r3
  407732:	2300      	movs	r3, #0
  407734:	9106      	str	r1, [sp, #24]
  407736:	930c      	str	r3, [sp, #48]	; 0x30
  407738:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40773a:	2b09      	cmp	r3, #9
  40773c:	d82a      	bhi.n	407794 <_dtoa_r+0x1d4>
  40773e:	2b05      	cmp	r3, #5
  407740:	f340 865b 	ble.w	4083fa <_dtoa_r+0xe3a>
  407744:	3b04      	subs	r3, #4
  407746:	9324      	str	r3, [sp, #144]	; 0x90
  407748:	2500      	movs	r5, #0
  40774a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40774c:	3b02      	subs	r3, #2
  40774e:	2b03      	cmp	r3, #3
  407750:	f200 8642 	bhi.w	4083d8 <_dtoa_r+0xe18>
  407754:	e8df f013 	tbh	[pc, r3, lsl #1]
  407758:	02c903d4 	.word	0x02c903d4
  40775c:	046103df 	.word	0x046103df
  407760:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407762:	9e19      	ldr	r6, [sp, #100]	; 0x64
  407764:	443e      	add	r6, r7
  407766:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40776a:	2b20      	cmp	r3, #32
  40776c:	f340 818e 	ble.w	407a8c <_dtoa_r+0x4cc>
  407770:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  407774:	f206 4012 	addw	r0, r6, #1042	; 0x412
  407778:	409d      	lsls	r5, r3
  40777a:	fa2a f000 	lsr.w	r0, sl, r0
  40777e:	4328      	orrs	r0, r5
  407780:	f7fc fea8 	bl	4044d4 <__aeabi_ui2d>
  407784:	2301      	movs	r3, #1
  407786:	3e01      	subs	r6, #1
  407788:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40778c:	9314      	str	r3, [sp, #80]	; 0x50
  40778e:	e781      	b.n	407694 <_dtoa_r+0xd4>
  407790:	483b      	ldr	r0, [pc, #236]	; (407880 <_dtoa_r+0x2c0>)
  407792:	e743      	b.n	40761c <_dtoa_r+0x5c>
  407794:	2100      	movs	r1, #0
  407796:	6461      	str	r1, [r4, #68]	; 0x44
  407798:	4620      	mov	r0, r4
  40779a:	9125      	str	r1, [sp, #148]	; 0x94
  40779c:	f001 ff10 	bl	4095c0 <_Balloc>
  4077a0:	f04f 33ff 	mov.w	r3, #4294967295
  4077a4:	930a      	str	r3, [sp, #40]	; 0x28
  4077a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4077a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4077aa:	2301      	movs	r3, #1
  4077ac:	9004      	str	r0, [sp, #16]
  4077ae:	6420      	str	r0, [r4, #64]	; 0x40
  4077b0:	9224      	str	r2, [sp, #144]	; 0x90
  4077b2:	930b      	str	r3, [sp, #44]	; 0x2c
  4077b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4077b6:	2b00      	cmp	r3, #0
  4077b8:	f2c0 80d9 	blt.w	40796e <_dtoa_r+0x3ae>
  4077bc:	9a02      	ldr	r2, [sp, #8]
  4077be:	2a0e      	cmp	r2, #14
  4077c0:	f300 80d5 	bgt.w	40796e <_dtoa_r+0x3ae>
  4077c4:	4b2d      	ldr	r3, [pc, #180]	; (40787c <_dtoa_r+0x2bc>)
  4077c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4077ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4077d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4077d4:	2b00      	cmp	r3, #0
  4077d6:	f2c0 83ba 	blt.w	407f4e <_dtoa_r+0x98e>
  4077da:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4077de:	4650      	mov	r0, sl
  4077e0:	462a      	mov	r2, r5
  4077e2:	4633      	mov	r3, r6
  4077e4:	4659      	mov	r1, fp
  4077e6:	f7fd f815 	bl	404814 <__aeabi_ddiv>
  4077ea:	f002 fe41 	bl	40a470 <__aeabi_d2iz>
  4077ee:	4680      	mov	r8, r0
  4077f0:	f7fc fe80 	bl	4044f4 <__aeabi_i2d>
  4077f4:	462a      	mov	r2, r5
  4077f6:	4633      	mov	r3, r6
  4077f8:	f7fc fee2 	bl	4045c0 <__aeabi_dmul>
  4077fc:	460b      	mov	r3, r1
  4077fe:	4602      	mov	r2, r0
  407800:	4659      	mov	r1, fp
  407802:	4650      	mov	r0, sl
  407804:	f7fc fd28 	bl	404258 <__aeabi_dsub>
  407808:	9d04      	ldr	r5, [sp, #16]
  40780a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40780e:	702b      	strb	r3, [r5, #0]
  407810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407812:	2b01      	cmp	r3, #1
  407814:	4606      	mov	r6, r0
  407816:	460f      	mov	r7, r1
  407818:	f105 0501 	add.w	r5, r5, #1
  40781c:	d068      	beq.n	4078f0 <_dtoa_r+0x330>
  40781e:	2200      	movs	r2, #0
  407820:	4b18      	ldr	r3, [pc, #96]	; (407884 <_dtoa_r+0x2c4>)
  407822:	f7fc fecd 	bl	4045c0 <__aeabi_dmul>
  407826:	2200      	movs	r2, #0
  407828:	2300      	movs	r3, #0
  40782a:	4606      	mov	r6, r0
  40782c:	460f      	mov	r7, r1
  40782e:	f7fd f92f 	bl	404a90 <__aeabi_dcmpeq>
  407832:	2800      	cmp	r0, #0
  407834:	f040 8088 	bne.w	407948 <_dtoa_r+0x388>
  407838:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40783c:	f04f 0a00 	mov.w	sl, #0
  407840:	f8df b040 	ldr.w	fp, [pc, #64]	; 407884 <_dtoa_r+0x2c4>
  407844:	940c      	str	r4, [sp, #48]	; 0x30
  407846:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40784a:	e028      	b.n	40789e <_dtoa_r+0x2de>
  40784c:	f3af 8000 	nop.w
  407850:	636f4361 	.word	0x636f4361
  407854:	3fd287a7 	.word	0x3fd287a7
  407858:	8b60c8b3 	.word	0x8b60c8b3
  40785c:	3fc68a28 	.word	0x3fc68a28
  407860:	509f79fb 	.word	0x509f79fb
  407864:	3fd34413 	.word	0x3fd34413
  407868:	7ff00000 	.word	0x7ff00000
  40786c:	0040aa5d 	.word	0x0040aa5d
  407870:	0040aa80 	.word	0x0040aa80
  407874:	0040aa8c 	.word	0x0040aa8c
  407878:	3ff80000 	.word	0x3ff80000
  40787c:	0040aac8 	.word	0x0040aac8
  407880:	0040aa5c 	.word	0x0040aa5c
  407884:	40240000 	.word	0x40240000
  407888:	f7fc fe9a 	bl	4045c0 <__aeabi_dmul>
  40788c:	2200      	movs	r2, #0
  40788e:	2300      	movs	r3, #0
  407890:	4606      	mov	r6, r0
  407892:	460f      	mov	r7, r1
  407894:	f7fd f8fc 	bl	404a90 <__aeabi_dcmpeq>
  407898:	2800      	cmp	r0, #0
  40789a:	f040 83c1 	bne.w	408020 <_dtoa_r+0xa60>
  40789e:	4642      	mov	r2, r8
  4078a0:	464b      	mov	r3, r9
  4078a2:	4630      	mov	r0, r6
  4078a4:	4639      	mov	r1, r7
  4078a6:	f7fc ffb5 	bl	404814 <__aeabi_ddiv>
  4078aa:	f002 fde1 	bl	40a470 <__aeabi_d2iz>
  4078ae:	4604      	mov	r4, r0
  4078b0:	f7fc fe20 	bl	4044f4 <__aeabi_i2d>
  4078b4:	4642      	mov	r2, r8
  4078b6:	464b      	mov	r3, r9
  4078b8:	f7fc fe82 	bl	4045c0 <__aeabi_dmul>
  4078bc:	4602      	mov	r2, r0
  4078be:	460b      	mov	r3, r1
  4078c0:	4630      	mov	r0, r6
  4078c2:	4639      	mov	r1, r7
  4078c4:	f7fc fcc8 	bl	404258 <__aeabi_dsub>
  4078c8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4078cc:	9e04      	ldr	r6, [sp, #16]
  4078ce:	f805 eb01 	strb.w	lr, [r5], #1
  4078d2:	eba5 0e06 	sub.w	lr, r5, r6
  4078d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4078d8:	45b6      	cmp	lr, r6
  4078da:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4078de:	4652      	mov	r2, sl
  4078e0:	465b      	mov	r3, fp
  4078e2:	d1d1      	bne.n	407888 <_dtoa_r+0x2c8>
  4078e4:	46a0      	mov	r8, r4
  4078e6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4078ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4078ec:	4606      	mov	r6, r0
  4078ee:	460f      	mov	r7, r1
  4078f0:	4632      	mov	r2, r6
  4078f2:	463b      	mov	r3, r7
  4078f4:	4630      	mov	r0, r6
  4078f6:	4639      	mov	r1, r7
  4078f8:	f7fc fcb0 	bl	40425c <__adddf3>
  4078fc:	4606      	mov	r6, r0
  4078fe:	460f      	mov	r7, r1
  407900:	4602      	mov	r2, r0
  407902:	460b      	mov	r3, r1
  407904:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407908:	f7fd f8cc 	bl	404aa4 <__aeabi_dcmplt>
  40790c:	b948      	cbnz	r0, 407922 <_dtoa_r+0x362>
  40790e:	4632      	mov	r2, r6
  407910:	463b      	mov	r3, r7
  407912:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407916:	f7fd f8bb 	bl	404a90 <__aeabi_dcmpeq>
  40791a:	b1a8      	cbz	r0, 407948 <_dtoa_r+0x388>
  40791c:	f018 0f01 	tst.w	r8, #1
  407920:	d012      	beq.n	407948 <_dtoa_r+0x388>
  407922:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407926:	9a04      	ldr	r2, [sp, #16]
  407928:	1e6b      	subs	r3, r5, #1
  40792a:	e004      	b.n	407936 <_dtoa_r+0x376>
  40792c:	429a      	cmp	r2, r3
  40792e:	f000 8401 	beq.w	408134 <_dtoa_r+0xb74>
  407932:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407936:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40793a:	f103 0501 	add.w	r5, r3, #1
  40793e:	d0f5      	beq.n	40792c <_dtoa_r+0x36c>
  407940:	f108 0801 	add.w	r8, r8, #1
  407944:	f883 8000 	strb.w	r8, [r3]
  407948:	4649      	mov	r1, r9
  40794a:	4620      	mov	r0, r4
  40794c:	f001 fe5e 	bl	40960c <_Bfree>
  407950:	2200      	movs	r2, #0
  407952:	9b02      	ldr	r3, [sp, #8]
  407954:	702a      	strb	r2, [r5, #0]
  407956:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407958:	3301      	adds	r3, #1
  40795a:	6013      	str	r3, [r2, #0]
  40795c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40795e:	2b00      	cmp	r3, #0
  407960:	f000 839e 	beq.w	4080a0 <_dtoa_r+0xae0>
  407964:	9804      	ldr	r0, [sp, #16]
  407966:	601d      	str	r5, [r3, #0]
  407968:	b01b      	add	sp, #108	; 0x6c
  40796a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40796e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407970:	2a00      	cmp	r2, #0
  407972:	d03e      	beq.n	4079f2 <_dtoa_r+0x432>
  407974:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407976:	2a01      	cmp	r2, #1
  407978:	f340 8311 	ble.w	407f9e <_dtoa_r+0x9de>
  40797c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40797e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407980:	1e5f      	subs	r7, r3, #1
  407982:	42ba      	cmp	r2, r7
  407984:	f2c0 838f 	blt.w	4080a6 <_dtoa_r+0xae6>
  407988:	1bd7      	subs	r7, r2, r7
  40798a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40798c:	2b00      	cmp	r3, #0
  40798e:	f2c0 848b 	blt.w	4082a8 <_dtoa_r+0xce8>
  407992:	9d08      	ldr	r5, [sp, #32]
  407994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407996:	9a08      	ldr	r2, [sp, #32]
  407998:	441a      	add	r2, r3
  40799a:	9208      	str	r2, [sp, #32]
  40799c:	9a06      	ldr	r2, [sp, #24]
  40799e:	2101      	movs	r1, #1
  4079a0:	441a      	add	r2, r3
  4079a2:	4620      	mov	r0, r4
  4079a4:	9206      	str	r2, [sp, #24]
  4079a6:	f001 fecb 	bl	409740 <__i2b>
  4079aa:	4606      	mov	r6, r0
  4079ac:	e024      	b.n	4079f8 <_dtoa_r+0x438>
  4079ae:	2301      	movs	r3, #1
  4079b0:	930e      	str	r3, [sp, #56]	; 0x38
  4079b2:	e6af      	b.n	407714 <_dtoa_r+0x154>
  4079b4:	9a08      	ldr	r2, [sp, #32]
  4079b6:	9b02      	ldr	r3, [sp, #8]
  4079b8:	1ad2      	subs	r2, r2, r3
  4079ba:	425b      	negs	r3, r3
  4079bc:	930c      	str	r3, [sp, #48]	; 0x30
  4079be:	2300      	movs	r3, #0
  4079c0:	9208      	str	r2, [sp, #32]
  4079c2:	930d      	str	r3, [sp, #52]	; 0x34
  4079c4:	e6b8      	b.n	407738 <_dtoa_r+0x178>
  4079c6:	f1c7 0301 	rsb	r3, r7, #1
  4079ca:	9308      	str	r3, [sp, #32]
  4079cc:	2300      	movs	r3, #0
  4079ce:	9306      	str	r3, [sp, #24]
  4079d0:	e6a7      	b.n	407722 <_dtoa_r+0x162>
  4079d2:	9d02      	ldr	r5, [sp, #8]
  4079d4:	4628      	mov	r0, r5
  4079d6:	f7fc fd8d 	bl	4044f4 <__aeabi_i2d>
  4079da:	4602      	mov	r2, r0
  4079dc:	460b      	mov	r3, r1
  4079de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4079e2:	f7fd f855 	bl	404a90 <__aeabi_dcmpeq>
  4079e6:	2800      	cmp	r0, #0
  4079e8:	f47f ae80 	bne.w	4076ec <_dtoa_r+0x12c>
  4079ec:	1e6b      	subs	r3, r5, #1
  4079ee:	9302      	str	r3, [sp, #8]
  4079f0:	e67c      	b.n	4076ec <_dtoa_r+0x12c>
  4079f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4079f4:	9d08      	ldr	r5, [sp, #32]
  4079f6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4079f8:	2d00      	cmp	r5, #0
  4079fa:	dd0c      	ble.n	407a16 <_dtoa_r+0x456>
  4079fc:	9906      	ldr	r1, [sp, #24]
  4079fe:	2900      	cmp	r1, #0
  407a00:	460b      	mov	r3, r1
  407a02:	dd08      	ble.n	407a16 <_dtoa_r+0x456>
  407a04:	42a9      	cmp	r1, r5
  407a06:	9a08      	ldr	r2, [sp, #32]
  407a08:	bfa8      	it	ge
  407a0a:	462b      	movge	r3, r5
  407a0c:	1ad2      	subs	r2, r2, r3
  407a0e:	1aed      	subs	r5, r5, r3
  407a10:	1acb      	subs	r3, r1, r3
  407a12:	9208      	str	r2, [sp, #32]
  407a14:	9306      	str	r3, [sp, #24]
  407a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407a18:	b1d3      	cbz	r3, 407a50 <_dtoa_r+0x490>
  407a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407a1c:	2b00      	cmp	r3, #0
  407a1e:	f000 82b7 	beq.w	407f90 <_dtoa_r+0x9d0>
  407a22:	2f00      	cmp	r7, #0
  407a24:	dd10      	ble.n	407a48 <_dtoa_r+0x488>
  407a26:	4631      	mov	r1, r6
  407a28:	463a      	mov	r2, r7
  407a2a:	4620      	mov	r0, r4
  407a2c:	f001 ff24 	bl	409878 <__pow5mult>
  407a30:	464a      	mov	r2, r9
  407a32:	4601      	mov	r1, r0
  407a34:	4606      	mov	r6, r0
  407a36:	4620      	mov	r0, r4
  407a38:	f001 fe8c 	bl	409754 <__multiply>
  407a3c:	4649      	mov	r1, r9
  407a3e:	4680      	mov	r8, r0
  407a40:	4620      	mov	r0, r4
  407a42:	f001 fde3 	bl	40960c <_Bfree>
  407a46:	46c1      	mov	r9, r8
  407a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407a4a:	1bda      	subs	r2, r3, r7
  407a4c:	f040 82a1 	bne.w	407f92 <_dtoa_r+0x9d2>
  407a50:	2101      	movs	r1, #1
  407a52:	4620      	mov	r0, r4
  407a54:	f001 fe74 	bl	409740 <__i2b>
  407a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407a5a:	2b00      	cmp	r3, #0
  407a5c:	4680      	mov	r8, r0
  407a5e:	dd1c      	ble.n	407a9a <_dtoa_r+0x4da>
  407a60:	4601      	mov	r1, r0
  407a62:	461a      	mov	r2, r3
  407a64:	4620      	mov	r0, r4
  407a66:	f001 ff07 	bl	409878 <__pow5mult>
  407a6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407a6c:	2b01      	cmp	r3, #1
  407a6e:	4680      	mov	r8, r0
  407a70:	f340 8254 	ble.w	407f1c <_dtoa_r+0x95c>
  407a74:	2300      	movs	r3, #0
  407a76:	930c      	str	r3, [sp, #48]	; 0x30
  407a78:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407a7c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  407a80:	6918      	ldr	r0, [r3, #16]
  407a82:	f001 fe0d 	bl	4096a0 <__hi0bits>
  407a86:	f1c0 0020 	rsb	r0, r0, #32
  407a8a:	e010      	b.n	407aae <_dtoa_r+0x4ee>
  407a8c:	f1c3 0520 	rsb	r5, r3, #32
  407a90:	fa0a f005 	lsl.w	r0, sl, r5
  407a94:	e674      	b.n	407780 <_dtoa_r+0x1c0>
  407a96:	900e      	str	r0, [sp, #56]	; 0x38
  407a98:	e63c      	b.n	407714 <_dtoa_r+0x154>
  407a9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407a9c:	2b01      	cmp	r3, #1
  407a9e:	f340 8287 	ble.w	407fb0 <_dtoa_r+0x9f0>
  407aa2:	2300      	movs	r3, #0
  407aa4:	930c      	str	r3, [sp, #48]	; 0x30
  407aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407aa8:	2001      	movs	r0, #1
  407aaa:	2b00      	cmp	r3, #0
  407aac:	d1e4      	bne.n	407a78 <_dtoa_r+0x4b8>
  407aae:	9a06      	ldr	r2, [sp, #24]
  407ab0:	4410      	add	r0, r2
  407ab2:	f010 001f 	ands.w	r0, r0, #31
  407ab6:	f000 80a1 	beq.w	407bfc <_dtoa_r+0x63c>
  407aba:	f1c0 0320 	rsb	r3, r0, #32
  407abe:	2b04      	cmp	r3, #4
  407ac0:	f340 849e 	ble.w	408400 <_dtoa_r+0xe40>
  407ac4:	9b08      	ldr	r3, [sp, #32]
  407ac6:	f1c0 001c 	rsb	r0, r0, #28
  407aca:	4403      	add	r3, r0
  407acc:	9308      	str	r3, [sp, #32]
  407ace:	4613      	mov	r3, r2
  407ad0:	4403      	add	r3, r0
  407ad2:	4405      	add	r5, r0
  407ad4:	9306      	str	r3, [sp, #24]
  407ad6:	9b08      	ldr	r3, [sp, #32]
  407ad8:	2b00      	cmp	r3, #0
  407ada:	dd05      	ble.n	407ae8 <_dtoa_r+0x528>
  407adc:	4649      	mov	r1, r9
  407ade:	461a      	mov	r2, r3
  407ae0:	4620      	mov	r0, r4
  407ae2:	f001 ff19 	bl	409918 <__lshift>
  407ae6:	4681      	mov	r9, r0
  407ae8:	9b06      	ldr	r3, [sp, #24]
  407aea:	2b00      	cmp	r3, #0
  407aec:	dd05      	ble.n	407afa <_dtoa_r+0x53a>
  407aee:	4641      	mov	r1, r8
  407af0:	461a      	mov	r2, r3
  407af2:	4620      	mov	r0, r4
  407af4:	f001 ff10 	bl	409918 <__lshift>
  407af8:	4680      	mov	r8, r0
  407afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407afc:	2b00      	cmp	r3, #0
  407afe:	f040 8086 	bne.w	407c0e <_dtoa_r+0x64e>
  407b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b04:	2b00      	cmp	r3, #0
  407b06:	f340 8266 	ble.w	407fd6 <_dtoa_r+0xa16>
  407b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407b0c:	2b00      	cmp	r3, #0
  407b0e:	f000 8098 	beq.w	407c42 <_dtoa_r+0x682>
  407b12:	2d00      	cmp	r5, #0
  407b14:	dd05      	ble.n	407b22 <_dtoa_r+0x562>
  407b16:	4631      	mov	r1, r6
  407b18:	462a      	mov	r2, r5
  407b1a:	4620      	mov	r0, r4
  407b1c:	f001 fefc 	bl	409918 <__lshift>
  407b20:	4606      	mov	r6, r0
  407b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407b24:	2b00      	cmp	r3, #0
  407b26:	f040 8337 	bne.w	408198 <_dtoa_r+0xbd8>
  407b2a:	9606      	str	r6, [sp, #24]
  407b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b2e:	9a04      	ldr	r2, [sp, #16]
  407b30:	f8dd b018 	ldr.w	fp, [sp, #24]
  407b34:	3b01      	subs	r3, #1
  407b36:	18d3      	adds	r3, r2, r3
  407b38:	930b      	str	r3, [sp, #44]	; 0x2c
  407b3a:	f00a 0301 	and.w	r3, sl, #1
  407b3e:	930c      	str	r3, [sp, #48]	; 0x30
  407b40:	4617      	mov	r7, r2
  407b42:	46c2      	mov	sl, r8
  407b44:	4651      	mov	r1, sl
  407b46:	4648      	mov	r0, r9
  407b48:	f7ff fca6 	bl	407498 <quorem>
  407b4c:	4631      	mov	r1, r6
  407b4e:	4605      	mov	r5, r0
  407b50:	4648      	mov	r0, r9
  407b52:	f001 ff33 	bl	4099bc <__mcmp>
  407b56:	465a      	mov	r2, fp
  407b58:	900a      	str	r0, [sp, #40]	; 0x28
  407b5a:	4651      	mov	r1, sl
  407b5c:	4620      	mov	r0, r4
  407b5e:	f001 ff49 	bl	4099f4 <__mdiff>
  407b62:	68c2      	ldr	r2, [r0, #12]
  407b64:	4680      	mov	r8, r0
  407b66:	f105 0330 	add.w	r3, r5, #48	; 0x30
  407b6a:	2a00      	cmp	r2, #0
  407b6c:	f040 822b 	bne.w	407fc6 <_dtoa_r+0xa06>
  407b70:	4601      	mov	r1, r0
  407b72:	4648      	mov	r0, r9
  407b74:	9308      	str	r3, [sp, #32]
  407b76:	f001 ff21 	bl	4099bc <__mcmp>
  407b7a:	4641      	mov	r1, r8
  407b7c:	9006      	str	r0, [sp, #24]
  407b7e:	4620      	mov	r0, r4
  407b80:	f001 fd44 	bl	40960c <_Bfree>
  407b84:	9a06      	ldr	r2, [sp, #24]
  407b86:	9b08      	ldr	r3, [sp, #32]
  407b88:	b932      	cbnz	r2, 407b98 <_dtoa_r+0x5d8>
  407b8a:	9924      	ldr	r1, [sp, #144]	; 0x90
  407b8c:	b921      	cbnz	r1, 407b98 <_dtoa_r+0x5d8>
  407b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407b90:	2a00      	cmp	r2, #0
  407b92:	f000 83ef 	beq.w	408374 <_dtoa_r+0xdb4>
  407b96:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407b98:	990a      	ldr	r1, [sp, #40]	; 0x28
  407b9a:	2900      	cmp	r1, #0
  407b9c:	f2c0 829f 	blt.w	4080de <_dtoa_r+0xb1e>
  407ba0:	d105      	bne.n	407bae <_dtoa_r+0x5ee>
  407ba2:	9924      	ldr	r1, [sp, #144]	; 0x90
  407ba4:	b919      	cbnz	r1, 407bae <_dtoa_r+0x5ee>
  407ba6:	990c      	ldr	r1, [sp, #48]	; 0x30
  407ba8:	2900      	cmp	r1, #0
  407baa:	f000 8298 	beq.w	4080de <_dtoa_r+0xb1e>
  407bae:	2a00      	cmp	r2, #0
  407bb0:	f300 8306 	bgt.w	4081c0 <_dtoa_r+0xc00>
  407bb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407bb6:	703b      	strb	r3, [r7, #0]
  407bb8:	f107 0801 	add.w	r8, r7, #1
  407bbc:	4297      	cmp	r7, r2
  407bbe:	4645      	mov	r5, r8
  407bc0:	f000 830c 	beq.w	4081dc <_dtoa_r+0xc1c>
  407bc4:	4649      	mov	r1, r9
  407bc6:	2300      	movs	r3, #0
  407bc8:	220a      	movs	r2, #10
  407bca:	4620      	mov	r0, r4
  407bcc:	f001 fd28 	bl	409620 <__multadd>
  407bd0:	455e      	cmp	r6, fp
  407bd2:	4681      	mov	r9, r0
  407bd4:	4631      	mov	r1, r6
  407bd6:	f04f 0300 	mov.w	r3, #0
  407bda:	f04f 020a 	mov.w	r2, #10
  407bde:	4620      	mov	r0, r4
  407be0:	f000 81eb 	beq.w	407fba <_dtoa_r+0x9fa>
  407be4:	f001 fd1c 	bl	409620 <__multadd>
  407be8:	4659      	mov	r1, fp
  407bea:	4606      	mov	r6, r0
  407bec:	2300      	movs	r3, #0
  407bee:	220a      	movs	r2, #10
  407bf0:	4620      	mov	r0, r4
  407bf2:	f001 fd15 	bl	409620 <__multadd>
  407bf6:	4647      	mov	r7, r8
  407bf8:	4683      	mov	fp, r0
  407bfa:	e7a3      	b.n	407b44 <_dtoa_r+0x584>
  407bfc:	201c      	movs	r0, #28
  407bfe:	9b08      	ldr	r3, [sp, #32]
  407c00:	4403      	add	r3, r0
  407c02:	9308      	str	r3, [sp, #32]
  407c04:	9b06      	ldr	r3, [sp, #24]
  407c06:	4403      	add	r3, r0
  407c08:	4405      	add	r5, r0
  407c0a:	9306      	str	r3, [sp, #24]
  407c0c:	e763      	b.n	407ad6 <_dtoa_r+0x516>
  407c0e:	4641      	mov	r1, r8
  407c10:	4648      	mov	r0, r9
  407c12:	f001 fed3 	bl	4099bc <__mcmp>
  407c16:	2800      	cmp	r0, #0
  407c18:	f6bf af73 	bge.w	407b02 <_dtoa_r+0x542>
  407c1c:	9f02      	ldr	r7, [sp, #8]
  407c1e:	4649      	mov	r1, r9
  407c20:	2300      	movs	r3, #0
  407c22:	220a      	movs	r2, #10
  407c24:	4620      	mov	r0, r4
  407c26:	3f01      	subs	r7, #1
  407c28:	9702      	str	r7, [sp, #8]
  407c2a:	f001 fcf9 	bl	409620 <__multadd>
  407c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407c30:	4681      	mov	r9, r0
  407c32:	2b00      	cmp	r3, #0
  407c34:	f040 83b6 	bne.w	4083a4 <_dtoa_r+0xde4>
  407c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407c3a:	2b00      	cmp	r3, #0
  407c3c:	f340 83bf 	ble.w	4083be <_dtoa_r+0xdfe>
  407c40:	930a      	str	r3, [sp, #40]	; 0x28
  407c42:	f8dd b010 	ldr.w	fp, [sp, #16]
  407c46:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407c48:	465d      	mov	r5, fp
  407c4a:	e002      	b.n	407c52 <_dtoa_r+0x692>
  407c4c:	f001 fce8 	bl	409620 <__multadd>
  407c50:	4681      	mov	r9, r0
  407c52:	4641      	mov	r1, r8
  407c54:	4648      	mov	r0, r9
  407c56:	f7ff fc1f 	bl	407498 <quorem>
  407c5a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  407c5e:	f805 ab01 	strb.w	sl, [r5], #1
  407c62:	eba5 030b 	sub.w	r3, r5, fp
  407c66:	42bb      	cmp	r3, r7
  407c68:	f04f 020a 	mov.w	r2, #10
  407c6c:	f04f 0300 	mov.w	r3, #0
  407c70:	4649      	mov	r1, r9
  407c72:	4620      	mov	r0, r4
  407c74:	dbea      	blt.n	407c4c <_dtoa_r+0x68c>
  407c76:	9b04      	ldr	r3, [sp, #16]
  407c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407c7a:	2a01      	cmp	r2, #1
  407c7c:	bfac      	ite	ge
  407c7e:	189b      	addge	r3, r3, r2
  407c80:	3301      	addlt	r3, #1
  407c82:	461d      	mov	r5, r3
  407c84:	f04f 0b00 	mov.w	fp, #0
  407c88:	4649      	mov	r1, r9
  407c8a:	2201      	movs	r2, #1
  407c8c:	4620      	mov	r0, r4
  407c8e:	f001 fe43 	bl	409918 <__lshift>
  407c92:	4641      	mov	r1, r8
  407c94:	4681      	mov	r9, r0
  407c96:	f001 fe91 	bl	4099bc <__mcmp>
  407c9a:	2800      	cmp	r0, #0
  407c9c:	f340 823d 	ble.w	40811a <_dtoa_r+0xb5a>
  407ca0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  407ca4:	9904      	ldr	r1, [sp, #16]
  407ca6:	1e6b      	subs	r3, r5, #1
  407ca8:	e004      	b.n	407cb4 <_dtoa_r+0x6f4>
  407caa:	428b      	cmp	r3, r1
  407cac:	f000 81ae 	beq.w	40800c <_dtoa_r+0xa4c>
  407cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  407cb4:	2a39      	cmp	r2, #57	; 0x39
  407cb6:	f103 0501 	add.w	r5, r3, #1
  407cba:	d0f6      	beq.n	407caa <_dtoa_r+0x6ea>
  407cbc:	3201      	adds	r2, #1
  407cbe:	701a      	strb	r2, [r3, #0]
  407cc0:	4641      	mov	r1, r8
  407cc2:	4620      	mov	r0, r4
  407cc4:	f001 fca2 	bl	40960c <_Bfree>
  407cc8:	2e00      	cmp	r6, #0
  407cca:	f43f ae3d 	beq.w	407948 <_dtoa_r+0x388>
  407cce:	f1bb 0f00 	cmp.w	fp, #0
  407cd2:	d005      	beq.n	407ce0 <_dtoa_r+0x720>
  407cd4:	45b3      	cmp	fp, r6
  407cd6:	d003      	beq.n	407ce0 <_dtoa_r+0x720>
  407cd8:	4659      	mov	r1, fp
  407cda:	4620      	mov	r0, r4
  407cdc:	f001 fc96 	bl	40960c <_Bfree>
  407ce0:	4631      	mov	r1, r6
  407ce2:	4620      	mov	r0, r4
  407ce4:	f001 fc92 	bl	40960c <_Bfree>
  407ce8:	e62e      	b.n	407948 <_dtoa_r+0x388>
  407cea:	2300      	movs	r3, #0
  407cec:	930b      	str	r3, [sp, #44]	; 0x2c
  407cee:	9b02      	ldr	r3, [sp, #8]
  407cf0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407cf2:	4413      	add	r3, r2
  407cf4:	930f      	str	r3, [sp, #60]	; 0x3c
  407cf6:	3301      	adds	r3, #1
  407cf8:	2b01      	cmp	r3, #1
  407cfa:	461f      	mov	r7, r3
  407cfc:	461e      	mov	r6, r3
  407cfe:	930a      	str	r3, [sp, #40]	; 0x28
  407d00:	bfb8      	it	lt
  407d02:	2701      	movlt	r7, #1
  407d04:	2100      	movs	r1, #0
  407d06:	2f17      	cmp	r7, #23
  407d08:	6461      	str	r1, [r4, #68]	; 0x44
  407d0a:	d90a      	bls.n	407d22 <_dtoa_r+0x762>
  407d0c:	2201      	movs	r2, #1
  407d0e:	2304      	movs	r3, #4
  407d10:	005b      	lsls	r3, r3, #1
  407d12:	f103 0014 	add.w	r0, r3, #20
  407d16:	4287      	cmp	r7, r0
  407d18:	4611      	mov	r1, r2
  407d1a:	f102 0201 	add.w	r2, r2, #1
  407d1e:	d2f7      	bcs.n	407d10 <_dtoa_r+0x750>
  407d20:	6461      	str	r1, [r4, #68]	; 0x44
  407d22:	4620      	mov	r0, r4
  407d24:	f001 fc4c 	bl	4095c0 <_Balloc>
  407d28:	2e0e      	cmp	r6, #14
  407d2a:	9004      	str	r0, [sp, #16]
  407d2c:	6420      	str	r0, [r4, #64]	; 0x40
  407d2e:	f63f ad41 	bhi.w	4077b4 <_dtoa_r+0x1f4>
  407d32:	2d00      	cmp	r5, #0
  407d34:	f43f ad3e 	beq.w	4077b4 <_dtoa_r+0x1f4>
  407d38:	9902      	ldr	r1, [sp, #8]
  407d3a:	2900      	cmp	r1, #0
  407d3c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  407d40:	f340 8202 	ble.w	408148 <_dtoa_r+0xb88>
  407d44:	4bb8      	ldr	r3, [pc, #736]	; (408028 <_dtoa_r+0xa68>)
  407d46:	f001 020f 	and.w	r2, r1, #15
  407d4a:	110d      	asrs	r5, r1, #4
  407d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407d50:	06e9      	lsls	r1, r5, #27
  407d52:	e9d3 6700 	ldrd	r6, r7, [r3]
  407d56:	f140 81ae 	bpl.w	4080b6 <_dtoa_r+0xaf6>
  407d5a:	4bb4      	ldr	r3, [pc, #720]	; (40802c <_dtoa_r+0xa6c>)
  407d5c:	4650      	mov	r0, sl
  407d5e:	4659      	mov	r1, fp
  407d60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  407d64:	f7fc fd56 	bl	404814 <__aeabi_ddiv>
  407d68:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  407d6c:	f005 050f 	and.w	r5, r5, #15
  407d70:	f04f 0a03 	mov.w	sl, #3
  407d74:	b18d      	cbz	r5, 407d9a <_dtoa_r+0x7da>
  407d76:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40802c <_dtoa_r+0xa6c>
  407d7a:	07ea      	lsls	r2, r5, #31
  407d7c:	d509      	bpl.n	407d92 <_dtoa_r+0x7d2>
  407d7e:	4630      	mov	r0, r6
  407d80:	4639      	mov	r1, r7
  407d82:	e9d8 2300 	ldrd	r2, r3, [r8]
  407d86:	f7fc fc1b 	bl	4045c0 <__aeabi_dmul>
  407d8a:	f10a 0a01 	add.w	sl, sl, #1
  407d8e:	4606      	mov	r6, r0
  407d90:	460f      	mov	r7, r1
  407d92:	106d      	asrs	r5, r5, #1
  407d94:	f108 0808 	add.w	r8, r8, #8
  407d98:	d1ef      	bne.n	407d7a <_dtoa_r+0x7ba>
  407d9a:	463b      	mov	r3, r7
  407d9c:	4632      	mov	r2, r6
  407d9e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407da2:	f7fc fd37 	bl	404814 <__aeabi_ddiv>
  407da6:	4607      	mov	r7, r0
  407da8:	4688      	mov	r8, r1
  407daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407dac:	b143      	cbz	r3, 407dc0 <_dtoa_r+0x800>
  407dae:	2200      	movs	r2, #0
  407db0:	4b9f      	ldr	r3, [pc, #636]	; (408030 <_dtoa_r+0xa70>)
  407db2:	4638      	mov	r0, r7
  407db4:	4641      	mov	r1, r8
  407db6:	f7fc fe75 	bl	404aa4 <__aeabi_dcmplt>
  407dba:	2800      	cmp	r0, #0
  407dbc:	f040 8286 	bne.w	4082cc <_dtoa_r+0xd0c>
  407dc0:	4650      	mov	r0, sl
  407dc2:	f7fc fb97 	bl	4044f4 <__aeabi_i2d>
  407dc6:	463a      	mov	r2, r7
  407dc8:	4643      	mov	r3, r8
  407dca:	f7fc fbf9 	bl	4045c0 <__aeabi_dmul>
  407dce:	4b99      	ldr	r3, [pc, #612]	; (408034 <_dtoa_r+0xa74>)
  407dd0:	2200      	movs	r2, #0
  407dd2:	f7fc fa43 	bl	40425c <__adddf3>
  407dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407dd8:	4605      	mov	r5, r0
  407dda:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407dde:	2b00      	cmp	r3, #0
  407de0:	f000 813e 	beq.w	408060 <_dtoa_r+0xaa0>
  407de4:	9b02      	ldr	r3, [sp, #8]
  407de6:	9315      	str	r3, [sp, #84]	; 0x54
  407de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407dea:	9312      	str	r3, [sp, #72]	; 0x48
  407dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407dee:	2b00      	cmp	r3, #0
  407df0:	f000 81fa 	beq.w	4081e8 <_dtoa_r+0xc28>
  407df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407df6:	4b8c      	ldr	r3, [pc, #560]	; (408028 <_dtoa_r+0xa68>)
  407df8:	498f      	ldr	r1, [pc, #572]	; (408038 <_dtoa_r+0xa78>)
  407dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407dfe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  407e02:	2000      	movs	r0, #0
  407e04:	f7fc fd06 	bl	404814 <__aeabi_ddiv>
  407e08:	462a      	mov	r2, r5
  407e0a:	4633      	mov	r3, r6
  407e0c:	f7fc fa24 	bl	404258 <__aeabi_dsub>
  407e10:	4682      	mov	sl, r0
  407e12:	468b      	mov	fp, r1
  407e14:	4638      	mov	r0, r7
  407e16:	4641      	mov	r1, r8
  407e18:	f002 fb2a 	bl	40a470 <__aeabi_d2iz>
  407e1c:	4605      	mov	r5, r0
  407e1e:	f7fc fb69 	bl	4044f4 <__aeabi_i2d>
  407e22:	4602      	mov	r2, r0
  407e24:	460b      	mov	r3, r1
  407e26:	4638      	mov	r0, r7
  407e28:	4641      	mov	r1, r8
  407e2a:	f7fc fa15 	bl	404258 <__aeabi_dsub>
  407e2e:	3530      	adds	r5, #48	; 0x30
  407e30:	fa5f f885 	uxtb.w	r8, r5
  407e34:	9d04      	ldr	r5, [sp, #16]
  407e36:	4606      	mov	r6, r0
  407e38:	460f      	mov	r7, r1
  407e3a:	f885 8000 	strb.w	r8, [r5]
  407e3e:	4602      	mov	r2, r0
  407e40:	460b      	mov	r3, r1
  407e42:	4650      	mov	r0, sl
  407e44:	4659      	mov	r1, fp
  407e46:	3501      	adds	r5, #1
  407e48:	f7fc fe4a 	bl	404ae0 <__aeabi_dcmpgt>
  407e4c:	2800      	cmp	r0, #0
  407e4e:	d154      	bne.n	407efa <_dtoa_r+0x93a>
  407e50:	4632      	mov	r2, r6
  407e52:	463b      	mov	r3, r7
  407e54:	2000      	movs	r0, #0
  407e56:	4976      	ldr	r1, [pc, #472]	; (408030 <_dtoa_r+0xa70>)
  407e58:	f7fc f9fe 	bl	404258 <__aeabi_dsub>
  407e5c:	4602      	mov	r2, r0
  407e5e:	460b      	mov	r3, r1
  407e60:	4650      	mov	r0, sl
  407e62:	4659      	mov	r1, fp
  407e64:	f7fc fe3c 	bl	404ae0 <__aeabi_dcmpgt>
  407e68:	2800      	cmp	r0, #0
  407e6a:	f040 8270 	bne.w	40834e <_dtoa_r+0xd8e>
  407e6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407e70:	2a01      	cmp	r2, #1
  407e72:	f000 8111 	beq.w	408098 <_dtoa_r+0xad8>
  407e76:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407e78:	9a04      	ldr	r2, [sp, #16]
  407e7a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  407e7e:	4413      	add	r3, r2
  407e80:	4699      	mov	r9, r3
  407e82:	e00d      	b.n	407ea0 <_dtoa_r+0x8e0>
  407e84:	2000      	movs	r0, #0
  407e86:	496a      	ldr	r1, [pc, #424]	; (408030 <_dtoa_r+0xa70>)
  407e88:	f7fc f9e6 	bl	404258 <__aeabi_dsub>
  407e8c:	4652      	mov	r2, sl
  407e8e:	465b      	mov	r3, fp
  407e90:	f7fc fe08 	bl	404aa4 <__aeabi_dcmplt>
  407e94:	2800      	cmp	r0, #0
  407e96:	f040 8258 	bne.w	40834a <_dtoa_r+0xd8a>
  407e9a:	454d      	cmp	r5, r9
  407e9c:	f000 80fa 	beq.w	408094 <_dtoa_r+0xad4>
  407ea0:	4650      	mov	r0, sl
  407ea2:	4659      	mov	r1, fp
  407ea4:	2200      	movs	r2, #0
  407ea6:	4b65      	ldr	r3, [pc, #404]	; (40803c <_dtoa_r+0xa7c>)
  407ea8:	f7fc fb8a 	bl	4045c0 <__aeabi_dmul>
  407eac:	2200      	movs	r2, #0
  407eae:	4b63      	ldr	r3, [pc, #396]	; (40803c <_dtoa_r+0xa7c>)
  407eb0:	4682      	mov	sl, r0
  407eb2:	468b      	mov	fp, r1
  407eb4:	4630      	mov	r0, r6
  407eb6:	4639      	mov	r1, r7
  407eb8:	f7fc fb82 	bl	4045c0 <__aeabi_dmul>
  407ebc:	460f      	mov	r7, r1
  407ebe:	4606      	mov	r6, r0
  407ec0:	f002 fad6 	bl	40a470 <__aeabi_d2iz>
  407ec4:	4680      	mov	r8, r0
  407ec6:	f7fc fb15 	bl	4044f4 <__aeabi_i2d>
  407eca:	4602      	mov	r2, r0
  407ecc:	460b      	mov	r3, r1
  407ece:	4630      	mov	r0, r6
  407ed0:	4639      	mov	r1, r7
  407ed2:	f7fc f9c1 	bl	404258 <__aeabi_dsub>
  407ed6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407eda:	fa5f f888 	uxtb.w	r8, r8
  407ede:	4652      	mov	r2, sl
  407ee0:	465b      	mov	r3, fp
  407ee2:	f805 8b01 	strb.w	r8, [r5], #1
  407ee6:	4606      	mov	r6, r0
  407ee8:	460f      	mov	r7, r1
  407eea:	f7fc fddb 	bl	404aa4 <__aeabi_dcmplt>
  407eee:	4632      	mov	r2, r6
  407ef0:	463b      	mov	r3, r7
  407ef2:	2800      	cmp	r0, #0
  407ef4:	d0c6      	beq.n	407e84 <_dtoa_r+0x8c4>
  407ef6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407efa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407efc:	9302      	str	r3, [sp, #8]
  407efe:	e523      	b.n	407948 <_dtoa_r+0x388>
  407f00:	2300      	movs	r3, #0
  407f02:	930b      	str	r3, [sp, #44]	; 0x2c
  407f04:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407f06:	2b00      	cmp	r3, #0
  407f08:	f340 80dc 	ble.w	4080c4 <_dtoa_r+0xb04>
  407f0c:	461f      	mov	r7, r3
  407f0e:	461e      	mov	r6, r3
  407f10:	930f      	str	r3, [sp, #60]	; 0x3c
  407f12:	930a      	str	r3, [sp, #40]	; 0x28
  407f14:	e6f6      	b.n	407d04 <_dtoa_r+0x744>
  407f16:	2301      	movs	r3, #1
  407f18:	930b      	str	r3, [sp, #44]	; 0x2c
  407f1a:	e7f3      	b.n	407f04 <_dtoa_r+0x944>
  407f1c:	f1ba 0f00 	cmp.w	sl, #0
  407f20:	f47f ada8 	bne.w	407a74 <_dtoa_r+0x4b4>
  407f24:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407f28:	2b00      	cmp	r3, #0
  407f2a:	f47f adba 	bne.w	407aa2 <_dtoa_r+0x4e2>
  407f2e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407f32:	0d3f      	lsrs	r7, r7, #20
  407f34:	053f      	lsls	r7, r7, #20
  407f36:	2f00      	cmp	r7, #0
  407f38:	f000 820d 	beq.w	408356 <_dtoa_r+0xd96>
  407f3c:	9b08      	ldr	r3, [sp, #32]
  407f3e:	3301      	adds	r3, #1
  407f40:	9308      	str	r3, [sp, #32]
  407f42:	9b06      	ldr	r3, [sp, #24]
  407f44:	3301      	adds	r3, #1
  407f46:	9306      	str	r3, [sp, #24]
  407f48:	2301      	movs	r3, #1
  407f4a:	930c      	str	r3, [sp, #48]	; 0x30
  407f4c:	e5ab      	b.n	407aa6 <_dtoa_r+0x4e6>
  407f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407f50:	2b00      	cmp	r3, #0
  407f52:	f73f ac42 	bgt.w	4077da <_dtoa_r+0x21a>
  407f56:	f040 8221 	bne.w	40839c <_dtoa_r+0xddc>
  407f5a:	2200      	movs	r2, #0
  407f5c:	4b38      	ldr	r3, [pc, #224]	; (408040 <_dtoa_r+0xa80>)
  407f5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407f62:	f7fc fb2d 	bl	4045c0 <__aeabi_dmul>
  407f66:	4652      	mov	r2, sl
  407f68:	465b      	mov	r3, fp
  407f6a:	f7fc fdaf 	bl	404acc <__aeabi_dcmpge>
  407f6e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  407f72:	4646      	mov	r6, r8
  407f74:	2800      	cmp	r0, #0
  407f76:	d041      	beq.n	407ffc <_dtoa_r+0xa3c>
  407f78:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407f7a:	9d04      	ldr	r5, [sp, #16]
  407f7c:	43db      	mvns	r3, r3
  407f7e:	9302      	str	r3, [sp, #8]
  407f80:	4641      	mov	r1, r8
  407f82:	4620      	mov	r0, r4
  407f84:	f001 fb42 	bl	40960c <_Bfree>
  407f88:	2e00      	cmp	r6, #0
  407f8a:	f43f acdd 	beq.w	407948 <_dtoa_r+0x388>
  407f8e:	e6a7      	b.n	407ce0 <_dtoa_r+0x720>
  407f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407f92:	4649      	mov	r1, r9
  407f94:	4620      	mov	r0, r4
  407f96:	f001 fc6f 	bl	409878 <__pow5mult>
  407f9a:	4681      	mov	r9, r0
  407f9c:	e558      	b.n	407a50 <_dtoa_r+0x490>
  407f9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407fa0:	2a00      	cmp	r2, #0
  407fa2:	f000 8187 	beq.w	4082b4 <_dtoa_r+0xcf4>
  407fa6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  407faa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407fac:	9d08      	ldr	r5, [sp, #32]
  407fae:	e4f2      	b.n	407996 <_dtoa_r+0x3d6>
  407fb0:	f1ba 0f00 	cmp.w	sl, #0
  407fb4:	f47f ad75 	bne.w	407aa2 <_dtoa_r+0x4e2>
  407fb8:	e7b4      	b.n	407f24 <_dtoa_r+0x964>
  407fba:	f001 fb31 	bl	409620 <__multadd>
  407fbe:	4647      	mov	r7, r8
  407fc0:	4606      	mov	r6, r0
  407fc2:	4683      	mov	fp, r0
  407fc4:	e5be      	b.n	407b44 <_dtoa_r+0x584>
  407fc6:	4601      	mov	r1, r0
  407fc8:	4620      	mov	r0, r4
  407fca:	9306      	str	r3, [sp, #24]
  407fcc:	f001 fb1e 	bl	40960c <_Bfree>
  407fd0:	2201      	movs	r2, #1
  407fd2:	9b06      	ldr	r3, [sp, #24]
  407fd4:	e5e0      	b.n	407b98 <_dtoa_r+0x5d8>
  407fd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407fd8:	2b02      	cmp	r3, #2
  407fda:	f77f ad96 	ble.w	407b0a <_dtoa_r+0x54a>
  407fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407fe0:	2b00      	cmp	r3, #0
  407fe2:	d1c9      	bne.n	407f78 <_dtoa_r+0x9b8>
  407fe4:	4641      	mov	r1, r8
  407fe6:	2205      	movs	r2, #5
  407fe8:	4620      	mov	r0, r4
  407fea:	f001 fb19 	bl	409620 <__multadd>
  407fee:	4601      	mov	r1, r0
  407ff0:	4680      	mov	r8, r0
  407ff2:	4648      	mov	r0, r9
  407ff4:	f001 fce2 	bl	4099bc <__mcmp>
  407ff8:	2800      	cmp	r0, #0
  407ffa:	ddbd      	ble.n	407f78 <_dtoa_r+0x9b8>
  407ffc:	9a02      	ldr	r2, [sp, #8]
  407ffe:	9904      	ldr	r1, [sp, #16]
  408000:	2331      	movs	r3, #49	; 0x31
  408002:	3201      	adds	r2, #1
  408004:	9202      	str	r2, [sp, #8]
  408006:	700b      	strb	r3, [r1, #0]
  408008:	1c4d      	adds	r5, r1, #1
  40800a:	e7b9      	b.n	407f80 <_dtoa_r+0x9c0>
  40800c:	9a02      	ldr	r2, [sp, #8]
  40800e:	3201      	adds	r2, #1
  408010:	9202      	str	r2, [sp, #8]
  408012:	9a04      	ldr	r2, [sp, #16]
  408014:	2331      	movs	r3, #49	; 0x31
  408016:	7013      	strb	r3, [r2, #0]
  408018:	e652      	b.n	407cc0 <_dtoa_r+0x700>
  40801a:	2301      	movs	r3, #1
  40801c:	930b      	str	r3, [sp, #44]	; 0x2c
  40801e:	e666      	b.n	407cee <_dtoa_r+0x72e>
  408020:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  408024:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408026:	e48f      	b.n	407948 <_dtoa_r+0x388>
  408028:	0040aac8 	.word	0x0040aac8
  40802c:	0040aaa0 	.word	0x0040aaa0
  408030:	3ff00000 	.word	0x3ff00000
  408034:	401c0000 	.word	0x401c0000
  408038:	3fe00000 	.word	0x3fe00000
  40803c:	40240000 	.word	0x40240000
  408040:	40140000 	.word	0x40140000
  408044:	4650      	mov	r0, sl
  408046:	f7fc fa55 	bl	4044f4 <__aeabi_i2d>
  40804a:	463a      	mov	r2, r7
  40804c:	4643      	mov	r3, r8
  40804e:	f7fc fab7 	bl	4045c0 <__aeabi_dmul>
  408052:	2200      	movs	r2, #0
  408054:	4bc1      	ldr	r3, [pc, #772]	; (40835c <_dtoa_r+0xd9c>)
  408056:	f7fc f901 	bl	40425c <__adddf3>
  40805a:	4605      	mov	r5, r0
  40805c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408060:	4641      	mov	r1, r8
  408062:	2200      	movs	r2, #0
  408064:	4bbe      	ldr	r3, [pc, #760]	; (408360 <_dtoa_r+0xda0>)
  408066:	4638      	mov	r0, r7
  408068:	f7fc f8f6 	bl	404258 <__aeabi_dsub>
  40806c:	462a      	mov	r2, r5
  40806e:	4633      	mov	r3, r6
  408070:	4682      	mov	sl, r0
  408072:	468b      	mov	fp, r1
  408074:	f7fc fd34 	bl	404ae0 <__aeabi_dcmpgt>
  408078:	4680      	mov	r8, r0
  40807a:	2800      	cmp	r0, #0
  40807c:	f040 8110 	bne.w	4082a0 <_dtoa_r+0xce0>
  408080:	462a      	mov	r2, r5
  408082:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  408086:	4650      	mov	r0, sl
  408088:	4659      	mov	r1, fp
  40808a:	f7fc fd0b 	bl	404aa4 <__aeabi_dcmplt>
  40808e:	b118      	cbz	r0, 408098 <_dtoa_r+0xad8>
  408090:	4646      	mov	r6, r8
  408092:	e771      	b.n	407f78 <_dtoa_r+0x9b8>
  408094:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408098:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40809c:	f7ff bb8a 	b.w	4077b4 <_dtoa_r+0x1f4>
  4080a0:	9804      	ldr	r0, [sp, #16]
  4080a2:	f7ff babb 	b.w	40761c <_dtoa_r+0x5c>
  4080a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4080a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4080aa:	970c      	str	r7, [sp, #48]	; 0x30
  4080ac:	1afb      	subs	r3, r7, r3
  4080ae:	441a      	add	r2, r3
  4080b0:	920d      	str	r2, [sp, #52]	; 0x34
  4080b2:	2700      	movs	r7, #0
  4080b4:	e469      	b.n	40798a <_dtoa_r+0x3ca>
  4080b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4080ba:	f04f 0a02 	mov.w	sl, #2
  4080be:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4080c2:	e657      	b.n	407d74 <_dtoa_r+0x7b4>
  4080c4:	2100      	movs	r1, #0
  4080c6:	2301      	movs	r3, #1
  4080c8:	6461      	str	r1, [r4, #68]	; 0x44
  4080ca:	4620      	mov	r0, r4
  4080cc:	9325      	str	r3, [sp, #148]	; 0x94
  4080ce:	f001 fa77 	bl	4095c0 <_Balloc>
  4080d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4080d4:	9004      	str	r0, [sp, #16]
  4080d6:	6420      	str	r0, [r4, #64]	; 0x40
  4080d8:	930a      	str	r3, [sp, #40]	; 0x28
  4080da:	930f      	str	r3, [sp, #60]	; 0x3c
  4080dc:	e629      	b.n	407d32 <_dtoa_r+0x772>
  4080de:	2a00      	cmp	r2, #0
  4080e0:	46d0      	mov	r8, sl
  4080e2:	f8cd b018 	str.w	fp, [sp, #24]
  4080e6:	469a      	mov	sl, r3
  4080e8:	dd11      	ble.n	40810e <_dtoa_r+0xb4e>
  4080ea:	4649      	mov	r1, r9
  4080ec:	2201      	movs	r2, #1
  4080ee:	4620      	mov	r0, r4
  4080f0:	f001 fc12 	bl	409918 <__lshift>
  4080f4:	4641      	mov	r1, r8
  4080f6:	4681      	mov	r9, r0
  4080f8:	f001 fc60 	bl	4099bc <__mcmp>
  4080fc:	2800      	cmp	r0, #0
  4080fe:	f340 8146 	ble.w	40838e <_dtoa_r+0xdce>
  408102:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  408106:	f000 8106 	beq.w	408316 <_dtoa_r+0xd56>
  40810a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40810e:	46b3      	mov	fp, r6
  408110:	f887 a000 	strb.w	sl, [r7]
  408114:	1c7d      	adds	r5, r7, #1
  408116:	9e06      	ldr	r6, [sp, #24]
  408118:	e5d2      	b.n	407cc0 <_dtoa_r+0x700>
  40811a:	d104      	bne.n	408126 <_dtoa_r+0xb66>
  40811c:	f01a 0f01 	tst.w	sl, #1
  408120:	d001      	beq.n	408126 <_dtoa_r+0xb66>
  408122:	e5bd      	b.n	407ca0 <_dtoa_r+0x6e0>
  408124:	4615      	mov	r5, r2
  408126:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40812a:	2b30      	cmp	r3, #48	; 0x30
  40812c:	f105 32ff 	add.w	r2, r5, #4294967295
  408130:	d0f8      	beq.n	408124 <_dtoa_r+0xb64>
  408132:	e5c5      	b.n	407cc0 <_dtoa_r+0x700>
  408134:	9904      	ldr	r1, [sp, #16]
  408136:	2230      	movs	r2, #48	; 0x30
  408138:	700a      	strb	r2, [r1, #0]
  40813a:	9a02      	ldr	r2, [sp, #8]
  40813c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408140:	3201      	adds	r2, #1
  408142:	9202      	str	r2, [sp, #8]
  408144:	f7ff bbfc 	b.w	407940 <_dtoa_r+0x380>
  408148:	f000 80bb 	beq.w	4082c2 <_dtoa_r+0xd02>
  40814c:	9b02      	ldr	r3, [sp, #8]
  40814e:	425d      	negs	r5, r3
  408150:	4b84      	ldr	r3, [pc, #528]	; (408364 <_dtoa_r+0xda4>)
  408152:	f005 020f 	and.w	r2, r5, #15
  408156:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40815a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40815e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  408162:	f7fc fa2d 	bl	4045c0 <__aeabi_dmul>
  408166:	112d      	asrs	r5, r5, #4
  408168:	4607      	mov	r7, r0
  40816a:	4688      	mov	r8, r1
  40816c:	f000 812c 	beq.w	4083c8 <_dtoa_r+0xe08>
  408170:	4e7d      	ldr	r6, [pc, #500]	; (408368 <_dtoa_r+0xda8>)
  408172:	f04f 0a02 	mov.w	sl, #2
  408176:	07eb      	lsls	r3, r5, #31
  408178:	d509      	bpl.n	40818e <_dtoa_r+0xbce>
  40817a:	4638      	mov	r0, r7
  40817c:	4641      	mov	r1, r8
  40817e:	e9d6 2300 	ldrd	r2, r3, [r6]
  408182:	f7fc fa1d 	bl	4045c0 <__aeabi_dmul>
  408186:	f10a 0a01 	add.w	sl, sl, #1
  40818a:	4607      	mov	r7, r0
  40818c:	4688      	mov	r8, r1
  40818e:	106d      	asrs	r5, r5, #1
  408190:	f106 0608 	add.w	r6, r6, #8
  408194:	d1ef      	bne.n	408176 <_dtoa_r+0xbb6>
  408196:	e608      	b.n	407daa <_dtoa_r+0x7ea>
  408198:	6871      	ldr	r1, [r6, #4]
  40819a:	4620      	mov	r0, r4
  40819c:	f001 fa10 	bl	4095c0 <_Balloc>
  4081a0:	6933      	ldr	r3, [r6, #16]
  4081a2:	3302      	adds	r3, #2
  4081a4:	009a      	lsls	r2, r3, #2
  4081a6:	4605      	mov	r5, r0
  4081a8:	f106 010c 	add.w	r1, r6, #12
  4081ac:	300c      	adds	r0, #12
  4081ae:	f7fc fcfb 	bl	404ba8 <memcpy>
  4081b2:	4629      	mov	r1, r5
  4081b4:	2201      	movs	r2, #1
  4081b6:	4620      	mov	r0, r4
  4081b8:	f001 fbae 	bl	409918 <__lshift>
  4081bc:	9006      	str	r0, [sp, #24]
  4081be:	e4b5      	b.n	407b2c <_dtoa_r+0x56c>
  4081c0:	2b39      	cmp	r3, #57	; 0x39
  4081c2:	f8cd b018 	str.w	fp, [sp, #24]
  4081c6:	46d0      	mov	r8, sl
  4081c8:	f000 80a5 	beq.w	408316 <_dtoa_r+0xd56>
  4081cc:	f103 0a01 	add.w	sl, r3, #1
  4081d0:	46b3      	mov	fp, r6
  4081d2:	f887 a000 	strb.w	sl, [r7]
  4081d6:	1c7d      	adds	r5, r7, #1
  4081d8:	9e06      	ldr	r6, [sp, #24]
  4081da:	e571      	b.n	407cc0 <_dtoa_r+0x700>
  4081dc:	465a      	mov	r2, fp
  4081de:	46d0      	mov	r8, sl
  4081e0:	46b3      	mov	fp, r6
  4081e2:	469a      	mov	sl, r3
  4081e4:	4616      	mov	r6, r2
  4081e6:	e54f      	b.n	407c88 <_dtoa_r+0x6c8>
  4081e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4081ea:	495e      	ldr	r1, [pc, #376]	; (408364 <_dtoa_r+0xda4>)
  4081ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4081f0:	462a      	mov	r2, r5
  4081f2:	4633      	mov	r3, r6
  4081f4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4081f8:	f7fc f9e2 	bl	4045c0 <__aeabi_dmul>
  4081fc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  408200:	4638      	mov	r0, r7
  408202:	4641      	mov	r1, r8
  408204:	f002 f934 	bl	40a470 <__aeabi_d2iz>
  408208:	4605      	mov	r5, r0
  40820a:	f7fc f973 	bl	4044f4 <__aeabi_i2d>
  40820e:	460b      	mov	r3, r1
  408210:	4602      	mov	r2, r0
  408212:	4641      	mov	r1, r8
  408214:	4638      	mov	r0, r7
  408216:	f7fc f81f 	bl	404258 <__aeabi_dsub>
  40821a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40821c:	460f      	mov	r7, r1
  40821e:	9904      	ldr	r1, [sp, #16]
  408220:	3530      	adds	r5, #48	; 0x30
  408222:	2b01      	cmp	r3, #1
  408224:	700d      	strb	r5, [r1, #0]
  408226:	4606      	mov	r6, r0
  408228:	f101 0501 	add.w	r5, r1, #1
  40822c:	d026      	beq.n	40827c <_dtoa_r+0xcbc>
  40822e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408230:	9a04      	ldr	r2, [sp, #16]
  408232:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408370 <_dtoa_r+0xdb0>
  408236:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40823a:	4413      	add	r3, r2
  40823c:	f04f 0a00 	mov.w	sl, #0
  408240:	4699      	mov	r9, r3
  408242:	4652      	mov	r2, sl
  408244:	465b      	mov	r3, fp
  408246:	4630      	mov	r0, r6
  408248:	4639      	mov	r1, r7
  40824a:	f7fc f9b9 	bl	4045c0 <__aeabi_dmul>
  40824e:	460f      	mov	r7, r1
  408250:	4606      	mov	r6, r0
  408252:	f002 f90d 	bl	40a470 <__aeabi_d2iz>
  408256:	4680      	mov	r8, r0
  408258:	f7fc f94c 	bl	4044f4 <__aeabi_i2d>
  40825c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408260:	4602      	mov	r2, r0
  408262:	460b      	mov	r3, r1
  408264:	4630      	mov	r0, r6
  408266:	4639      	mov	r1, r7
  408268:	f7fb fff6 	bl	404258 <__aeabi_dsub>
  40826c:	f805 8b01 	strb.w	r8, [r5], #1
  408270:	454d      	cmp	r5, r9
  408272:	4606      	mov	r6, r0
  408274:	460f      	mov	r7, r1
  408276:	d1e4      	bne.n	408242 <_dtoa_r+0xc82>
  408278:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40827c:	4b3b      	ldr	r3, [pc, #236]	; (40836c <_dtoa_r+0xdac>)
  40827e:	2200      	movs	r2, #0
  408280:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408284:	f7fb ffea 	bl	40425c <__adddf3>
  408288:	4632      	mov	r2, r6
  40828a:	463b      	mov	r3, r7
  40828c:	f7fc fc0a 	bl	404aa4 <__aeabi_dcmplt>
  408290:	2800      	cmp	r0, #0
  408292:	d046      	beq.n	408322 <_dtoa_r+0xd62>
  408294:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408296:	9302      	str	r3, [sp, #8]
  408298:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40829c:	f7ff bb43 	b.w	407926 <_dtoa_r+0x366>
  4082a0:	f04f 0800 	mov.w	r8, #0
  4082a4:	4646      	mov	r6, r8
  4082a6:	e6a9      	b.n	407ffc <_dtoa_r+0xa3c>
  4082a8:	9b08      	ldr	r3, [sp, #32]
  4082aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4082ac:	1a9d      	subs	r5, r3, r2
  4082ae:	2300      	movs	r3, #0
  4082b0:	f7ff bb71 	b.w	407996 <_dtoa_r+0x3d6>
  4082b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4082b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4082b8:	9d08      	ldr	r5, [sp, #32]
  4082ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4082be:	f7ff bb6a 	b.w	407996 <_dtoa_r+0x3d6>
  4082c2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4082c6:	f04f 0a02 	mov.w	sl, #2
  4082ca:	e56e      	b.n	407daa <_dtoa_r+0x7ea>
  4082cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4082ce:	2b00      	cmp	r3, #0
  4082d0:	f43f aeb8 	beq.w	408044 <_dtoa_r+0xa84>
  4082d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4082d6:	2b00      	cmp	r3, #0
  4082d8:	f77f aede 	ble.w	408098 <_dtoa_r+0xad8>
  4082dc:	2200      	movs	r2, #0
  4082de:	4b24      	ldr	r3, [pc, #144]	; (408370 <_dtoa_r+0xdb0>)
  4082e0:	4638      	mov	r0, r7
  4082e2:	4641      	mov	r1, r8
  4082e4:	f7fc f96c 	bl	4045c0 <__aeabi_dmul>
  4082e8:	4607      	mov	r7, r0
  4082ea:	4688      	mov	r8, r1
  4082ec:	f10a 0001 	add.w	r0, sl, #1
  4082f0:	f7fc f900 	bl	4044f4 <__aeabi_i2d>
  4082f4:	463a      	mov	r2, r7
  4082f6:	4643      	mov	r3, r8
  4082f8:	f7fc f962 	bl	4045c0 <__aeabi_dmul>
  4082fc:	2200      	movs	r2, #0
  4082fe:	4b17      	ldr	r3, [pc, #92]	; (40835c <_dtoa_r+0xd9c>)
  408300:	f7fb ffac 	bl	40425c <__adddf3>
  408304:	9a02      	ldr	r2, [sp, #8]
  408306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408308:	9312      	str	r3, [sp, #72]	; 0x48
  40830a:	3a01      	subs	r2, #1
  40830c:	4605      	mov	r5, r0
  40830e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408312:	9215      	str	r2, [sp, #84]	; 0x54
  408314:	e56a      	b.n	407dec <_dtoa_r+0x82c>
  408316:	2239      	movs	r2, #57	; 0x39
  408318:	46b3      	mov	fp, r6
  40831a:	703a      	strb	r2, [r7, #0]
  40831c:	9e06      	ldr	r6, [sp, #24]
  40831e:	1c7d      	adds	r5, r7, #1
  408320:	e4c0      	b.n	407ca4 <_dtoa_r+0x6e4>
  408322:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  408326:	2000      	movs	r0, #0
  408328:	4910      	ldr	r1, [pc, #64]	; (40836c <_dtoa_r+0xdac>)
  40832a:	f7fb ff95 	bl	404258 <__aeabi_dsub>
  40832e:	4632      	mov	r2, r6
  408330:	463b      	mov	r3, r7
  408332:	f7fc fbd5 	bl	404ae0 <__aeabi_dcmpgt>
  408336:	b908      	cbnz	r0, 40833c <_dtoa_r+0xd7c>
  408338:	e6ae      	b.n	408098 <_dtoa_r+0xad8>
  40833a:	4615      	mov	r5, r2
  40833c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408340:	2b30      	cmp	r3, #48	; 0x30
  408342:	f105 32ff 	add.w	r2, r5, #4294967295
  408346:	d0f8      	beq.n	40833a <_dtoa_r+0xd7a>
  408348:	e5d7      	b.n	407efa <_dtoa_r+0x93a>
  40834a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40834e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408350:	9302      	str	r3, [sp, #8]
  408352:	f7ff bae8 	b.w	407926 <_dtoa_r+0x366>
  408356:	970c      	str	r7, [sp, #48]	; 0x30
  408358:	f7ff bba5 	b.w	407aa6 <_dtoa_r+0x4e6>
  40835c:	401c0000 	.word	0x401c0000
  408360:	40140000 	.word	0x40140000
  408364:	0040aac8 	.word	0x0040aac8
  408368:	0040aaa0 	.word	0x0040aaa0
  40836c:	3fe00000 	.word	0x3fe00000
  408370:	40240000 	.word	0x40240000
  408374:	2b39      	cmp	r3, #57	; 0x39
  408376:	f8cd b018 	str.w	fp, [sp, #24]
  40837a:	46d0      	mov	r8, sl
  40837c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408380:	469a      	mov	sl, r3
  408382:	d0c8      	beq.n	408316 <_dtoa_r+0xd56>
  408384:	f1bb 0f00 	cmp.w	fp, #0
  408388:	f73f aebf 	bgt.w	40810a <_dtoa_r+0xb4a>
  40838c:	e6bf      	b.n	40810e <_dtoa_r+0xb4e>
  40838e:	f47f aebe 	bne.w	40810e <_dtoa_r+0xb4e>
  408392:	f01a 0f01 	tst.w	sl, #1
  408396:	f43f aeba 	beq.w	40810e <_dtoa_r+0xb4e>
  40839a:	e6b2      	b.n	408102 <_dtoa_r+0xb42>
  40839c:	f04f 0800 	mov.w	r8, #0
  4083a0:	4646      	mov	r6, r8
  4083a2:	e5e9      	b.n	407f78 <_dtoa_r+0x9b8>
  4083a4:	4631      	mov	r1, r6
  4083a6:	2300      	movs	r3, #0
  4083a8:	220a      	movs	r2, #10
  4083aa:	4620      	mov	r0, r4
  4083ac:	f001 f938 	bl	409620 <__multadd>
  4083b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4083b2:	2b00      	cmp	r3, #0
  4083b4:	4606      	mov	r6, r0
  4083b6:	dd0a      	ble.n	4083ce <_dtoa_r+0xe0e>
  4083b8:	930a      	str	r3, [sp, #40]	; 0x28
  4083ba:	f7ff bbaa 	b.w	407b12 <_dtoa_r+0x552>
  4083be:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4083c0:	2b02      	cmp	r3, #2
  4083c2:	dc23      	bgt.n	40840c <_dtoa_r+0xe4c>
  4083c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4083c6:	e43b      	b.n	407c40 <_dtoa_r+0x680>
  4083c8:	f04f 0a02 	mov.w	sl, #2
  4083cc:	e4ed      	b.n	407daa <_dtoa_r+0x7ea>
  4083ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4083d0:	2b02      	cmp	r3, #2
  4083d2:	dc1b      	bgt.n	40840c <_dtoa_r+0xe4c>
  4083d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4083d6:	e7ef      	b.n	4083b8 <_dtoa_r+0xdf8>
  4083d8:	2500      	movs	r5, #0
  4083da:	6465      	str	r5, [r4, #68]	; 0x44
  4083dc:	4629      	mov	r1, r5
  4083de:	4620      	mov	r0, r4
  4083e0:	f001 f8ee 	bl	4095c0 <_Balloc>
  4083e4:	f04f 33ff 	mov.w	r3, #4294967295
  4083e8:	930a      	str	r3, [sp, #40]	; 0x28
  4083ea:	930f      	str	r3, [sp, #60]	; 0x3c
  4083ec:	2301      	movs	r3, #1
  4083ee:	9004      	str	r0, [sp, #16]
  4083f0:	9525      	str	r5, [sp, #148]	; 0x94
  4083f2:	6420      	str	r0, [r4, #64]	; 0x40
  4083f4:	930b      	str	r3, [sp, #44]	; 0x2c
  4083f6:	f7ff b9dd 	b.w	4077b4 <_dtoa_r+0x1f4>
  4083fa:	2501      	movs	r5, #1
  4083fc:	f7ff b9a5 	b.w	40774a <_dtoa_r+0x18a>
  408400:	f43f ab69 	beq.w	407ad6 <_dtoa_r+0x516>
  408404:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  408408:	f7ff bbf9 	b.w	407bfe <_dtoa_r+0x63e>
  40840c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40840e:	930a      	str	r3, [sp, #40]	; 0x28
  408410:	e5e5      	b.n	407fde <_dtoa_r+0xa1e>
  408412:	bf00      	nop

00408414 <__sflush_r>:
  408414:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  408418:	b29a      	uxth	r2, r3
  40841a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40841e:	460d      	mov	r5, r1
  408420:	0711      	lsls	r1, r2, #28
  408422:	4680      	mov	r8, r0
  408424:	d43a      	bmi.n	40849c <__sflush_r+0x88>
  408426:	686a      	ldr	r2, [r5, #4]
  408428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40842c:	2a00      	cmp	r2, #0
  40842e:	81ab      	strh	r3, [r5, #12]
  408430:	dd6f      	ble.n	408512 <__sflush_r+0xfe>
  408432:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408434:	2c00      	cmp	r4, #0
  408436:	d049      	beq.n	4084cc <__sflush_r+0xb8>
  408438:	2200      	movs	r2, #0
  40843a:	b29b      	uxth	r3, r3
  40843c:	f8d8 6000 	ldr.w	r6, [r8]
  408440:	f8c8 2000 	str.w	r2, [r8]
  408444:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  408448:	d067      	beq.n	40851a <__sflush_r+0x106>
  40844a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40844c:	075f      	lsls	r7, r3, #29
  40844e:	d505      	bpl.n	40845c <__sflush_r+0x48>
  408450:	6869      	ldr	r1, [r5, #4]
  408452:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  408454:	1a52      	subs	r2, r2, r1
  408456:	b10b      	cbz	r3, 40845c <__sflush_r+0x48>
  408458:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40845a:	1ad2      	subs	r2, r2, r3
  40845c:	2300      	movs	r3, #0
  40845e:	69e9      	ldr	r1, [r5, #28]
  408460:	4640      	mov	r0, r8
  408462:	47a0      	blx	r4
  408464:	1c44      	adds	r4, r0, #1
  408466:	d03c      	beq.n	4084e2 <__sflush_r+0xce>
  408468:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40846c:	692a      	ldr	r2, [r5, #16]
  40846e:	602a      	str	r2, [r5, #0]
  408470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  408474:	2200      	movs	r2, #0
  408476:	81ab      	strh	r3, [r5, #12]
  408478:	04db      	lsls	r3, r3, #19
  40847a:	606a      	str	r2, [r5, #4]
  40847c:	d447      	bmi.n	40850e <__sflush_r+0xfa>
  40847e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408480:	f8c8 6000 	str.w	r6, [r8]
  408484:	b311      	cbz	r1, 4084cc <__sflush_r+0xb8>
  408486:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40848a:	4299      	cmp	r1, r3
  40848c:	d002      	beq.n	408494 <__sflush_r+0x80>
  40848e:	4640      	mov	r0, r8
  408490:	f000 f9de 	bl	408850 <_free_r>
  408494:	2000      	movs	r0, #0
  408496:	6328      	str	r0, [r5, #48]	; 0x30
  408498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40849c:	692e      	ldr	r6, [r5, #16]
  40849e:	b1ae      	cbz	r6, 4084cc <__sflush_r+0xb8>
  4084a0:	682c      	ldr	r4, [r5, #0]
  4084a2:	602e      	str	r6, [r5, #0]
  4084a4:	0791      	lsls	r1, r2, #30
  4084a6:	bf0c      	ite	eq
  4084a8:	696b      	ldreq	r3, [r5, #20]
  4084aa:	2300      	movne	r3, #0
  4084ac:	1ba4      	subs	r4, r4, r6
  4084ae:	60ab      	str	r3, [r5, #8]
  4084b0:	e00a      	b.n	4084c8 <__sflush_r+0xb4>
  4084b2:	4623      	mov	r3, r4
  4084b4:	4632      	mov	r2, r6
  4084b6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4084b8:	69e9      	ldr	r1, [r5, #28]
  4084ba:	4640      	mov	r0, r8
  4084bc:	47b8      	blx	r7
  4084be:	2800      	cmp	r0, #0
  4084c0:	eba4 0400 	sub.w	r4, r4, r0
  4084c4:	4406      	add	r6, r0
  4084c6:	dd04      	ble.n	4084d2 <__sflush_r+0xbe>
  4084c8:	2c00      	cmp	r4, #0
  4084ca:	dcf2      	bgt.n	4084b2 <__sflush_r+0x9e>
  4084cc:	2000      	movs	r0, #0
  4084ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4084d2:	89ab      	ldrh	r3, [r5, #12]
  4084d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4084d8:	81ab      	strh	r3, [r5, #12]
  4084da:	f04f 30ff 	mov.w	r0, #4294967295
  4084de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4084e2:	f8d8 4000 	ldr.w	r4, [r8]
  4084e6:	2c1d      	cmp	r4, #29
  4084e8:	d8f3      	bhi.n	4084d2 <__sflush_r+0xbe>
  4084ea:	4b19      	ldr	r3, [pc, #100]	; (408550 <__sflush_r+0x13c>)
  4084ec:	40e3      	lsrs	r3, r4
  4084ee:	43db      	mvns	r3, r3
  4084f0:	f013 0301 	ands.w	r3, r3, #1
  4084f4:	d1ed      	bne.n	4084d2 <__sflush_r+0xbe>
  4084f6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4084fa:	606b      	str	r3, [r5, #4]
  4084fc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  408500:	6929      	ldr	r1, [r5, #16]
  408502:	81ab      	strh	r3, [r5, #12]
  408504:	04da      	lsls	r2, r3, #19
  408506:	6029      	str	r1, [r5, #0]
  408508:	d5b9      	bpl.n	40847e <__sflush_r+0x6a>
  40850a:	2c00      	cmp	r4, #0
  40850c:	d1b7      	bne.n	40847e <__sflush_r+0x6a>
  40850e:	6528      	str	r0, [r5, #80]	; 0x50
  408510:	e7b5      	b.n	40847e <__sflush_r+0x6a>
  408512:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  408514:	2a00      	cmp	r2, #0
  408516:	dc8c      	bgt.n	408432 <__sflush_r+0x1e>
  408518:	e7d8      	b.n	4084cc <__sflush_r+0xb8>
  40851a:	2301      	movs	r3, #1
  40851c:	69e9      	ldr	r1, [r5, #28]
  40851e:	4640      	mov	r0, r8
  408520:	47a0      	blx	r4
  408522:	1c43      	adds	r3, r0, #1
  408524:	4602      	mov	r2, r0
  408526:	d002      	beq.n	40852e <__sflush_r+0x11a>
  408528:	89ab      	ldrh	r3, [r5, #12]
  40852a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40852c:	e78e      	b.n	40844c <__sflush_r+0x38>
  40852e:	f8d8 3000 	ldr.w	r3, [r8]
  408532:	2b00      	cmp	r3, #0
  408534:	d0f8      	beq.n	408528 <__sflush_r+0x114>
  408536:	2b1d      	cmp	r3, #29
  408538:	d001      	beq.n	40853e <__sflush_r+0x12a>
  40853a:	2b16      	cmp	r3, #22
  40853c:	d102      	bne.n	408544 <__sflush_r+0x130>
  40853e:	f8c8 6000 	str.w	r6, [r8]
  408542:	e7c3      	b.n	4084cc <__sflush_r+0xb8>
  408544:	89ab      	ldrh	r3, [r5, #12]
  408546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40854a:	81ab      	strh	r3, [r5, #12]
  40854c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408550:	20400001 	.word	0x20400001

00408554 <_fflush_r>:
  408554:	b538      	push	{r3, r4, r5, lr}
  408556:	460d      	mov	r5, r1
  408558:	4604      	mov	r4, r0
  40855a:	b108      	cbz	r0, 408560 <_fflush_r+0xc>
  40855c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40855e:	b1bb      	cbz	r3, 408590 <_fflush_r+0x3c>
  408560:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  408564:	b188      	cbz	r0, 40858a <_fflush_r+0x36>
  408566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408568:	07db      	lsls	r3, r3, #31
  40856a:	d401      	bmi.n	408570 <_fflush_r+0x1c>
  40856c:	0581      	lsls	r1, r0, #22
  40856e:	d517      	bpl.n	4085a0 <_fflush_r+0x4c>
  408570:	4620      	mov	r0, r4
  408572:	4629      	mov	r1, r5
  408574:	f7ff ff4e 	bl	408414 <__sflush_r>
  408578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40857a:	07da      	lsls	r2, r3, #31
  40857c:	4604      	mov	r4, r0
  40857e:	d402      	bmi.n	408586 <_fflush_r+0x32>
  408580:	89ab      	ldrh	r3, [r5, #12]
  408582:	059b      	lsls	r3, r3, #22
  408584:	d507      	bpl.n	408596 <_fflush_r+0x42>
  408586:	4620      	mov	r0, r4
  408588:	bd38      	pop	{r3, r4, r5, pc}
  40858a:	4604      	mov	r4, r0
  40858c:	4620      	mov	r0, r4
  40858e:	bd38      	pop	{r3, r4, r5, pc}
  408590:	f000 f838 	bl	408604 <__sinit>
  408594:	e7e4      	b.n	408560 <_fflush_r+0xc>
  408596:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408598:	f000 fc04 	bl	408da4 <__retarget_lock_release_recursive>
  40859c:	4620      	mov	r0, r4
  40859e:	bd38      	pop	{r3, r4, r5, pc}
  4085a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4085a2:	f000 fbfd 	bl	408da0 <__retarget_lock_acquire_recursive>
  4085a6:	e7e3      	b.n	408570 <_fflush_r+0x1c>

004085a8 <_cleanup_r>:
  4085a8:	4901      	ldr	r1, [pc, #4]	; (4085b0 <_cleanup_r+0x8>)
  4085aa:	f000 bbaf 	b.w	408d0c <_fwalk_reent>
  4085ae:	bf00      	nop
  4085b0:	0040a2dd 	.word	0x0040a2dd

004085b4 <std.isra.0>:
  4085b4:	b510      	push	{r4, lr}
  4085b6:	2300      	movs	r3, #0
  4085b8:	4604      	mov	r4, r0
  4085ba:	8181      	strh	r1, [r0, #12]
  4085bc:	81c2      	strh	r2, [r0, #14]
  4085be:	6003      	str	r3, [r0, #0]
  4085c0:	6043      	str	r3, [r0, #4]
  4085c2:	6083      	str	r3, [r0, #8]
  4085c4:	6643      	str	r3, [r0, #100]	; 0x64
  4085c6:	6103      	str	r3, [r0, #16]
  4085c8:	6143      	str	r3, [r0, #20]
  4085ca:	6183      	str	r3, [r0, #24]
  4085cc:	4619      	mov	r1, r3
  4085ce:	2208      	movs	r2, #8
  4085d0:	305c      	adds	r0, #92	; 0x5c
  4085d2:	f7fc fb83 	bl	404cdc <memset>
  4085d6:	4807      	ldr	r0, [pc, #28]	; (4085f4 <std.isra.0+0x40>)
  4085d8:	4907      	ldr	r1, [pc, #28]	; (4085f8 <std.isra.0+0x44>)
  4085da:	4a08      	ldr	r2, [pc, #32]	; (4085fc <std.isra.0+0x48>)
  4085dc:	4b08      	ldr	r3, [pc, #32]	; (408600 <std.isra.0+0x4c>)
  4085de:	6220      	str	r0, [r4, #32]
  4085e0:	61e4      	str	r4, [r4, #28]
  4085e2:	6261      	str	r1, [r4, #36]	; 0x24
  4085e4:	62a2      	str	r2, [r4, #40]	; 0x28
  4085e6:	62e3      	str	r3, [r4, #44]	; 0x2c
  4085e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4085ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4085f0:	f000 bbd2 	b.w	408d98 <__retarget_lock_init_recursive>
  4085f4:	00409fc1 	.word	0x00409fc1
  4085f8:	00409fe5 	.word	0x00409fe5
  4085fc:	0040a021 	.word	0x0040a021
  408600:	0040a041 	.word	0x0040a041

00408604 <__sinit>:
  408604:	b510      	push	{r4, lr}
  408606:	4604      	mov	r4, r0
  408608:	4812      	ldr	r0, [pc, #72]	; (408654 <__sinit+0x50>)
  40860a:	f000 fbc9 	bl	408da0 <__retarget_lock_acquire_recursive>
  40860e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  408610:	b9d2      	cbnz	r2, 408648 <__sinit+0x44>
  408612:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  408616:	4810      	ldr	r0, [pc, #64]	; (408658 <__sinit+0x54>)
  408618:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40861c:	2103      	movs	r1, #3
  40861e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  408622:	63e0      	str	r0, [r4, #60]	; 0x3c
  408624:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  408628:	6860      	ldr	r0, [r4, #4]
  40862a:	2104      	movs	r1, #4
  40862c:	f7ff ffc2 	bl	4085b4 <std.isra.0>
  408630:	2201      	movs	r2, #1
  408632:	2109      	movs	r1, #9
  408634:	68a0      	ldr	r0, [r4, #8]
  408636:	f7ff ffbd 	bl	4085b4 <std.isra.0>
  40863a:	2202      	movs	r2, #2
  40863c:	2112      	movs	r1, #18
  40863e:	68e0      	ldr	r0, [r4, #12]
  408640:	f7ff ffb8 	bl	4085b4 <std.isra.0>
  408644:	2301      	movs	r3, #1
  408646:	63a3      	str	r3, [r4, #56]	; 0x38
  408648:	4802      	ldr	r0, [pc, #8]	; (408654 <__sinit+0x50>)
  40864a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40864e:	f000 bba9 	b.w	408da4 <__retarget_lock_release_recursive>
  408652:	bf00      	nop
  408654:	2040c5d4 	.word	0x2040c5d4
  408658:	004085a9 	.word	0x004085a9

0040865c <__sfp_lock_acquire>:
  40865c:	4801      	ldr	r0, [pc, #4]	; (408664 <__sfp_lock_acquire+0x8>)
  40865e:	f000 bb9f 	b.w	408da0 <__retarget_lock_acquire_recursive>
  408662:	bf00      	nop
  408664:	2040c5e8 	.word	0x2040c5e8

00408668 <__sfp_lock_release>:
  408668:	4801      	ldr	r0, [pc, #4]	; (408670 <__sfp_lock_release+0x8>)
  40866a:	f000 bb9b 	b.w	408da4 <__retarget_lock_release_recursive>
  40866e:	bf00      	nop
  408670:	2040c5e8 	.word	0x2040c5e8

00408674 <__libc_fini_array>:
  408674:	b538      	push	{r3, r4, r5, lr}
  408676:	4c0a      	ldr	r4, [pc, #40]	; (4086a0 <__libc_fini_array+0x2c>)
  408678:	4d0a      	ldr	r5, [pc, #40]	; (4086a4 <__libc_fini_array+0x30>)
  40867a:	1b64      	subs	r4, r4, r5
  40867c:	10a4      	asrs	r4, r4, #2
  40867e:	d00a      	beq.n	408696 <__libc_fini_array+0x22>
  408680:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408684:	3b01      	subs	r3, #1
  408686:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40868a:	3c01      	subs	r4, #1
  40868c:	f855 3904 	ldr.w	r3, [r5], #-4
  408690:	4798      	blx	r3
  408692:	2c00      	cmp	r4, #0
  408694:	d1f9      	bne.n	40868a <__libc_fini_array+0x16>
  408696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40869a:	f002 bb0b 	b.w	40acb4 <_fini>
  40869e:	bf00      	nop
  4086a0:	0040acc4 	.word	0x0040acc4
  4086a4:	0040acc0 	.word	0x0040acc0

004086a8 <__fputwc>:
  4086a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4086ac:	b082      	sub	sp, #8
  4086ae:	4680      	mov	r8, r0
  4086b0:	4689      	mov	r9, r1
  4086b2:	4614      	mov	r4, r2
  4086b4:	f000 fb54 	bl	408d60 <__locale_mb_cur_max>
  4086b8:	2801      	cmp	r0, #1
  4086ba:	d036      	beq.n	40872a <__fputwc+0x82>
  4086bc:	464a      	mov	r2, r9
  4086be:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4086c2:	a901      	add	r1, sp, #4
  4086c4:	4640      	mov	r0, r8
  4086c6:	f001 fd17 	bl	40a0f8 <_wcrtomb_r>
  4086ca:	1c42      	adds	r2, r0, #1
  4086cc:	4606      	mov	r6, r0
  4086ce:	d025      	beq.n	40871c <__fputwc+0x74>
  4086d0:	b3a8      	cbz	r0, 40873e <__fputwc+0x96>
  4086d2:	f89d e004 	ldrb.w	lr, [sp, #4]
  4086d6:	2500      	movs	r5, #0
  4086d8:	f10d 0a04 	add.w	sl, sp, #4
  4086dc:	e009      	b.n	4086f2 <__fputwc+0x4a>
  4086de:	6823      	ldr	r3, [r4, #0]
  4086e0:	1c5a      	adds	r2, r3, #1
  4086e2:	6022      	str	r2, [r4, #0]
  4086e4:	f883 e000 	strb.w	lr, [r3]
  4086e8:	3501      	adds	r5, #1
  4086ea:	42b5      	cmp	r5, r6
  4086ec:	d227      	bcs.n	40873e <__fputwc+0x96>
  4086ee:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4086f2:	68a3      	ldr	r3, [r4, #8]
  4086f4:	3b01      	subs	r3, #1
  4086f6:	2b00      	cmp	r3, #0
  4086f8:	60a3      	str	r3, [r4, #8]
  4086fa:	daf0      	bge.n	4086de <__fputwc+0x36>
  4086fc:	69a7      	ldr	r7, [r4, #24]
  4086fe:	42bb      	cmp	r3, r7
  408700:	4671      	mov	r1, lr
  408702:	4622      	mov	r2, r4
  408704:	4640      	mov	r0, r8
  408706:	db02      	blt.n	40870e <__fputwc+0x66>
  408708:	f1be 0f0a 	cmp.w	lr, #10
  40870c:	d1e7      	bne.n	4086de <__fputwc+0x36>
  40870e:	f001 fc9b 	bl	40a048 <__swbuf_r>
  408712:	1c43      	adds	r3, r0, #1
  408714:	d1e8      	bne.n	4086e8 <__fputwc+0x40>
  408716:	b002      	add	sp, #8
  408718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40871c:	89a3      	ldrh	r3, [r4, #12]
  40871e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408722:	81a3      	strh	r3, [r4, #12]
  408724:	b002      	add	sp, #8
  408726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40872a:	f109 33ff 	add.w	r3, r9, #4294967295
  40872e:	2bfe      	cmp	r3, #254	; 0xfe
  408730:	d8c4      	bhi.n	4086bc <__fputwc+0x14>
  408732:	fa5f fe89 	uxtb.w	lr, r9
  408736:	4606      	mov	r6, r0
  408738:	f88d e004 	strb.w	lr, [sp, #4]
  40873c:	e7cb      	b.n	4086d6 <__fputwc+0x2e>
  40873e:	4648      	mov	r0, r9
  408740:	b002      	add	sp, #8
  408742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408746:	bf00      	nop

00408748 <_fputwc_r>:
  408748:	b530      	push	{r4, r5, lr}
  40874a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40874c:	f013 0f01 	tst.w	r3, #1
  408750:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408754:	4614      	mov	r4, r2
  408756:	b083      	sub	sp, #12
  408758:	4605      	mov	r5, r0
  40875a:	b29a      	uxth	r2, r3
  40875c:	d101      	bne.n	408762 <_fputwc_r+0x1a>
  40875e:	0590      	lsls	r0, r2, #22
  408760:	d51c      	bpl.n	40879c <_fputwc_r+0x54>
  408762:	0490      	lsls	r0, r2, #18
  408764:	d406      	bmi.n	408774 <_fputwc_r+0x2c>
  408766:	6e62      	ldr	r2, [r4, #100]	; 0x64
  408768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40876c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408770:	81a3      	strh	r3, [r4, #12]
  408772:	6662      	str	r2, [r4, #100]	; 0x64
  408774:	4628      	mov	r0, r5
  408776:	4622      	mov	r2, r4
  408778:	f7ff ff96 	bl	4086a8 <__fputwc>
  40877c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40877e:	07da      	lsls	r2, r3, #31
  408780:	4605      	mov	r5, r0
  408782:	d402      	bmi.n	40878a <_fputwc_r+0x42>
  408784:	89a3      	ldrh	r3, [r4, #12]
  408786:	059b      	lsls	r3, r3, #22
  408788:	d502      	bpl.n	408790 <_fputwc_r+0x48>
  40878a:	4628      	mov	r0, r5
  40878c:	b003      	add	sp, #12
  40878e:	bd30      	pop	{r4, r5, pc}
  408790:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408792:	f000 fb07 	bl	408da4 <__retarget_lock_release_recursive>
  408796:	4628      	mov	r0, r5
  408798:	b003      	add	sp, #12
  40879a:	bd30      	pop	{r4, r5, pc}
  40879c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40879e:	9101      	str	r1, [sp, #4]
  4087a0:	f000 fafe 	bl	408da0 <__retarget_lock_acquire_recursive>
  4087a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4087a8:	9901      	ldr	r1, [sp, #4]
  4087aa:	b29a      	uxth	r2, r3
  4087ac:	e7d9      	b.n	408762 <_fputwc_r+0x1a>
  4087ae:	bf00      	nop

004087b0 <_malloc_trim_r>:
  4087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4087b2:	4f24      	ldr	r7, [pc, #144]	; (408844 <_malloc_trim_r+0x94>)
  4087b4:	460c      	mov	r4, r1
  4087b6:	4606      	mov	r6, r0
  4087b8:	f000 fef6 	bl	4095a8 <__malloc_lock>
  4087bc:	68bb      	ldr	r3, [r7, #8]
  4087be:	685d      	ldr	r5, [r3, #4]
  4087c0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4087c4:	310f      	adds	r1, #15
  4087c6:	f025 0503 	bic.w	r5, r5, #3
  4087ca:	4429      	add	r1, r5
  4087cc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4087d0:	f021 010f 	bic.w	r1, r1, #15
  4087d4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4087d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4087dc:	db07      	blt.n	4087ee <_malloc_trim_r+0x3e>
  4087de:	2100      	movs	r1, #0
  4087e0:	4630      	mov	r0, r6
  4087e2:	f001 fb8d 	bl	409f00 <_sbrk_r>
  4087e6:	68bb      	ldr	r3, [r7, #8]
  4087e8:	442b      	add	r3, r5
  4087ea:	4298      	cmp	r0, r3
  4087ec:	d004      	beq.n	4087f8 <_malloc_trim_r+0x48>
  4087ee:	4630      	mov	r0, r6
  4087f0:	f000 fee0 	bl	4095b4 <__malloc_unlock>
  4087f4:	2000      	movs	r0, #0
  4087f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4087f8:	4261      	negs	r1, r4
  4087fa:	4630      	mov	r0, r6
  4087fc:	f001 fb80 	bl	409f00 <_sbrk_r>
  408800:	3001      	adds	r0, #1
  408802:	d00d      	beq.n	408820 <_malloc_trim_r+0x70>
  408804:	4b10      	ldr	r3, [pc, #64]	; (408848 <_malloc_trim_r+0x98>)
  408806:	68ba      	ldr	r2, [r7, #8]
  408808:	6819      	ldr	r1, [r3, #0]
  40880a:	1b2d      	subs	r5, r5, r4
  40880c:	f045 0501 	orr.w	r5, r5, #1
  408810:	4630      	mov	r0, r6
  408812:	1b09      	subs	r1, r1, r4
  408814:	6055      	str	r5, [r2, #4]
  408816:	6019      	str	r1, [r3, #0]
  408818:	f000 fecc 	bl	4095b4 <__malloc_unlock>
  40881c:	2001      	movs	r0, #1
  40881e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408820:	2100      	movs	r1, #0
  408822:	4630      	mov	r0, r6
  408824:	f001 fb6c 	bl	409f00 <_sbrk_r>
  408828:	68ba      	ldr	r2, [r7, #8]
  40882a:	1a83      	subs	r3, r0, r2
  40882c:	2b0f      	cmp	r3, #15
  40882e:	ddde      	ble.n	4087ee <_malloc_trim_r+0x3e>
  408830:	4c06      	ldr	r4, [pc, #24]	; (40884c <_malloc_trim_r+0x9c>)
  408832:	4905      	ldr	r1, [pc, #20]	; (408848 <_malloc_trim_r+0x98>)
  408834:	6824      	ldr	r4, [r4, #0]
  408836:	f043 0301 	orr.w	r3, r3, #1
  40883a:	1b00      	subs	r0, r0, r4
  40883c:	6053      	str	r3, [r2, #4]
  40883e:	6008      	str	r0, [r1, #0]
  408840:	e7d5      	b.n	4087ee <_malloc_trim_r+0x3e>
  408842:	bf00      	nop
  408844:	204005a8 	.word	0x204005a8
  408848:	2040c554 	.word	0x2040c554
  40884c:	204009b0 	.word	0x204009b0

00408850 <_free_r>:
  408850:	2900      	cmp	r1, #0
  408852:	d044      	beq.n	4088de <_free_r+0x8e>
  408854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408858:	460d      	mov	r5, r1
  40885a:	4680      	mov	r8, r0
  40885c:	f000 fea4 	bl	4095a8 <__malloc_lock>
  408860:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408864:	4969      	ldr	r1, [pc, #420]	; (408a0c <_free_r+0x1bc>)
  408866:	f027 0301 	bic.w	r3, r7, #1
  40886a:	f1a5 0408 	sub.w	r4, r5, #8
  40886e:	18e2      	adds	r2, r4, r3
  408870:	688e      	ldr	r6, [r1, #8]
  408872:	6850      	ldr	r0, [r2, #4]
  408874:	42b2      	cmp	r2, r6
  408876:	f020 0003 	bic.w	r0, r0, #3
  40887a:	d05e      	beq.n	40893a <_free_r+0xea>
  40887c:	07fe      	lsls	r6, r7, #31
  40887e:	6050      	str	r0, [r2, #4]
  408880:	d40b      	bmi.n	40889a <_free_r+0x4a>
  408882:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408886:	1be4      	subs	r4, r4, r7
  408888:	f101 0e08 	add.w	lr, r1, #8
  40888c:	68a5      	ldr	r5, [r4, #8]
  40888e:	4575      	cmp	r5, lr
  408890:	443b      	add	r3, r7
  408892:	d06d      	beq.n	408970 <_free_r+0x120>
  408894:	68e7      	ldr	r7, [r4, #12]
  408896:	60ef      	str	r7, [r5, #12]
  408898:	60bd      	str	r5, [r7, #8]
  40889a:	1815      	adds	r5, r2, r0
  40889c:	686d      	ldr	r5, [r5, #4]
  40889e:	07ed      	lsls	r5, r5, #31
  4088a0:	d53e      	bpl.n	408920 <_free_r+0xd0>
  4088a2:	f043 0201 	orr.w	r2, r3, #1
  4088a6:	6062      	str	r2, [r4, #4]
  4088a8:	50e3      	str	r3, [r4, r3]
  4088aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4088ae:	d217      	bcs.n	4088e0 <_free_r+0x90>
  4088b0:	08db      	lsrs	r3, r3, #3
  4088b2:	1c58      	adds	r0, r3, #1
  4088b4:	109a      	asrs	r2, r3, #2
  4088b6:	684d      	ldr	r5, [r1, #4]
  4088b8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4088bc:	60a7      	str	r7, [r4, #8]
  4088be:	2301      	movs	r3, #1
  4088c0:	4093      	lsls	r3, r2
  4088c2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4088c6:	432b      	orrs	r3, r5
  4088c8:	3a08      	subs	r2, #8
  4088ca:	60e2      	str	r2, [r4, #12]
  4088cc:	604b      	str	r3, [r1, #4]
  4088ce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4088d2:	60fc      	str	r4, [r7, #12]
  4088d4:	4640      	mov	r0, r8
  4088d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4088da:	f000 be6b 	b.w	4095b4 <__malloc_unlock>
  4088de:	4770      	bx	lr
  4088e0:	0a5a      	lsrs	r2, r3, #9
  4088e2:	2a04      	cmp	r2, #4
  4088e4:	d852      	bhi.n	40898c <_free_r+0x13c>
  4088e6:	099a      	lsrs	r2, r3, #6
  4088e8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4088ec:	00ff      	lsls	r7, r7, #3
  4088ee:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4088f2:	19c8      	adds	r0, r1, r7
  4088f4:	59ca      	ldr	r2, [r1, r7]
  4088f6:	3808      	subs	r0, #8
  4088f8:	4290      	cmp	r0, r2
  4088fa:	d04f      	beq.n	40899c <_free_r+0x14c>
  4088fc:	6851      	ldr	r1, [r2, #4]
  4088fe:	f021 0103 	bic.w	r1, r1, #3
  408902:	428b      	cmp	r3, r1
  408904:	d232      	bcs.n	40896c <_free_r+0x11c>
  408906:	6892      	ldr	r2, [r2, #8]
  408908:	4290      	cmp	r0, r2
  40890a:	d1f7      	bne.n	4088fc <_free_r+0xac>
  40890c:	68c3      	ldr	r3, [r0, #12]
  40890e:	60a0      	str	r0, [r4, #8]
  408910:	60e3      	str	r3, [r4, #12]
  408912:	609c      	str	r4, [r3, #8]
  408914:	60c4      	str	r4, [r0, #12]
  408916:	4640      	mov	r0, r8
  408918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40891c:	f000 be4a 	b.w	4095b4 <__malloc_unlock>
  408920:	6895      	ldr	r5, [r2, #8]
  408922:	4f3b      	ldr	r7, [pc, #236]	; (408a10 <_free_r+0x1c0>)
  408924:	42bd      	cmp	r5, r7
  408926:	4403      	add	r3, r0
  408928:	d040      	beq.n	4089ac <_free_r+0x15c>
  40892a:	68d0      	ldr	r0, [r2, #12]
  40892c:	60e8      	str	r0, [r5, #12]
  40892e:	f043 0201 	orr.w	r2, r3, #1
  408932:	6085      	str	r5, [r0, #8]
  408934:	6062      	str	r2, [r4, #4]
  408936:	50e3      	str	r3, [r4, r3]
  408938:	e7b7      	b.n	4088aa <_free_r+0x5a>
  40893a:	07ff      	lsls	r7, r7, #31
  40893c:	4403      	add	r3, r0
  40893e:	d407      	bmi.n	408950 <_free_r+0x100>
  408940:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408944:	1aa4      	subs	r4, r4, r2
  408946:	4413      	add	r3, r2
  408948:	68a0      	ldr	r0, [r4, #8]
  40894a:	68e2      	ldr	r2, [r4, #12]
  40894c:	60c2      	str	r2, [r0, #12]
  40894e:	6090      	str	r0, [r2, #8]
  408950:	4a30      	ldr	r2, [pc, #192]	; (408a14 <_free_r+0x1c4>)
  408952:	6812      	ldr	r2, [r2, #0]
  408954:	f043 0001 	orr.w	r0, r3, #1
  408958:	4293      	cmp	r3, r2
  40895a:	6060      	str	r0, [r4, #4]
  40895c:	608c      	str	r4, [r1, #8]
  40895e:	d3b9      	bcc.n	4088d4 <_free_r+0x84>
  408960:	4b2d      	ldr	r3, [pc, #180]	; (408a18 <_free_r+0x1c8>)
  408962:	4640      	mov	r0, r8
  408964:	6819      	ldr	r1, [r3, #0]
  408966:	f7ff ff23 	bl	4087b0 <_malloc_trim_r>
  40896a:	e7b3      	b.n	4088d4 <_free_r+0x84>
  40896c:	4610      	mov	r0, r2
  40896e:	e7cd      	b.n	40890c <_free_r+0xbc>
  408970:	1811      	adds	r1, r2, r0
  408972:	6849      	ldr	r1, [r1, #4]
  408974:	07c9      	lsls	r1, r1, #31
  408976:	d444      	bmi.n	408a02 <_free_r+0x1b2>
  408978:	6891      	ldr	r1, [r2, #8]
  40897a:	68d2      	ldr	r2, [r2, #12]
  40897c:	60ca      	str	r2, [r1, #12]
  40897e:	4403      	add	r3, r0
  408980:	f043 0001 	orr.w	r0, r3, #1
  408984:	6091      	str	r1, [r2, #8]
  408986:	6060      	str	r0, [r4, #4]
  408988:	50e3      	str	r3, [r4, r3]
  40898a:	e7a3      	b.n	4088d4 <_free_r+0x84>
  40898c:	2a14      	cmp	r2, #20
  40898e:	d816      	bhi.n	4089be <_free_r+0x16e>
  408990:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408994:	00ff      	lsls	r7, r7, #3
  408996:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40899a:	e7aa      	b.n	4088f2 <_free_r+0xa2>
  40899c:	10aa      	asrs	r2, r5, #2
  40899e:	2301      	movs	r3, #1
  4089a0:	684d      	ldr	r5, [r1, #4]
  4089a2:	4093      	lsls	r3, r2
  4089a4:	432b      	orrs	r3, r5
  4089a6:	604b      	str	r3, [r1, #4]
  4089a8:	4603      	mov	r3, r0
  4089aa:	e7b0      	b.n	40890e <_free_r+0xbe>
  4089ac:	f043 0201 	orr.w	r2, r3, #1
  4089b0:	614c      	str	r4, [r1, #20]
  4089b2:	610c      	str	r4, [r1, #16]
  4089b4:	60e5      	str	r5, [r4, #12]
  4089b6:	60a5      	str	r5, [r4, #8]
  4089b8:	6062      	str	r2, [r4, #4]
  4089ba:	50e3      	str	r3, [r4, r3]
  4089bc:	e78a      	b.n	4088d4 <_free_r+0x84>
  4089be:	2a54      	cmp	r2, #84	; 0x54
  4089c0:	d806      	bhi.n	4089d0 <_free_r+0x180>
  4089c2:	0b1a      	lsrs	r2, r3, #12
  4089c4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4089c8:	00ff      	lsls	r7, r7, #3
  4089ca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4089ce:	e790      	b.n	4088f2 <_free_r+0xa2>
  4089d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4089d4:	d806      	bhi.n	4089e4 <_free_r+0x194>
  4089d6:	0bda      	lsrs	r2, r3, #15
  4089d8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4089dc:	00ff      	lsls	r7, r7, #3
  4089de:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4089e2:	e786      	b.n	4088f2 <_free_r+0xa2>
  4089e4:	f240 5054 	movw	r0, #1364	; 0x554
  4089e8:	4282      	cmp	r2, r0
  4089ea:	d806      	bhi.n	4089fa <_free_r+0x1aa>
  4089ec:	0c9a      	lsrs	r2, r3, #18
  4089ee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4089f2:	00ff      	lsls	r7, r7, #3
  4089f4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4089f8:	e77b      	b.n	4088f2 <_free_r+0xa2>
  4089fa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4089fe:	257e      	movs	r5, #126	; 0x7e
  408a00:	e777      	b.n	4088f2 <_free_r+0xa2>
  408a02:	f043 0101 	orr.w	r1, r3, #1
  408a06:	6061      	str	r1, [r4, #4]
  408a08:	6013      	str	r3, [r2, #0]
  408a0a:	e763      	b.n	4088d4 <_free_r+0x84>
  408a0c:	204005a8 	.word	0x204005a8
  408a10:	204005b0 	.word	0x204005b0
  408a14:	204009b4 	.word	0x204009b4
  408a18:	2040c584 	.word	0x2040c584

00408a1c <__sfvwrite_r>:
  408a1c:	6893      	ldr	r3, [r2, #8]
  408a1e:	2b00      	cmp	r3, #0
  408a20:	d073      	beq.n	408b0a <__sfvwrite_r+0xee>
  408a22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408a26:	898b      	ldrh	r3, [r1, #12]
  408a28:	b083      	sub	sp, #12
  408a2a:	460c      	mov	r4, r1
  408a2c:	0719      	lsls	r1, r3, #28
  408a2e:	9000      	str	r0, [sp, #0]
  408a30:	4616      	mov	r6, r2
  408a32:	d526      	bpl.n	408a82 <__sfvwrite_r+0x66>
  408a34:	6922      	ldr	r2, [r4, #16]
  408a36:	b322      	cbz	r2, 408a82 <__sfvwrite_r+0x66>
  408a38:	f013 0002 	ands.w	r0, r3, #2
  408a3c:	6835      	ldr	r5, [r6, #0]
  408a3e:	d02c      	beq.n	408a9a <__sfvwrite_r+0x7e>
  408a40:	f04f 0900 	mov.w	r9, #0
  408a44:	4fb0      	ldr	r7, [pc, #704]	; (408d08 <__sfvwrite_r+0x2ec>)
  408a46:	46c8      	mov	r8, r9
  408a48:	46b2      	mov	sl, r6
  408a4a:	45b8      	cmp	r8, r7
  408a4c:	4643      	mov	r3, r8
  408a4e:	464a      	mov	r2, r9
  408a50:	bf28      	it	cs
  408a52:	463b      	movcs	r3, r7
  408a54:	9800      	ldr	r0, [sp, #0]
  408a56:	f1b8 0f00 	cmp.w	r8, #0
  408a5a:	d050      	beq.n	408afe <__sfvwrite_r+0xe2>
  408a5c:	69e1      	ldr	r1, [r4, #28]
  408a5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408a60:	47b0      	blx	r6
  408a62:	2800      	cmp	r0, #0
  408a64:	dd58      	ble.n	408b18 <__sfvwrite_r+0xfc>
  408a66:	f8da 3008 	ldr.w	r3, [sl, #8]
  408a6a:	1a1b      	subs	r3, r3, r0
  408a6c:	4481      	add	r9, r0
  408a6e:	eba8 0800 	sub.w	r8, r8, r0
  408a72:	f8ca 3008 	str.w	r3, [sl, #8]
  408a76:	2b00      	cmp	r3, #0
  408a78:	d1e7      	bne.n	408a4a <__sfvwrite_r+0x2e>
  408a7a:	2000      	movs	r0, #0
  408a7c:	b003      	add	sp, #12
  408a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a82:	4621      	mov	r1, r4
  408a84:	9800      	ldr	r0, [sp, #0]
  408a86:	f7fe fc8b 	bl	4073a0 <__swsetup_r>
  408a8a:	2800      	cmp	r0, #0
  408a8c:	f040 8133 	bne.w	408cf6 <__sfvwrite_r+0x2da>
  408a90:	89a3      	ldrh	r3, [r4, #12]
  408a92:	6835      	ldr	r5, [r6, #0]
  408a94:	f013 0002 	ands.w	r0, r3, #2
  408a98:	d1d2      	bne.n	408a40 <__sfvwrite_r+0x24>
  408a9a:	f013 0901 	ands.w	r9, r3, #1
  408a9e:	d145      	bne.n	408b2c <__sfvwrite_r+0x110>
  408aa0:	464f      	mov	r7, r9
  408aa2:	9601      	str	r6, [sp, #4]
  408aa4:	b337      	cbz	r7, 408af4 <__sfvwrite_r+0xd8>
  408aa6:	059a      	lsls	r2, r3, #22
  408aa8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408aac:	f140 8083 	bpl.w	408bb6 <__sfvwrite_r+0x19a>
  408ab0:	4547      	cmp	r7, r8
  408ab2:	46c3      	mov	fp, r8
  408ab4:	f0c0 80ab 	bcc.w	408c0e <__sfvwrite_r+0x1f2>
  408ab8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408abc:	f040 80ac 	bne.w	408c18 <__sfvwrite_r+0x1fc>
  408ac0:	6820      	ldr	r0, [r4, #0]
  408ac2:	46ba      	mov	sl, r7
  408ac4:	465a      	mov	r2, fp
  408ac6:	4649      	mov	r1, r9
  408ac8:	f000 fd0a 	bl	4094e0 <memmove>
  408acc:	68a2      	ldr	r2, [r4, #8]
  408ace:	6823      	ldr	r3, [r4, #0]
  408ad0:	eba2 0208 	sub.w	r2, r2, r8
  408ad4:	445b      	add	r3, fp
  408ad6:	60a2      	str	r2, [r4, #8]
  408ad8:	6023      	str	r3, [r4, #0]
  408ada:	9a01      	ldr	r2, [sp, #4]
  408adc:	6893      	ldr	r3, [r2, #8]
  408ade:	eba3 030a 	sub.w	r3, r3, sl
  408ae2:	44d1      	add	r9, sl
  408ae4:	eba7 070a 	sub.w	r7, r7, sl
  408ae8:	6093      	str	r3, [r2, #8]
  408aea:	2b00      	cmp	r3, #0
  408aec:	d0c5      	beq.n	408a7a <__sfvwrite_r+0x5e>
  408aee:	89a3      	ldrh	r3, [r4, #12]
  408af0:	2f00      	cmp	r7, #0
  408af2:	d1d8      	bne.n	408aa6 <__sfvwrite_r+0x8a>
  408af4:	f8d5 9000 	ldr.w	r9, [r5]
  408af8:	686f      	ldr	r7, [r5, #4]
  408afa:	3508      	adds	r5, #8
  408afc:	e7d2      	b.n	408aa4 <__sfvwrite_r+0x88>
  408afe:	f8d5 9000 	ldr.w	r9, [r5]
  408b02:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408b06:	3508      	adds	r5, #8
  408b08:	e79f      	b.n	408a4a <__sfvwrite_r+0x2e>
  408b0a:	2000      	movs	r0, #0
  408b0c:	4770      	bx	lr
  408b0e:	4621      	mov	r1, r4
  408b10:	9800      	ldr	r0, [sp, #0]
  408b12:	f7ff fd1f 	bl	408554 <_fflush_r>
  408b16:	b370      	cbz	r0, 408b76 <__sfvwrite_r+0x15a>
  408b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408b20:	f04f 30ff 	mov.w	r0, #4294967295
  408b24:	81a3      	strh	r3, [r4, #12]
  408b26:	b003      	add	sp, #12
  408b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b2c:	4681      	mov	r9, r0
  408b2e:	4633      	mov	r3, r6
  408b30:	464e      	mov	r6, r9
  408b32:	46a8      	mov	r8, r5
  408b34:	469a      	mov	sl, r3
  408b36:	464d      	mov	r5, r9
  408b38:	b34e      	cbz	r6, 408b8e <__sfvwrite_r+0x172>
  408b3a:	b380      	cbz	r0, 408b9e <__sfvwrite_r+0x182>
  408b3c:	6820      	ldr	r0, [r4, #0]
  408b3e:	6923      	ldr	r3, [r4, #16]
  408b40:	6962      	ldr	r2, [r4, #20]
  408b42:	45b1      	cmp	r9, r6
  408b44:	46cb      	mov	fp, r9
  408b46:	bf28      	it	cs
  408b48:	46b3      	movcs	fp, r6
  408b4a:	4298      	cmp	r0, r3
  408b4c:	465f      	mov	r7, fp
  408b4e:	d904      	bls.n	408b5a <__sfvwrite_r+0x13e>
  408b50:	68a3      	ldr	r3, [r4, #8]
  408b52:	4413      	add	r3, r2
  408b54:	459b      	cmp	fp, r3
  408b56:	f300 80a6 	bgt.w	408ca6 <__sfvwrite_r+0x28a>
  408b5a:	4593      	cmp	fp, r2
  408b5c:	db4b      	blt.n	408bf6 <__sfvwrite_r+0x1da>
  408b5e:	4613      	mov	r3, r2
  408b60:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408b62:	69e1      	ldr	r1, [r4, #28]
  408b64:	9800      	ldr	r0, [sp, #0]
  408b66:	462a      	mov	r2, r5
  408b68:	47b8      	blx	r7
  408b6a:	1e07      	subs	r7, r0, #0
  408b6c:	ddd4      	ble.n	408b18 <__sfvwrite_r+0xfc>
  408b6e:	ebb9 0907 	subs.w	r9, r9, r7
  408b72:	d0cc      	beq.n	408b0e <__sfvwrite_r+0xf2>
  408b74:	2001      	movs	r0, #1
  408b76:	f8da 3008 	ldr.w	r3, [sl, #8]
  408b7a:	1bdb      	subs	r3, r3, r7
  408b7c:	443d      	add	r5, r7
  408b7e:	1bf6      	subs	r6, r6, r7
  408b80:	f8ca 3008 	str.w	r3, [sl, #8]
  408b84:	2b00      	cmp	r3, #0
  408b86:	f43f af78 	beq.w	408a7a <__sfvwrite_r+0x5e>
  408b8a:	2e00      	cmp	r6, #0
  408b8c:	d1d5      	bne.n	408b3a <__sfvwrite_r+0x11e>
  408b8e:	f108 0308 	add.w	r3, r8, #8
  408b92:	e913 0060 	ldmdb	r3, {r5, r6}
  408b96:	4698      	mov	r8, r3
  408b98:	3308      	adds	r3, #8
  408b9a:	2e00      	cmp	r6, #0
  408b9c:	d0f9      	beq.n	408b92 <__sfvwrite_r+0x176>
  408b9e:	4632      	mov	r2, r6
  408ba0:	210a      	movs	r1, #10
  408ba2:	4628      	mov	r0, r5
  408ba4:	f000 fc4c 	bl	409440 <memchr>
  408ba8:	2800      	cmp	r0, #0
  408baa:	f000 80a1 	beq.w	408cf0 <__sfvwrite_r+0x2d4>
  408bae:	3001      	adds	r0, #1
  408bb0:	eba0 0905 	sub.w	r9, r0, r5
  408bb4:	e7c2      	b.n	408b3c <__sfvwrite_r+0x120>
  408bb6:	6820      	ldr	r0, [r4, #0]
  408bb8:	6923      	ldr	r3, [r4, #16]
  408bba:	4298      	cmp	r0, r3
  408bbc:	d802      	bhi.n	408bc4 <__sfvwrite_r+0x1a8>
  408bbe:	6963      	ldr	r3, [r4, #20]
  408bc0:	429f      	cmp	r7, r3
  408bc2:	d25d      	bcs.n	408c80 <__sfvwrite_r+0x264>
  408bc4:	45b8      	cmp	r8, r7
  408bc6:	bf28      	it	cs
  408bc8:	46b8      	movcs	r8, r7
  408bca:	4642      	mov	r2, r8
  408bcc:	4649      	mov	r1, r9
  408bce:	f000 fc87 	bl	4094e0 <memmove>
  408bd2:	68a3      	ldr	r3, [r4, #8]
  408bd4:	6822      	ldr	r2, [r4, #0]
  408bd6:	eba3 0308 	sub.w	r3, r3, r8
  408bda:	4442      	add	r2, r8
  408bdc:	60a3      	str	r3, [r4, #8]
  408bde:	6022      	str	r2, [r4, #0]
  408be0:	b10b      	cbz	r3, 408be6 <__sfvwrite_r+0x1ca>
  408be2:	46c2      	mov	sl, r8
  408be4:	e779      	b.n	408ada <__sfvwrite_r+0xbe>
  408be6:	4621      	mov	r1, r4
  408be8:	9800      	ldr	r0, [sp, #0]
  408bea:	f7ff fcb3 	bl	408554 <_fflush_r>
  408bee:	2800      	cmp	r0, #0
  408bf0:	d192      	bne.n	408b18 <__sfvwrite_r+0xfc>
  408bf2:	46c2      	mov	sl, r8
  408bf4:	e771      	b.n	408ada <__sfvwrite_r+0xbe>
  408bf6:	465a      	mov	r2, fp
  408bf8:	4629      	mov	r1, r5
  408bfa:	f000 fc71 	bl	4094e0 <memmove>
  408bfe:	68a2      	ldr	r2, [r4, #8]
  408c00:	6823      	ldr	r3, [r4, #0]
  408c02:	eba2 020b 	sub.w	r2, r2, fp
  408c06:	445b      	add	r3, fp
  408c08:	60a2      	str	r2, [r4, #8]
  408c0a:	6023      	str	r3, [r4, #0]
  408c0c:	e7af      	b.n	408b6e <__sfvwrite_r+0x152>
  408c0e:	6820      	ldr	r0, [r4, #0]
  408c10:	46b8      	mov	r8, r7
  408c12:	46ba      	mov	sl, r7
  408c14:	46bb      	mov	fp, r7
  408c16:	e755      	b.n	408ac4 <__sfvwrite_r+0xa8>
  408c18:	6962      	ldr	r2, [r4, #20]
  408c1a:	6820      	ldr	r0, [r4, #0]
  408c1c:	6921      	ldr	r1, [r4, #16]
  408c1e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408c22:	eba0 0a01 	sub.w	sl, r0, r1
  408c26:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  408c2a:	f10a 0001 	add.w	r0, sl, #1
  408c2e:	ea4f 0868 	mov.w	r8, r8, asr #1
  408c32:	4438      	add	r0, r7
  408c34:	4540      	cmp	r0, r8
  408c36:	4642      	mov	r2, r8
  408c38:	bf84      	itt	hi
  408c3a:	4680      	movhi	r8, r0
  408c3c:	4642      	movhi	r2, r8
  408c3e:	055b      	lsls	r3, r3, #21
  408c40:	d544      	bpl.n	408ccc <__sfvwrite_r+0x2b0>
  408c42:	4611      	mov	r1, r2
  408c44:	9800      	ldr	r0, [sp, #0]
  408c46:	f000 f92f 	bl	408ea8 <_malloc_r>
  408c4a:	4683      	mov	fp, r0
  408c4c:	2800      	cmp	r0, #0
  408c4e:	d055      	beq.n	408cfc <__sfvwrite_r+0x2e0>
  408c50:	4652      	mov	r2, sl
  408c52:	6921      	ldr	r1, [r4, #16]
  408c54:	f7fb ffa8 	bl	404ba8 <memcpy>
  408c58:	89a3      	ldrh	r3, [r4, #12]
  408c5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  408c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408c62:	81a3      	strh	r3, [r4, #12]
  408c64:	eb0b 000a 	add.w	r0, fp, sl
  408c68:	eba8 030a 	sub.w	r3, r8, sl
  408c6c:	f8c4 b010 	str.w	fp, [r4, #16]
  408c70:	f8c4 8014 	str.w	r8, [r4, #20]
  408c74:	6020      	str	r0, [r4, #0]
  408c76:	60a3      	str	r3, [r4, #8]
  408c78:	46b8      	mov	r8, r7
  408c7a:	46ba      	mov	sl, r7
  408c7c:	46bb      	mov	fp, r7
  408c7e:	e721      	b.n	408ac4 <__sfvwrite_r+0xa8>
  408c80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  408c84:	42b9      	cmp	r1, r7
  408c86:	bf28      	it	cs
  408c88:	4639      	movcs	r1, r7
  408c8a:	464a      	mov	r2, r9
  408c8c:	fb91 f1f3 	sdiv	r1, r1, r3
  408c90:	9800      	ldr	r0, [sp, #0]
  408c92:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408c94:	fb03 f301 	mul.w	r3, r3, r1
  408c98:	69e1      	ldr	r1, [r4, #28]
  408c9a:	47b0      	blx	r6
  408c9c:	f1b0 0a00 	subs.w	sl, r0, #0
  408ca0:	f73f af1b 	bgt.w	408ada <__sfvwrite_r+0xbe>
  408ca4:	e738      	b.n	408b18 <__sfvwrite_r+0xfc>
  408ca6:	461a      	mov	r2, r3
  408ca8:	4629      	mov	r1, r5
  408caa:	9301      	str	r3, [sp, #4]
  408cac:	f000 fc18 	bl	4094e0 <memmove>
  408cb0:	6822      	ldr	r2, [r4, #0]
  408cb2:	9b01      	ldr	r3, [sp, #4]
  408cb4:	9800      	ldr	r0, [sp, #0]
  408cb6:	441a      	add	r2, r3
  408cb8:	6022      	str	r2, [r4, #0]
  408cba:	4621      	mov	r1, r4
  408cbc:	f7ff fc4a 	bl	408554 <_fflush_r>
  408cc0:	9b01      	ldr	r3, [sp, #4]
  408cc2:	2800      	cmp	r0, #0
  408cc4:	f47f af28 	bne.w	408b18 <__sfvwrite_r+0xfc>
  408cc8:	461f      	mov	r7, r3
  408cca:	e750      	b.n	408b6e <__sfvwrite_r+0x152>
  408ccc:	9800      	ldr	r0, [sp, #0]
  408cce:	f000 ff71 	bl	409bb4 <_realloc_r>
  408cd2:	4683      	mov	fp, r0
  408cd4:	2800      	cmp	r0, #0
  408cd6:	d1c5      	bne.n	408c64 <__sfvwrite_r+0x248>
  408cd8:	9d00      	ldr	r5, [sp, #0]
  408cda:	6921      	ldr	r1, [r4, #16]
  408cdc:	4628      	mov	r0, r5
  408cde:	f7ff fdb7 	bl	408850 <_free_r>
  408ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ce6:	220c      	movs	r2, #12
  408ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408cec:	602a      	str	r2, [r5, #0]
  408cee:	e715      	b.n	408b1c <__sfvwrite_r+0x100>
  408cf0:	f106 0901 	add.w	r9, r6, #1
  408cf4:	e722      	b.n	408b3c <__sfvwrite_r+0x120>
  408cf6:	f04f 30ff 	mov.w	r0, #4294967295
  408cfa:	e6bf      	b.n	408a7c <__sfvwrite_r+0x60>
  408cfc:	9a00      	ldr	r2, [sp, #0]
  408cfe:	230c      	movs	r3, #12
  408d00:	6013      	str	r3, [r2, #0]
  408d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408d06:	e709      	b.n	408b1c <__sfvwrite_r+0x100>
  408d08:	7ffffc00 	.word	0x7ffffc00

00408d0c <_fwalk_reent>:
  408d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408d10:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408d14:	d01f      	beq.n	408d56 <_fwalk_reent+0x4a>
  408d16:	4688      	mov	r8, r1
  408d18:	4606      	mov	r6, r0
  408d1a:	f04f 0900 	mov.w	r9, #0
  408d1e:	687d      	ldr	r5, [r7, #4]
  408d20:	68bc      	ldr	r4, [r7, #8]
  408d22:	3d01      	subs	r5, #1
  408d24:	d411      	bmi.n	408d4a <_fwalk_reent+0x3e>
  408d26:	89a3      	ldrh	r3, [r4, #12]
  408d28:	2b01      	cmp	r3, #1
  408d2a:	f105 35ff 	add.w	r5, r5, #4294967295
  408d2e:	d908      	bls.n	408d42 <_fwalk_reent+0x36>
  408d30:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408d34:	3301      	adds	r3, #1
  408d36:	4621      	mov	r1, r4
  408d38:	4630      	mov	r0, r6
  408d3a:	d002      	beq.n	408d42 <_fwalk_reent+0x36>
  408d3c:	47c0      	blx	r8
  408d3e:	ea49 0900 	orr.w	r9, r9, r0
  408d42:	1c6b      	adds	r3, r5, #1
  408d44:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408d48:	d1ed      	bne.n	408d26 <_fwalk_reent+0x1a>
  408d4a:	683f      	ldr	r7, [r7, #0]
  408d4c:	2f00      	cmp	r7, #0
  408d4e:	d1e6      	bne.n	408d1e <_fwalk_reent+0x12>
  408d50:	4648      	mov	r0, r9
  408d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408d56:	46b9      	mov	r9, r7
  408d58:	4648      	mov	r0, r9
  408d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408d5e:	bf00      	nop

00408d60 <__locale_mb_cur_max>:
  408d60:	4b04      	ldr	r3, [pc, #16]	; (408d74 <__locale_mb_cur_max+0x14>)
  408d62:	4a05      	ldr	r2, [pc, #20]	; (408d78 <__locale_mb_cur_max+0x18>)
  408d64:	681b      	ldr	r3, [r3, #0]
  408d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408d68:	2b00      	cmp	r3, #0
  408d6a:	bf08      	it	eq
  408d6c:	4613      	moveq	r3, r2
  408d6e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408d72:	4770      	bx	lr
  408d74:	2040000c 	.word	0x2040000c
  408d78:	2040043c 	.word	0x2040043c

00408d7c <_localeconv_r>:
  408d7c:	4a04      	ldr	r2, [pc, #16]	; (408d90 <_localeconv_r+0x14>)
  408d7e:	4b05      	ldr	r3, [pc, #20]	; (408d94 <_localeconv_r+0x18>)
  408d80:	6812      	ldr	r2, [r2, #0]
  408d82:	6b50      	ldr	r0, [r2, #52]	; 0x34
  408d84:	2800      	cmp	r0, #0
  408d86:	bf08      	it	eq
  408d88:	4618      	moveq	r0, r3
  408d8a:	30f0      	adds	r0, #240	; 0xf0
  408d8c:	4770      	bx	lr
  408d8e:	bf00      	nop
  408d90:	2040000c 	.word	0x2040000c
  408d94:	2040043c 	.word	0x2040043c

00408d98 <__retarget_lock_init_recursive>:
  408d98:	4770      	bx	lr
  408d9a:	bf00      	nop

00408d9c <__retarget_lock_close_recursive>:
  408d9c:	4770      	bx	lr
  408d9e:	bf00      	nop

00408da0 <__retarget_lock_acquire_recursive>:
  408da0:	4770      	bx	lr
  408da2:	bf00      	nop

00408da4 <__retarget_lock_release_recursive>:
  408da4:	4770      	bx	lr
  408da6:	bf00      	nop

00408da8 <__swhatbuf_r>:
  408da8:	b570      	push	{r4, r5, r6, lr}
  408daa:	460c      	mov	r4, r1
  408dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408db0:	2900      	cmp	r1, #0
  408db2:	b090      	sub	sp, #64	; 0x40
  408db4:	4615      	mov	r5, r2
  408db6:	461e      	mov	r6, r3
  408db8:	db14      	blt.n	408de4 <__swhatbuf_r+0x3c>
  408dba:	aa01      	add	r2, sp, #4
  408dbc:	f001 faf0 	bl	40a3a0 <_fstat_r>
  408dc0:	2800      	cmp	r0, #0
  408dc2:	db0f      	blt.n	408de4 <__swhatbuf_r+0x3c>
  408dc4:	9a02      	ldr	r2, [sp, #8]
  408dc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  408dca:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  408dce:	fab2 f282 	clz	r2, r2
  408dd2:	0952      	lsrs	r2, r2, #5
  408dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408dd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  408ddc:	6032      	str	r2, [r6, #0]
  408dde:	602b      	str	r3, [r5, #0]
  408de0:	b010      	add	sp, #64	; 0x40
  408de2:	bd70      	pop	{r4, r5, r6, pc}
  408de4:	89a2      	ldrh	r2, [r4, #12]
  408de6:	2300      	movs	r3, #0
  408de8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  408dec:	6033      	str	r3, [r6, #0]
  408dee:	d004      	beq.n	408dfa <__swhatbuf_r+0x52>
  408df0:	2240      	movs	r2, #64	; 0x40
  408df2:	4618      	mov	r0, r3
  408df4:	602a      	str	r2, [r5, #0]
  408df6:	b010      	add	sp, #64	; 0x40
  408df8:	bd70      	pop	{r4, r5, r6, pc}
  408dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408dfe:	602b      	str	r3, [r5, #0]
  408e00:	b010      	add	sp, #64	; 0x40
  408e02:	bd70      	pop	{r4, r5, r6, pc}

00408e04 <__smakebuf_r>:
  408e04:	898a      	ldrh	r2, [r1, #12]
  408e06:	0792      	lsls	r2, r2, #30
  408e08:	460b      	mov	r3, r1
  408e0a:	d506      	bpl.n	408e1a <__smakebuf_r+0x16>
  408e0c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408e10:	2101      	movs	r1, #1
  408e12:	601a      	str	r2, [r3, #0]
  408e14:	611a      	str	r2, [r3, #16]
  408e16:	6159      	str	r1, [r3, #20]
  408e18:	4770      	bx	lr
  408e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
  408e1c:	b083      	sub	sp, #12
  408e1e:	ab01      	add	r3, sp, #4
  408e20:	466a      	mov	r2, sp
  408e22:	460c      	mov	r4, r1
  408e24:	4606      	mov	r6, r0
  408e26:	f7ff ffbf 	bl	408da8 <__swhatbuf_r>
  408e2a:	9900      	ldr	r1, [sp, #0]
  408e2c:	4605      	mov	r5, r0
  408e2e:	4630      	mov	r0, r6
  408e30:	f000 f83a 	bl	408ea8 <_malloc_r>
  408e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408e38:	b1d8      	cbz	r0, 408e72 <__smakebuf_r+0x6e>
  408e3a:	9a01      	ldr	r2, [sp, #4]
  408e3c:	4f15      	ldr	r7, [pc, #84]	; (408e94 <__smakebuf_r+0x90>)
  408e3e:	9900      	ldr	r1, [sp, #0]
  408e40:	63f7      	str	r7, [r6, #60]	; 0x3c
  408e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408e46:	81a3      	strh	r3, [r4, #12]
  408e48:	6020      	str	r0, [r4, #0]
  408e4a:	6120      	str	r0, [r4, #16]
  408e4c:	6161      	str	r1, [r4, #20]
  408e4e:	b91a      	cbnz	r2, 408e58 <__smakebuf_r+0x54>
  408e50:	432b      	orrs	r3, r5
  408e52:	81a3      	strh	r3, [r4, #12]
  408e54:	b003      	add	sp, #12
  408e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408e58:	4630      	mov	r0, r6
  408e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408e5e:	f001 fab3 	bl	40a3c8 <_isatty_r>
  408e62:	b1a0      	cbz	r0, 408e8e <__smakebuf_r+0x8a>
  408e64:	89a3      	ldrh	r3, [r4, #12]
  408e66:	f023 0303 	bic.w	r3, r3, #3
  408e6a:	f043 0301 	orr.w	r3, r3, #1
  408e6e:	b21b      	sxth	r3, r3
  408e70:	e7ee      	b.n	408e50 <__smakebuf_r+0x4c>
  408e72:	059a      	lsls	r2, r3, #22
  408e74:	d4ee      	bmi.n	408e54 <__smakebuf_r+0x50>
  408e76:	f023 0303 	bic.w	r3, r3, #3
  408e7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408e7e:	f043 0302 	orr.w	r3, r3, #2
  408e82:	2101      	movs	r1, #1
  408e84:	81a3      	strh	r3, [r4, #12]
  408e86:	6022      	str	r2, [r4, #0]
  408e88:	6122      	str	r2, [r4, #16]
  408e8a:	6161      	str	r1, [r4, #20]
  408e8c:	e7e2      	b.n	408e54 <__smakebuf_r+0x50>
  408e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408e92:	e7dd      	b.n	408e50 <__smakebuf_r+0x4c>
  408e94:	004085a9 	.word	0x004085a9

00408e98 <malloc>:
  408e98:	4b02      	ldr	r3, [pc, #8]	; (408ea4 <malloc+0xc>)
  408e9a:	4601      	mov	r1, r0
  408e9c:	6818      	ldr	r0, [r3, #0]
  408e9e:	f000 b803 	b.w	408ea8 <_malloc_r>
  408ea2:	bf00      	nop
  408ea4:	2040000c 	.word	0x2040000c

00408ea8 <_malloc_r>:
  408ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408eac:	f101 060b 	add.w	r6, r1, #11
  408eb0:	2e16      	cmp	r6, #22
  408eb2:	b083      	sub	sp, #12
  408eb4:	4605      	mov	r5, r0
  408eb6:	f240 809e 	bls.w	408ff6 <_malloc_r+0x14e>
  408eba:	f036 0607 	bics.w	r6, r6, #7
  408ebe:	f100 80bd 	bmi.w	40903c <_malloc_r+0x194>
  408ec2:	42b1      	cmp	r1, r6
  408ec4:	f200 80ba 	bhi.w	40903c <_malloc_r+0x194>
  408ec8:	f000 fb6e 	bl	4095a8 <__malloc_lock>
  408ecc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  408ed0:	f0c0 8293 	bcc.w	4093fa <_malloc_r+0x552>
  408ed4:	0a73      	lsrs	r3, r6, #9
  408ed6:	f000 80b8 	beq.w	40904a <_malloc_r+0x1a2>
  408eda:	2b04      	cmp	r3, #4
  408edc:	f200 8179 	bhi.w	4091d2 <_malloc_r+0x32a>
  408ee0:	09b3      	lsrs	r3, r6, #6
  408ee2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  408ee6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  408eea:	00c3      	lsls	r3, r0, #3
  408eec:	4fbf      	ldr	r7, [pc, #764]	; (4091ec <_malloc_r+0x344>)
  408eee:	443b      	add	r3, r7
  408ef0:	f1a3 0108 	sub.w	r1, r3, #8
  408ef4:	685c      	ldr	r4, [r3, #4]
  408ef6:	42a1      	cmp	r1, r4
  408ef8:	d106      	bne.n	408f08 <_malloc_r+0x60>
  408efa:	e00c      	b.n	408f16 <_malloc_r+0x6e>
  408efc:	2a00      	cmp	r2, #0
  408efe:	f280 80aa 	bge.w	409056 <_malloc_r+0x1ae>
  408f02:	68e4      	ldr	r4, [r4, #12]
  408f04:	42a1      	cmp	r1, r4
  408f06:	d006      	beq.n	408f16 <_malloc_r+0x6e>
  408f08:	6863      	ldr	r3, [r4, #4]
  408f0a:	f023 0303 	bic.w	r3, r3, #3
  408f0e:	1b9a      	subs	r2, r3, r6
  408f10:	2a0f      	cmp	r2, #15
  408f12:	ddf3      	ble.n	408efc <_malloc_r+0x54>
  408f14:	4670      	mov	r0, lr
  408f16:	693c      	ldr	r4, [r7, #16]
  408f18:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 409200 <_malloc_r+0x358>
  408f1c:	4574      	cmp	r4, lr
  408f1e:	f000 81ab 	beq.w	409278 <_malloc_r+0x3d0>
  408f22:	6863      	ldr	r3, [r4, #4]
  408f24:	f023 0303 	bic.w	r3, r3, #3
  408f28:	1b9a      	subs	r2, r3, r6
  408f2a:	2a0f      	cmp	r2, #15
  408f2c:	f300 8190 	bgt.w	409250 <_malloc_r+0x3a8>
  408f30:	2a00      	cmp	r2, #0
  408f32:	f8c7 e014 	str.w	lr, [r7, #20]
  408f36:	f8c7 e010 	str.w	lr, [r7, #16]
  408f3a:	f280 809d 	bge.w	409078 <_malloc_r+0x1d0>
  408f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408f42:	f080 8161 	bcs.w	409208 <_malloc_r+0x360>
  408f46:	08db      	lsrs	r3, r3, #3
  408f48:	f103 0c01 	add.w	ip, r3, #1
  408f4c:	1099      	asrs	r1, r3, #2
  408f4e:	687a      	ldr	r2, [r7, #4]
  408f50:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  408f54:	f8c4 8008 	str.w	r8, [r4, #8]
  408f58:	2301      	movs	r3, #1
  408f5a:	408b      	lsls	r3, r1
  408f5c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  408f60:	4313      	orrs	r3, r2
  408f62:	3908      	subs	r1, #8
  408f64:	60e1      	str	r1, [r4, #12]
  408f66:	607b      	str	r3, [r7, #4]
  408f68:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  408f6c:	f8c8 400c 	str.w	r4, [r8, #12]
  408f70:	1082      	asrs	r2, r0, #2
  408f72:	2401      	movs	r4, #1
  408f74:	4094      	lsls	r4, r2
  408f76:	429c      	cmp	r4, r3
  408f78:	f200 808b 	bhi.w	409092 <_malloc_r+0x1ea>
  408f7c:	421c      	tst	r4, r3
  408f7e:	d106      	bne.n	408f8e <_malloc_r+0xe6>
  408f80:	f020 0003 	bic.w	r0, r0, #3
  408f84:	0064      	lsls	r4, r4, #1
  408f86:	421c      	tst	r4, r3
  408f88:	f100 0004 	add.w	r0, r0, #4
  408f8c:	d0fa      	beq.n	408f84 <_malloc_r+0xdc>
  408f8e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  408f92:	46cc      	mov	ip, r9
  408f94:	4680      	mov	r8, r0
  408f96:	f8dc 300c 	ldr.w	r3, [ip, #12]
  408f9a:	459c      	cmp	ip, r3
  408f9c:	d107      	bne.n	408fae <_malloc_r+0x106>
  408f9e:	e16d      	b.n	40927c <_malloc_r+0x3d4>
  408fa0:	2a00      	cmp	r2, #0
  408fa2:	f280 817b 	bge.w	40929c <_malloc_r+0x3f4>
  408fa6:	68db      	ldr	r3, [r3, #12]
  408fa8:	459c      	cmp	ip, r3
  408faa:	f000 8167 	beq.w	40927c <_malloc_r+0x3d4>
  408fae:	6859      	ldr	r1, [r3, #4]
  408fb0:	f021 0103 	bic.w	r1, r1, #3
  408fb4:	1b8a      	subs	r2, r1, r6
  408fb6:	2a0f      	cmp	r2, #15
  408fb8:	ddf2      	ble.n	408fa0 <_malloc_r+0xf8>
  408fba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  408fbe:	f8d3 8008 	ldr.w	r8, [r3, #8]
  408fc2:	9300      	str	r3, [sp, #0]
  408fc4:	199c      	adds	r4, r3, r6
  408fc6:	4628      	mov	r0, r5
  408fc8:	f046 0601 	orr.w	r6, r6, #1
  408fcc:	f042 0501 	orr.w	r5, r2, #1
  408fd0:	605e      	str	r6, [r3, #4]
  408fd2:	f8c8 c00c 	str.w	ip, [r8, #12]
  408fd6:	f8cc 8008 	str.w	r8, [ip, #8]
  408fda:	617c      	str	r4, [r7, #20]
  408fdc:	613c      	str	r4, [r7, #16]
  408fde:	f8c4 e00c 	str.w	lr, [r4, #12]
  408fe2:	f8c4 e008 	str.w	lr, [r4, #8]
  408fe6:	6065      	str	r5, [r4, #4]
  408fe8:	505a      	str	r2, [r3, r1]
  408fea:	f000 fae3 	bl	4095b4 <__malloc_unlock>
  408fee:	9b00      	ldr	r3, [sp, #0]
  408ff0:	f103 0408 	add.w	r4, r3, #8
  408ff4:	e01e      	b.n	409034 <_malloc_r+0x18c>
  408ff6:	2910      	cmp	r1, #16
  408ff8:	d820      	bhi.n	40903c <_malloc_r+0x194>
  408ffa:	f000 fad5 	bl	4095a8 <__malloc_lock>
  408ffe:	2610      	movs	r6, #16
  409000:	2318      	movs	r3, #24
  409002:	2002      	movs	r0, #2
  409004:	4f79      	ldr	r7, [pc, #484]	; (4091ec <_malloc_r+0x344>)
  409006:	443b      	add	r3, r7
  409008:	f1a3 0208 	sub.w	r2, r3, #8
  40900c:	685c      	ldr	r4, [r3, #4]
  40900e:	4294      	cmp	r4, r2
  409010:	f000 813d 	beq.w	40928e <_malloc_r+0x3e6>
  409014:	6863      	ldr	r3, [r4, #4]
  409016:	68e1      	ldr	r1, [r4, #12]
  409018:	68a6      	ldr	r6, [r4, #8]
  40901a:	f023 0303 	bic.w	r3, r3, #3
  40901e:	4423      	add	r3, r4
  409020:	4628      	mov	r0, r5
  409022:	685a      	ldr	r2, [r3, #4]
  409024:	60f1      	str	r1, [r6, #12]
  409026:	f042 0201 	orr.w	r2, r2, #1
  40902a:	608e      	str	r6, [r1, #8]
  40902c:	605a      	str	r2, [r3, #4]
  40902e:	f000 fac1 	bl	4095b4 <__malloc_unlock>
  409032:	3408      	adds	r4, #8
  409034:	4620      	mov	r0, r4
  409036:	b003      	add	sp, #12
  409038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40903c:	2400      	movs	r4, #0
  40903e:	230c      	movs	r3, #12
  409040:	4620      	mov	r0, r4
  409042:	602b      	str	r3, [r5, #0]
  409044:	b003      	add	sp, #12
  409046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40904a:	2040      	movs	r0, #64	; 0x40
  40904c:	f44f 7300 	mov.w	r3, #512	; 0x200
  409050:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  409054:	e74a      	b.n	408eec <_malloc_r+0x44>
  409056:	4423      	add	r3, r4
  409058:	68e1      	ldr	r1, [r4, #12]
  40905a:	685a      	ldr	r2, [r3, #4]
  40905c:	68a6      	ldr	r6, [r4, #8]
  40905e:	f042 0201 	orr.w	r2, r2, #1
  409062:	60f1      	str	r1, [r6, #12]
  409064:	4628      	mov	r0, r5
  409066:	608e      	str	r6, [r1, #8]
  409068:	605a      	str	r2, [r3, #4]
  40906a:	f000 faa3 	bl	4095b4 <__malloc_unlock>
  40906e:	3408      	adds	r4, #8
  409070:	4620      	mov	r0, r4
  409072:	b003      	add	sp, #12
  409074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409078:	4423      	add	r3, r4
  40907a:	4628      	mov	r0, r5
  40907c:	685a      	ldr	r2, [r3, #4]
  40907e:	f042 0201 	orr.w	r2, r2, #1
  409082:	605a      	str	r2, [r3, #4]
  409084:	f000 fa96 	bl	4095b4 <__malloc_unlock>
  409088:	3408      	adds	r4, #8
  40908a:	4620      	mov	r0, r4
  40908c:	b003      	add	sp, #12
  40908e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409092:	68bc      	ldr	r4, [r7, #8]
  409094:	6863      	ldr	r3, [r4, #4]
  409096:	f023 0803 	bic.w	r8, r3, #3
  40909a:	45b0      	cmp	r8, r6
  40909c:	d304      	bcc.n	4090a8 <_malloc_r+0x200>
  40909e:	eba8 0306 	sub.w	r3, r8, r6
  4090a2:	2b0f      	cmp	r3, #15
  4090a4:	f300 8085 	bgt.w	4091b2 <_malloc_r+0x30a>
  4090a8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 409204 <_malloc_r+0x35c>
  4090ac:	4b50      	ldr	r3, [pc, #320]	; (4091f0 <_malloc_r+0x348>)
  4090ae:	f8d9 2000 	ldr.w	r2, [r9]
  4090b2:	681b      	ldr	r3, [r3, #0]
  4090b4:	3201      	adds	r2, #1
  4090b6:	4433      	add	r3, r6
  4090b8:	eb04 0a08 	add.w	sl, r4, r8
  4090bc:	f000 8155 	beq.w	40936a <_malloc_r+0x4c2>
  4090c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4090c4:	330f      	adds	r3, #15
  4090c6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4090ca:	f02b 0b0f 	bic.w	fp, fp, #15
  4090ce:	4659      	mov	r1, fp
  4090d0:	4628      	mov	r0, r5
  4090d2:	f000 ff15 	bl	409f00 <_sbrk_r>
  4090d6:	1c41      	adds	r1, r0, #1
  4090d8:	4602      	mov	r2, r0
  4090da:	f000 80fc 	beq.w	4092d6 <_malloc_r+0x42e>
  4090de:	4582      	cmp	sl, r0
  4090e0:	f200 80f7 	bhi.w	4092d2 <_malloc_r+0x42a>
  4090e4:	4b43      	ldr	r3, [pc, #268]	; (4091f4 <_malloc_r+0x34c>)
  4090e6:	6819      	ldr	r1, [r3, #0]
  4090e8:	4459      	add	r1, fp
  4090ea:	6019      	str	r1, [r3, #0]
  4090ec:	f000 814d 	beq.w	40938a <_malloc_r+0x4e2>
  4090f0:	f8d9 0000 	ldr.w	r0, [r9]
  4090f4:	3001      	adds	r0, #1
  4090f6:	bf1b      	ittet	ne
  4090f8:	eba2 0a0a 	subne.w	sl, r2, sl
  4090fc:	4451      	addne	r1, sl
  4090fe:	f8c9 2000 	streq.w	r2, [r9]
  409102:	6019      	strne	r1, [r3, #0]
  409104:	f012 0107 	ands.w	r1, r2, #7
  409108:	f000 8115 	beq.w	409336 <_malloc_r+0x48e>
  40910c:	f1c1 0008 	rsb	r0, r1, #8
  409110:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  409114:	4402      	add	r2, r0
  409116:	3108      	adds	r1, #8
  409118:	eb02 090b 	add.w	r9, r2, fp
  40911c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  409120:	eba1 0909 	sub.w	r9, r1, r9
  409124:	4649      	mov	r1, r9
  409126:	4628      	mov	r0, r5
  409128:	9301      	str	r3, [sp, #4]
  40912a:	9200      	str	r2, [sp, #0]
  40912c:	f000 fee8 	bl	409f00 <_sbrk_r>
  409130:	1c43      	adds	r3, r0, #1
  409132:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409136:	f000 8143 	beq.w	4093c0 <_malloc_r+0x518>
  40913a:	1a80      	subs	r0, r0, r2
  40913c:	4448      	add	r0, r9
  40913e:	f040 0001 	orr.w	r0, r0, #1
  409142:	6819      	ldr	r1, [r3, #0]
  409144:	60ba      	str	r2, [r7, #8]
  409146:	4449      	add	r1, r9
  409148:	42bc      	cmp	r4, r7
  40914a:	6050      	str	r0, [r2, #4]
  40914c:	6019      	str	r1, [r3, #0]
  40914e:	d017      	beq.n	409180 <_malloc_r+0x2d8>
  409150:	f1b8 0f0f 	cmp.w	r8, #15
  409154:	f240 80fb 	bls.w	40934e <_malloc_r+0x4a6>
  409158:	6860      	ldr	r0, [r4, #4]
  40915a:	f1a8 020c 	sub.w	r2, r8, #12
  40915e:	f022 0207 	bic.w	r2, r2, #7
  409162:	eb04 0e02 	add.w	lr, r4, r2
  409166:	f000 0001 	and.w	r0, r0, #1
  40916a:	f04f 0c05 	mov.w	ip, #5
  40916e:	4310      	orrs	r0, r2
  409170:	2a0f      	cmp	r2, #15
  409172:	6060      	str	r0, [r4, #4]
  409174:	f8ce c004 	str.w	ip, [lr, #4]
  409178:	f8ce c008 	str.w	ip, [lr, #8]
  40917c:	f200 8117 	bhi.w	4093ae <_malloc_r+0x506>
  409180:	4b1d      	ldr	r3, [pc, #116]	; (4091f8 <_malloc_r+0x350>)
  409182:	68bc      	ldr	r4, [r7, #8]
  409184:	681a      	ldr	r2, [r3, #0]
  409186:	4291      	cmp	r1, r2
  409188:	bf88      	it	hi
  40918a:	6019      	strhi	r1, [r3, #0]
  40918c:	4b1b      	ldr	r3, [pc, #108]	; (4091fc <_malloc_r+0x354>)
  40918e:	681a      	ldr	r2, [r3, #0]
  409190:	4291      	cmp	r1, r2
  409192:	6862      	ldr	r2, [r4, #4]
  409194:	bf88      	it	hi
  409196:	6019      	strhi	r1, [r3, #0]
  409198:	f022 0203 	bic.w	r2, r2, #3
  40919c:	4296      	cmp	r6, r2
  40919e:	eba2 0306 	sub.w	r3, r2, r6
  4091a2:	d801      	bhi.n	4091a8 <_malloc_r+0x300>
  4091a4:	2b0f      	cmp	r3, #15
  4091a6:	dc04      	bgt.n	4091b2 <_malloc_r+0x30a>
  4091a8:	4628      	mov	r0, r5
  4091aa:	f000 fa03 	bl	4095b4 <__malloc_unlock>
  4091ae:	2400      	movs	r4, #0
  4091b0:	e740      	b.n	409034 <_malloc_r+0x18c>
  4091b2:	19a2      	adds	r2, r4, r6
  4091b4:	f043 0301 	orr.w	r3, r3, #1
  4091b8:	f046 0601 	orr.w	r6, r6, #1
  4091bc:	6066      	str	r6, [r4, #4]
  4091be:	4628      	mov	r0, r5
  4091c0:	60ba      	str	r2, [r7, #8]
  4091c2:	6053      	str	r3, [r2, #4]
  4091c4:	f000 f9f6 	bl	4095b4 <__malloc_unlock>
  4091c8:	3408      	adds	r4, #8
  4091ca:	4620      	mov	r0, r4
  4091cc:	b003      	add	sp, #12
  4091ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4091d2:	2b14      	cmp	r3, #20
  4091d4:	d971      	bls.n	4092ba <_malloc_r+0x412>
  4091d6:	2b54      	cmp	r3, #84	; 0x54
  4091d8:	f200 80a3 	bhi.w	409322 <_malloc_r+0x47a>
  4091dc:	0b33      	lsrs	r3, r6, #12
  4091de:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4091e2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4091e6:	00c3      	lsls	r3, r0, #3
  4091e8:	e680      	b.n	408eec <_malloc_r+0x44>
  4091ea:	bf00      	nop
  4091ec:	204005a8 	.word	0x204005a8
  4091f0:	2040c584 	.word	0x2040c584
  4091f4:	2040c554 	.word	0x2040c554
  4091f8:	2040c57c 	.word	0x2040c57c
  4091fc:	2040c580 	.word	0x2040c580
  409200:	204005b0 	.word	0x204005b0
  409204:	204009b0 	.word	0x204009b0
  409208:	0a5a      	lsrs	r2, r3, #9
  40920a:	2a04      	cmp	r2, #4
  40920c:	d95b      	bls.n	4092c6 <_malloc_r+0x41e>
  40920e:	2a14      	cmp	r2, #20
  409210:	f200 80ae 	bhi.w	409370 <_malloc_r+0x4c8>
  409214:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  409218:	00c9      	lsls	r1, r1, #3
  40921a:	325b      	adds	r2, #91	; 0x5b
  40921c:	eb07 0c01 	add.w	ip, r7, r1
  409220:	5879      	ldr	r1, [r7, r1]
  409222:	f1ac 0c08 	sub.w	ip, ip, #8
  409226:	458c      	cmp	ip, r1
  409228:	f000 8088 	beq.w	40933c <_malloc_r+0x494>
  40922c:	684a      	ldr	r2, [r1, #4]
  40922e:	f022 0203 	bic.w	r2, r2, #3
  409232:	4293      	cmp	r3, r2
  409234:	d273      	bcs.n	40931e <_malloc_r+0x476>
  409236:	6889      	ldr	r1, [r1, #8]
  409238:	458c      	cmp	ip, r1
  40923a:	d1f7      	bne.n	40922c <_malloc_r+0x384>
  40923c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  409240:	687b      	ldr	r3, [r7, #4]
  409242:	60e2      	str	r2, [r4, #12]
  409244:	f8c4 c008 	str.w	ip, [r4, #8]
  409248:	6094      	str	r4, [r2, #8]
  40924a:	f8cc 400c 	str.w	r4, [ip, #12]
  40924e:	e68f      	b.n	408f70 <_malloc_r+0xc8>
  409250:	19a1      	adds	r1, r4, r6
  409252:	f046 0c01 	orr.w	ip, r6, #1
  409256:	f042 0601 	orr.w	r6, r2, #1
  40925a:	f8c4 c004 	str.w	ip, [r4, #4]
  40925e:	4628      	mov	r0, r5
  409260:	6179      	str	r1, [r7, #20]
  409262:	6139      	str	r1, [r7, #16]
  409264:	f8c1 e00c 	str.w	lr, [r1, #12]
  409268:	f8c1 e008 	str.w	lr, [r1, #8]
  40926c:	604e      	str	r6, [r1, #4]
  40926e:	50e2      	str	r2, [r4, r3]
  409270:	f000 f9a0 	bl	4095b4 <__malloc_unlock>
  409274:	3408      	adds	r4, #8
  409276:	e6dd      	b.n	409034 <_malloc_r+0x18c>
  409278:	687b      	ldr	r3, [r7, #4]
  40927a:	e679      	b.n	408f70 <_malloc_r+0xc8>
  40927c:	f108 0801 	add.w	r8, r8, #1
  409280:	f018 0f03 	tst.w	r8, #3
  409284:	f10c 0c08 	add.w	ip, ip, #8
  409288:	f47f ae85 	bne.w	408f96 <_malloc_r+0xee>
  40928c:	e02d      	b.n	4092ea <_malloc_r+0x442>
  40928e:	68dc      	ldr	r4, [r3, #12]
  409290:	42a3      	cmp	r3, r4
  409292:	bf08      	it	eq
  409294:	3002      	addeq	r0, #2
  409296:	f43f ae3e 	beq.w	408f16 <_malloc_r+0x6e>
  40929a:	e6bb      	b.n	409014 <_malloc_r+0x16c>
  40929c:	4419      	add	r1, r3
  40929e:	461c      	mov	r4, r3
  4092a0:	684a      	ldr	r2, [r1, #4]
  4092a2:	68db      	ldr	r3, [r3, #12]
  4092a4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4092a8:	f042 0201 	orr.w	r2, r2, #1
  4092ac:	604a      	str	r2, [r1, #4]
  4092ae:	4628      	mov	r0, r5
  4092b0:	60f3      	str	r3, [r6, #12]
  4092b2:	609e      	str	r6, [r3, #8]
  4092b4:	f000 f97e 	bl	4095b4 <__malloc_unlock>
  4092b8:	e6bc      	b.n	409034 <_malloc_r+0x18c>
  4092ba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4092be:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4092c2:	00c3      	lsls	r3, r0, #3
  4092c4:	e612      	b.n	408eec <_malloc_r+0x44>
  4092c6:	099a      	lsrs	r2, r3, #6
  4092c8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4092cc:	00c9      	lsls	r1, r1, #3
  4092ce:	3238      	adds	r2, #56	; 0x38
  4092d0:	e7a4      	b.n	40921c <_malloc_r+0x374>
  4092d2:	42bc      	cmp	r4, r7
  4092d4:	d054      	beq.n	409380 <_malloc_r+0x4d8>
  4092d6:	68bc      	ldr	r4, [r7, #8]
  4092d8:	6862      	ldr	r2, [r4, #4]
  4092da:	f022 0203 	bic.w	r2, r2, #3
  4092de:	e75d      	b.n	40919c <_malloc_r+0x2f4>
  4092e0:	f859 3908 	ldr.w	r3, [r9], #-8
  4092e4:	4599      	cmp	r9, r3
  4092e6:	f040 8086 	bne.w	4093f6 <_malloc_r+0x54e>
  4092ea:	f010 0f03 	tst.w	r0, #3
  4092ee:	f100 30ff 	add.w	r0, r0, #4294967295
  4092f2:	d1f5      	bne.n	4092e0 <_malloc_r+0x438>
  4092f4:	687b      	ldr	r3, [r7, #4]
  4092f6:	ea23 0304 	bic.w	r3, r3, r4
  4092fa:	607b      	str	r3, [r7, #4]
  4092fc:	0064      	lsls	r4, r4, #1
  4092fe:	429c      	cmp	r4, r3
  409300:	f63f aec7 	bhi.w	409092 <_malloc_r+0x1ea>
  409304:	2c00      	cmp	r4, #0
  409306:	f43f aec4 	beq.w	409092 <_malloc_r+0x1ea>
  40930a:	421c      	tst	r4, r3
  40930c:	4640      	mov	r0, r8
  40930e:	f47f ae3e 	bne.w	408f8e <_malloc_r+0xe6>
  409312:	0064      	lsls	r4, r4, #1
  409314:	421c      	tst	r4, r3
  409316:	f100 0004 	add.w	r0, r0, #4
  40931a:	d0fa      	beq.n	409312 <_malloc_r+0x46a>
  40931c:	e637      	b.n	408f8e <_malloc_r+0xe6>
  40931e:	468c      	mov	ip, r1
  409320:	e78c      	b.n	40923c <_malloc_r+0x394>
  409322:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  409326:	d815      	bhi.n	409354 <_malloc_r+0x4ac>
  409328:	0bf3      	lsrs	r3, r6, #15
  40932a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40932e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  409332:	00c3      	lsls	r3, r0, #3
  409334:	e5da      	b.n	408eec <_malloc_r+0x44>
  409336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40933a:	e6ed      	b.n	409118 <_malloc_r+0x270>
  40933c:	687b      	ldr	r3, [r7, #4]
  40933e:	1092      	asrs	r2, r2, #2
  409340:	2101      	movs	r1, #1
  409342:	fa01 f202 	lsl.w	r2, r1, r2
  409346:	4313      	orrs	r3, r2
  409348:	607b      	str	r3, [r7, #4]
  40934a:	4662      	mov	r2, ip
  40934c:	e779      	b.n	409242 <_malloc_r+0x39a>
  40934e:	2301      	movs	r3, #1
  409350:	6053      	str	r3, [r2, #4]
  409352:	e729      	b.n	4091a8 <_malloc_r+0x300>
  409354:	f240 5254 	movw	r2, #1364	; 0x554
  409358:	4293      	cmp	r3, r2
  40935a:	d822      	bhi.n	4093a2 <_malloc_r+0x4fa>
  40935c:	0cb3      	lsrs	r3, r6, #18
  40935e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  409362:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  409366:	00c3      	lsls	r3, r0, #3
  409368:	e5c0      	b.n	408eec <_malloc_r+0x44>
  40936a:	f103 0b10 	add.w	fp, r3, #16
  40936e:	e6ae      	b.n	4090ce <_malloc_r+0x226>
  409370:	2a54      	cmp	r2, #84	; 0x54
  409372:	d829      	bhi.n	4093c8 <_malloc_r+0x520>
  409374:	0b1a      	lsrs	r2, r3, #12
  409376:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40937a:	00c9      	lsls	r1, r1, #3
  40937c:	326e      	adds	r2, #110	; 0x6e
  40937e:	e74d      	b.n	40921c <_malloc_r+0x374>
  409380:	4b20      	ldr	r3, [pc, #128]	; (409404 <_malloc_r+0x55c>)
  409382:	6819      	ldr	r1, [r3, #0]
  409384:	4459      	add	r1, fp
  409386:	6019      	str	r1, [r3, #0]
  409388:	e6b2      	b.n	4090f0 <_malloc_r+0x248>
  40938a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40938e:	2800      	cmp	r0, #0
  409390:	f47f aeae 	bne.w	4090f0 <_malloc_r+0x248>
  409394:	eb08 030b 	add.w	r3, r8, fp
  409398:	68ba      	ldr	r2, [r7, #8]
  40939a:	f043 0301 	orr.w	r3, r3, #1
  40939e:	6053      	str	r3, [r2, #4]
  4093a0:	e6ee      	b.n	409180 <_malloc_r+0x2d8>
  4093a2:	207f      	movs	r0, #127	; 0x7f
  4093a4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4093a8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4093ac:	e59e      	b.n	408eec <_malloc_r+0x44>
  4093ae:	f104 0108 	add.w	r1, r4, #8
  4093b2:	4628      	mov	r0, r5
  4093b4:	9300      	str	r3, [sp, #0]
  4093b6:	f7ff fa4b 	bl	408850 <_free_r>
  4093ba:	9b00      	ldr	r3, [sp, #0]
  4093bc:	6819      	ldr	r1, [r3, #0]
  4093be:	e6df      	b.n	409180 <_malloc_r+0x2d8>
  4093c0:	2001      	movs	r0, #1
  4093c2:	f04f 0900 	mov.w	r9, #0
  4093c6:	e6bc      	b.n	409142 <_malloc_r+0x29a>
  4093c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4093cc:	d805      	bhi.n	4093da <_malloc_r+0x532>
  4093ce:	0bda      	lsrs	r2, r3, #15
  4093d0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4093d4:	00c9      	lsls	r1, r1, #3
  4093d6:	3277      	adds	r2, #119	; 0x77
  4093d8:	e720      	b.n	40921c <_malloc_r+0x374>
  4093da:	f240 5154 	movw	r1, #1364	; 0x554
  4093de:	428a      	cmp	r2, r1
  4093e0:	d805      	bhi.n	4093ee <_malloc_r+0x546>
  4093e2:	0c9a      	lsrs	r2, r3, #18
  4093e4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4093e8:	00c9      	lsls	r1, r1, #3
  4093ea:	327c      	adds	r2, #124	; 0x7c
  4093ec:	e716      	b.n	40921c <_malloc_r+0x374>
  4093ee:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4093f2:	227e      	movs	r2, #126	; 0x7e
  4093f4:	e712      	b.n	40921c <_malloc_r+0x374>
  4093f6:	687b      	ldr	r3, [r7, #4]
  4093f8:	e780      	b.n	4092fc <_malloc_r+0x454>
  4093fa:	08f0      	lsrs	r0, r6, #3
  4093fc:	f106 0308 	add.w	r3, r6, #8
  409400:	e600      	b.n	409004 <_malloc_r+0x15c>
  409402:	bf00      	nop
  409404:	2040c554 	.word	0x2040c554

00409408 <__ascii_mbtowc>:
  409408:	b082      	sub	sp, #8
  40940a:	b149      	cbz	r1, 409420 <__ascii_mbtowc+0x18>
  40940c:	b15a      	cbz	r2, 409426 <__ascii_mbtowc+0x1e>
  40940e:	b16b      	cbz	r3, 40942c <__ascii_mbtowc+0x24>
  409410:	7813      	ldrb	r3, [r2, #0]
  409412:	600b      	str	r3, [r1, #0]
  409414:	7812      	ldrb	r2, [r2, #0]
  409416:	1c10      	adds	r0, r2, #0
  409418:	bf18      	it	ne
  40941a:	2001      	movne	r0, #1
  40941c:	b002      	add	sp, #8
  40941e:	4770      	bx	lr
  409420:	a901      	add	r1, sp, #4
  409422:	2a00      	cmp	r2, #0
  409424:	d1f3      	bne.n	40940e <__ascii_mbtowc+0x6>
  409426:	4610      	mov	r0, r2
  409428:	b002      	add	sp, #8
  40942a:	4770      	bx	lr
  40942c:	f06f 0001 	mvn.w	r0, #1
  409430:	e7f4      	b.n	40941c <__ascii_mbtowc+0x14>
  409432:	bf00      	nop
	...

00409440 <memchr>:
  409440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409444:	2a10      	cmp	r2, #16
  409446:	db2b      	blt.n	4094a0 <memchr+0x60>
  409448:	f010 0f07 	tst.w	r0, #7
  40944c:	d008      	beq.n	409460 <memchr+0x20>
  40944e:	f810 3b01 	ldrb.w	r3, [r0], #1
  409452:	3a01      	subs	r2, #1
  409454:	428b      	cmp	r3, r1
  409456:	d02d      	beq.n	4094b4 <memchr+0x74>
  409458:	f010 0f07 	tst.w	r0, #7
  40945c:	b342      	cbz	r2, 4094b0 <memchr+0x70>
  40945e:	d1f6      	bne.n	40944e <memchr+0xe>
  409460:	b4f0      	push	{r4, r5, r6, r7}
  409462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40946a:	f022 0407 	bic.w	r4, r2, #7
  40946e:	f07f 0700 	mvns.w	r7, #0
  409472:	2300      	movs	r3, #0
  409474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409478:	3c08      	subs	r4, #8
  40947a:	ea85 0501 	eor.w	r5, r5, r1
  40947e:	ea86 0601 	eor.w	r6, r6, r1
  409482:	fa85 f547 	uadd8	r5, r5, r7
  409486:	faa3 f587 	sel	r5, r3, r7
  40948a:	fa86 f647 	uadd8	r6, r6, r7
  40948e:	faa5 f687 	sel	r6, r5, r7
  409492:	b98e      	cbnz	r6, 4094b8 <memchr+0x78>
  409494:	d1ee      	bne.n	409474 <memchr+0x34>
  409496:	bcf0      	pop	{r4, r5, r6, r7}
  409498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40949c:	f002 0207 	and.w	r2, r2, #7
  4094a0:	b132      	cbz	r2, 4094b0 <memchr+0x70>
  4094a2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4094a6:	3a01      	subs	r2, #1
  4094a8:	ea83 0301 	eor.w	r3, r3, r1
  4094ac:	b113      	cbz	r3, 4094b4 <memchr+0x74>
  4094ae:	d1f8      	bne.n	4094a2 <memchr+0x62>
  4094b0:	2000      	movs	r0, #0
  4094b2:	4770      	bx	lr
  4094b4:	3801      	subs	r0, #1
  4094b6:	4770      	bx	lr
  4094b8:	2d00      	cmp	r5, #0
  4094ba:	bf06      	itte	eq
  4094bc:	4635      	moveq	r5, r6
  4094be:	3803      	subeq	r0, #3
  4094c0:	3807      	subne	r0, #7
  4094c2:	f015 0f01 	tst.w	r5, #1
  4094c6:	d107      	bne.n	4094d8 <memchr+0x98>
  4094c8:	3001      	adds	r0, #1
  4094ca:	f415 7f80 	tst.w	r5, #256	; 0x100
  4094ce:	bf02      	ittt	eq
  4094d0:	3001      	addeq	r0, #1
  4094d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4094d6:	3001      	addeq	r0, #1
  4094d8:	bcf0      	pop	{r4, r5, r6, r7}
  4094da:	3801      	subs	r0, #1
  4094dc:	4770      	bx	lr
  4094de:	bf00      	nop

004094e0 <memmove>:
  4094e0:	4288      	cmp	r0, r1
  4094e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4094e4:	d90d      	bls.n	409502 <memmove+0x22>
  4094e6:	188b      	adds	r3, r1, r2
  4094e8:	4298      	cmp	r0, r3
  4094ea:	d20a      	bcs.n	409502 <memmove+0x22>
  4094ec:	1884      	adds	r4, r0, r2
  4094ee:	2a00      	cmp	r2, #0
  4094f0:	d051      	beq.n	409596 <memmove+0xb6>
  4094f2:	4622      	mov	r2, r4
  4094f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4094f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4094fc:	4299      	cmp	r1, r3
  4094fe:	d1f9      	bne.n	4094f4 <memmove+0x14>
  409500:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409502:	2a0f      	cmp	r2, #15
  409504:	d948      	bls.n	409598 <memmove+0xb8>
  409506:	ea41 0300 	orr.w	r3, r1, r0
  40950a:	079b      	lsls	r3, r3, #30
  40950c:	d146      	bne.n	40959c <memmove+0xbc>
  40950e:	f100 0410 	add.w	r4, r0, #16
  409512:	f101 0310 	add.w	r3, r1, #16
  409516:	4615      	mov	r5, r2
  409518:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40951c:	f844 6c10 	str.w	r6, [r4, #-16]
  409520:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409524:	f844 6c0c 	str.w	r6, [r4, #-12]
  409528:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40952c:	f844 6c08 	str.w	r6, [r4, #-8]
  409530:	3d10      	subs	r5, #16
  409532:	f853 6c04 	ldr.w	r6, [r3, #-4]
  409536:	f844 6c04 	str.w	r6, [r4, #-4]
  40953a:	2d0f      	cmp	r5, #15
  40953c:	f103 0310 	add.w	r3, r3, #16
  409540:	f104 0410 	add.w	r4, r4, #16
  409544:	d8e8      	bhi.n	409518 <memmove+0x38>
  409546:	f1a2 0310 	sub.w	r3, r2, #16
  40954a:	f023 030f 	bic.w	r3, r3, #15
  40954e:	f002 0e0f 	and.w	lr, r2, #15
  409552:	3310      	adds	r3, #16
  409554:	f1be 0f03 	cmp.w	lr, #3
  409558:	4419      	add	r1, r3
  40955a:	4403      	add	r3, r0
  40955c:	d921      	bls.n	4095a2 <memmove+0xc2>
  40955e:	1f1e      	subs	r6, r3, #4
  409560:	460d      	mov	r5, r1
  409562:	4674      	mov	r4, lr
  409564:	3c04      	subs	r4, #4
  409566:	f855 7b04 	ldr.w	r7, [r5], #4
  40956a:	f846 7f04 	str.w	r7, [r6, #4]!
  40956e:	2c03      	cmp	r4, #3
  409570:	d8f8      	bhi.n	409564 <memmove+0x84>
  409572:	f1ae 0404 	sub.w	r4, lr, #4
  409576:	f024 0403 	bic.w	r4, r4, #3
  40957a:	3404      	adds	r4, #4
  40957c:	4421      	add	r1, r4
  40957e:	4423      	add	r3, r4
  409580:	f002 0203 	and.w	r2, r2, #3
  409584:	b162      	cbz	r2, 4095a0 <memmove+0xc0>
  409586:	3b01      	subs	r3, #1
  409588:	440a      	add	r2, r1
  40958a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40958e:	f803 4f01 	strb.w	r4, [r3, #1]!
  409592:	428a      	cmp	r2, r1
  409594:	d1f9      	bne.n	40958a <memmove+0xaa>
  409596:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409598:	4603      	mov	r3, r0
  40959a:	e7f3      	b.n	409584 <memmove+0xa4>
  40959c:	4603      	mov	r3, r0
  40959e:	e7f2      	b.n	409586 <memmove+0xa6>
  4095a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4095a2:	4672      	mov	r2, lr
  4095a4:	e7ee      	b.n	409584 <memmove+0xa4>
  4095a6:	bf00      	nop

004095a8 <__malloc_lock>:
  4095a8:	4801      	ldr	r0, [pc, #4]	; (4095b0 <__malloc_lock+0x8>)
  4095aa:	f7ff bbf9 	b.w	408da0 <__retarget_lock_acquire_recursive>
  4095ae:	bf00      	nop
  4095b0:	2040c5d8 	.word	0x2040c5d8

004095b4 <__malloc_unlock>:
  4095b4:	4801      	ldr	r0, [pc, #4]	; (4095bc <__malloc_unlock+0x8>)
  4095b6:	f7ff bbf5 	b.w	408da4 <__retarget_lock_release_recursive>
  4095ba:	bf00      	nop
  4095bc:	2040c5d8 	.word	0x2040c5d8

004095c0 <_Balloc>:
  4095c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4095c2:	b570      	push	{r4, r5, r6, lr}
  4095c4:	4605      	mov	r5, r0
  4095c6:	460c      	mov	r4, r1
  4095c8:	b14b      	cbz	r3, 4095de <_Balloc+0x1e>
  4095ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4095ce:	b180      	cbz	r0, 4095f2 <_Balloc+0x32>
  4095d0:	6802      	ldr	r2, [r0, #0]
  4095d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4095d6:	2300      	movs	r3, #0
  4095d8:	6103      	str	r3, [r0, #16]
  4095da:	60c3      	str	r3, [r0, #12]
  4095dc:	bd70      	pop	{r4, r5, r6, pc}
  4095de:	2221      	movs	r2, #33	; 0x21
  4095e0:	2104      	movs	r1, #4
  4095e2:	f000 fe39 	bl	40a258 <_calloc_r>
  4095e6:	64e8      	str	r0, [r5, #76]	; 0x4c
  4095e8:	4603      	mov	r3, r0
  4095ea:	2800      	cmp	r0, #0
  4095ec:	d1ed      	bne.n	4095ca <_Balloc+0xa>
  4095ee:	2000      	movs	r0, #0
  4095f0:	bd70      	pop	{r4, r5, r6, pc}
  4095f2:	2101      	movs	r1, #1
  4095f4:	fa01 f604 	lsl.w	r6, r1, r4
  4095f8:	1d72      	adds	r2, r6, #5
  4095fa:	4628      	mov	r0, r5
  4095fc:	0092      	lsls	r2, r2, #2
  4095fe:	f000 fe2b 	bl	40a258 <_calloc_r>
  409602:	2800      	cmp	r0, #0
  409604:	d0f3      	beq.n	4095ee <_Balloc+0x2e>
  409606:	6044      	str	r4, [r0, #4]
  409608:	6086      	str	r6, [r0, #8]
  40960a:	e7e4      	b.n	4095d6 <_Balloc+0x16>

0040960c <_Bfree>:
  40960c:	b131      	cbz	r1, 40961c <_Bfree+0x10>
  40960e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409610:	684a      	ldr	r2, [r1, #4]
  409612:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  409616:	6008      	str	r0, [r1, #0]
  409618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40961c:	4770      	bx	lr
  40961e:	bf00      	nop

00409620 <__multadd>:
  409620:	b5f0      	push	{r4, r5, r6, r7, lr}
  409622:	690c      	ldr	r4, [r1, #16]
  409624:	b083      	sub	sp, #12
  409626:	460d      	mov	r5, r1
  409628:	4606      	mov	r6, r0
  40962a:	f101 0e14 	add.w	lr, r1, #20
  40962e:	2700      	movs	r7, #0
  409630:	f8de 0000 	ldr.w	r0, [lr]
  409634:	b281      	uxth	r1, r0
  409636:	fb02 3301 	mla	r3, r2, r1, r3
  40963a:	0c01      	lsrs	r1, r0, #16
  40963c:	0c18      	lsrs	r0, r3, #16
  40963e:	fb02 0101 	mla	r1, r2, r1, r0
  409642:	b29b      	uxth	r3, r3
  409644:	3701      	adds	r7, #1
  409646:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40964a:	42bc      	cmp	r4, r7
  40964c:	f84e 3b04 	str.w	r3, [lr], #4
  409650:	ea4f 4311 	mov.w	r3, r1, lsr #16
  409654:	dcec      	bgt.n	409630 <__multadd+0x10>
  409656:	b13b      	cbz	r3, 409668 <__multadd+0x48>
  409658:	68aa      	ldr	r2, [r5, #8]
  40965a:	4294      	cmp	r4, r2
  40965c:	da07      	bge.n	40966e <__multadd+0x4e>
  40965e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  409662:	3401      	adds	r4, #1
  409664:	6153      	str	r3, [r2, #20]
  409666:	612c      	str	r4, [r5, #16]
  409668:	4628      	mov	r0, r5
  40966a:	b003      	add	sp, #12
  40966c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40966e:	6869      	ldr	r1, [r5, #4]
  409670:	9301      	str	r3, [sp, #4]
  409672:	3101      	adds	r1, #1
  409674:	4630      	mov	r0, r6
  409676:	f7ff ffa3 	bl	4095c0 <_Balloc>
  40967a:	692a      	ldr	r2, [r5, #16]
  40967c:	3202      	adds	r2, #2
  40967e:	f105 010c 	add.w	r1, r5, #12
  409682:	4607      	mov	r7, r0
  409684:	0092      	lsls	r2, r2, #2
  409686:	300c      	adds	r0, #12
  409688:	f7fb fa8e 	bl	404ba8 <memcpy>
  40968c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40968e:	6869      	ldr	r1, [r5, #4]
  409690:	9b01      	ldr	r3, [sp, #4]
  409692:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  409696:	6028      	str	r0, [r5, #0]
  409698:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40969c:	463d      	mov	r5, r7
  40969e:	e7de      	b.n	40965e <__multadd+0x3e>

004096a0 <__hi0bits>:
  4096a0:	0c02      	lsrs	r2, r0, #16
  4096a2:	0412      	lsls	r2, r2, #16
  4096a4:	4603      	mov	r3, r0
  4096a6:	b9b2      	cbnz	r2, 4096d6 <__hi0bits+0x36>
  4096a8:	0403      	lsls	r3, r0, #16
  4096aa:	2010      	movs	r0, #16
  4096ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4096b0:	bf04      	itt	eq
  4096b2:	021b      	lsleq	r3, r3, #8
  4096b4:	3008      	addeq	r0, #8
  4096b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4096ba:	bf04      	itt	eq
  4096bc:	011b      	lsleq	r3, r3, #4
  4096be:	3004      	addeq	r0, #4
  4096c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4096c4:	bf04      	itt	eq
  4096c6:	009b      	lsleq	r3, r3, #2
  4096c8:	3002      	addeq	r0, #2
  4096ca:	2b00      	cmp	r3, #0
  4096cc:	db02      	blt.n	4096d4 <__hi0bits+0x34>
  4096ce:	005b      	lsls	r3, r3, #1
  4096d0:	d403      	bmi.n	4096da <__hi0bits+0x3a>
  4096d2:	2020      	movs	r0, #32
  4096d4:	4770      	bx	lr
  4096d6:	2000      	movs	r0, #0
  4096d8:	e7e8      	b.n	4096ac <__hi0bits+0xc>
  4096da:	3001      	adds	r0, #1
  4096dc:	4770      	bx	lr
  4096de:	bf00      	nop

004096e0 <__lo0bits>:
  4096e0:	6803      	ldr	r3, [r0, #0]
  4096e2:	f013 0207 	ands.w	r2, r3, #7
  4096e6:	4601      	mov	r1, r0
  4096e8:	d007      	beq.n	4096fa <__lo0bits+0x1a>
  4096ea:	07da      	lsls	r2, r3, #31
  4096ec:	d421      	bmi.n	409732 <__lo0bits+0x52>
  4096ee:	0798      	lsls	r0, r3, #30
  4096f0:	d421      	bmi.n	409736 <__lo0bits+0x56>
  4096f2:	089b      	lsrs	r3, r3, #2
  4096f4:	600b      	str	r3, [r1, #0]
  4096f6:	2002      	movs	r0, #2
  4096f8:	4770      	bx	lr
  4096fa:	b298      	uxth	r0, r3
  4096fc:	b198      	cbz	r0, 409726 <__lo0bits+0x46>
  4096fe:	4610      	mov	r0, r2
  409700:	f013 0fff 	tst.w	r3, #255	; 0xff
  409704:	bf04      	itt	eq
  409706:	0a1b      	lsreq	r3, r3, #8
  409708:	3008      	addeq	r0, #8
  40970a:	071a      	lsls	r2, r3, #28
  40970c:	bf04      	itt	eq
  40970e:	091b      	lsreq	r3, r3, #4
  409710:	3004      	addeq	r0, #4
  409712:	079a      	lsls	r2, r3, #30
  409714:	bf04      	itt	eq
  409716:	089b      	lsreq	r3, r3, #2
  409718:	3002      	addeq	r0, #2
  40971a:	07da      	lsls	r2, r3, #31
  40971c:	d407      	bmi.n	40972e <__lo0bits+0x4e>
  40971e:	085b      	lsrs	r3, r3, #1
  409720:	d104      	bne.n	40972c <__lo0bits+0x4c>
  409722:	2020      	movs	r0, #32
  409724:	4770      	bx	lr
  409726:	0c1b      	lsrs	r3, r3, #16
  409728:	2010      	movs	r0, #16
  40972a:	e7e9      	b.n	409700 <__lo0bits+0x20>
  40972c:	3001      	adds	r0, #1
  40972e:	600b      	str	r3, [r1, #0]
  409730:	4770      	bx	lr
  409732:	2000      	movs	r0, #0
  409734:	4770      	bx	lr
  409736:	085b      	lsrs	r3, r3, #1
  409738:	600b      	str	r3, [r1, #0]
  40973a:	2001      	movs	r0, #1
  40973c:	4770      	bx	lr
  40973e:	bf00      	nop

00409740 <__i2b>:
  409740:	b510      	push	{r4, lr}
  409742:	460c      	mov	r4, r1
  409744:	2101      	movs	r1, #1
  409746:	f7ff ff3b 	bl	4095c0 <_Balloc>
  40974a:	2201      	movs	r2, #1
  40974c:	6144      	str	r4, [r0, #20]
  40974e:	6102      	str	r2, [r0, #16]
  409750:	bd10      	pop	{r4, pc}
  409752:	bf00      	nop

00409754 <__multiply>:
  409754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409758:	690c      	ldr	r4, [r1, #16]
  40975a:	6915      	ldr	r5, [r2, #16]
  40975c:	42ac      	cmp	r4, r5
  40975e:	b083      	sub	sp, #12
  409760:	468b      	mov	fp, r1
  409762:	4616      	mov	r6, r2
  409764:	da04      	bge.n	409770 <__multiply+0x1c>
  409766:	4622      	mov	r2, r4
  409768:	46b3      	mov	fp, r6
  40976a:	462c      	mov	r4, r5
  40976c:	460e      	mov	r6, r1
  40976e:	4615      	mov	r5, r2
  409770:	f8db 3008 	ldr.w	r3, [fp, #8]
  409774:	f8db 1004 	ldr.w	r1, [fp, #4]
  409778:	eb04 0805 	add.w	r8, r4, r5
  40977c:	4598      	cmp	r8, r3
  40977e:	bfc8      	it	gt
  409780:	3101      	addgt	r1, #1
  409782:	f7ff ff1d 	bl	4095c0 <_Balloc>
  409786:	f100 0914 	add.w	r9, r0, #20
  40978a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40978e:	45d1      	cmp	r9, sl
  409790:	9000      	str	r0, [sp, #0]
  409792:	d205      	bcs.n	4097a0 <__multiply+0x4c>
  409794:	464b      	mov	r3, r9
  409796:	2100      	movs	r1, #0
  409798:	f843 1b04 	str.w	r1, [r3], #4
  40979c:	459a      	cmp	sl, r3
  40979e:	d8fb      	bhi.n	409798 <__multiply+0x44>
  4097a0:	f106 0c14 	add.w	ip, r6, #20
  4097a4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  4097a8:	f10b 0b14 	add.w	fp, fp, #20
  4097ac:	459c      	cmp	ip, r3
  4097ae:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4097b2:	d24c      	bcs.n	40984e <__multiply+0xfa>
  4097b4:	f8cd a004 	str.w	sl, [sp, #4]
  4097b8:	469a      	mov	sl, r3
  4097ba:	f8dc 5000 	ldr.w	r5, [ip]
  4097be:	b2af      	uxth	r7, r5
  4097c0:	b1ef      	cbz	r7, 4097fe <__multiply+0xaa>
  4097c2:	2100      	movs	r1, #0
  4097c4:	464d      	mov	r5, r9
  4097c6:	465e      	mov	r6, fp
  4097c8:	460c      	mov	r4, r1
  4097ca:	f856 2b04 	ldr.w	r2, [r6], #4
  4097ce:	6828      	ldr	r0, [r5, #0]
  4097d0:	b293      	uxth	r3, r2
  4097d2:	b281      	uxth	r1, r0
  4097d4:	fb07 1303 	mla	r3, r7, r3, r1
  4097d8:	0c12      	lsrs	r2, r2, #16
  4097da:	0c01      	lsrs	r1, r0, #16
  4097dc:	4423      	add	r3, r4
  4097de:	fb07 1102 	mla	r1, r7, r2, r1
  4097e2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4097e6:	b29b      	uxth	r3, r3
  4097e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4097ec:	45b6      	cmp	lr, r6
  4097ee:	f845 3b04 	str.w	r3, [r5], #4
  4097f2:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4097f6:	d8e8      	bhi.n	4097ca <__multiply+0x76>
  4097f8:	602c      	str	r4, [r5, #0]
  4097fa:	f8dc 5000 	ldr.w	r5, [ip]
  4097fe:	0c2d      	lsrs	r5, r5, #16
  409800:	d01d      	beq.n	40983e <__multiply+0xea>
  409802:	f8d9 3000 	ldr.w	r3, [r9]
  409806:	4648      	mov	r0, r9
  409808:	461c      	mov	r4, r3
  40980a:	4659      	mov	r1, fp
  40980c:	2200      	movs	r2, #0
  40980e:	880e      	ldrh	r6, [r1, #0]
  409810:	0c24      	lsrs	r4, r4, #16
  409812:	fb05 4406 	mla	r4, r5, r6, r4
  409816:	4422      	add	r2, r4
  409818:	b29b      	uxth	r3, r3
  40981a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40981e:	f840 3b04 	str.w	r3, [r0], #4
  409822:	f851 3b04 	ldr.w	r3, [r1], #4
  409826:	6804      	ldr	r4, [r0, #0]
  409828:	0c1b      	lsrs	r3, r3, #16
  40982a:	b2a6      	uxth	r6, r4
  40982c:	fb05 6303 	mla	r3, r5, r3, r6
  409830:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  409834:	458e      	cmp	lr, r1
  409836:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40983a:	d8e8      	bhi.n	40980e <__multiply+0xba>
  40983c:	6003      	str	r3, [r0, #0]
  40983e:	f10c 0c04 	add.w	ip, ip, #4
  409842:	45e2      	cmp	sl, ip
  409844:	f109 0904 	add.w	r9, r9, #4
  409848:	d8b7      	bhi.n	4097ba <__multiply+0x66>
  40984a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40984e:	f1b8 0f00 	cmp.w	r8, #0
  409852:	dd0b      	ble.n	40986c <__multiply+0x118>
  409854:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  409858:	f1aa 0a04 	sub.w	sl, sl, #4
  40985c:	b11b      	cbz	r3, 409866 <__multiply+0x112>
  40985e:	e005      	b.n	40986c <__multiply+0x118>
  409860:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  409864:	b913      	cbnz	r3, 40986c <__multiply+0x118>
  409866:	f1b8 0801 	subs.w	r8, r8, #1
  40986a:	d1f9      	bne.n	409860 <__multiply+0x10c>
  40986c:	9800      	ldr	r0, [sp, #0]
  40986e:	f8c0 8010 	str.w	r8, [r0, #16]
  409872:	b003      	add	sp, #12
  409874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409878 <__pow5mult>:
  409878:	f012 0303 	ands.w	r3, r2, #3
  40987c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409880:	4614      	mov	r4, r2
  409882:	4607      	mov	r7, r0
  409884:	d12e      	bne.n	4098e4 <__pow5mult+0x6c>
  409886:	460d      	mov	r5, r1
  409888:	10a4      	asrs	r4, r4, #2
  40988a:	d01c      	beq.n	4098c6 <__pow5mult+0x4e>
  40988c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40988e:	b396      	cbz	r6, 4098f6 <__pow5mult+0x7e>
  409890:	07e3      	lsls	r3, r4, #31
  409892:	f04f 0800 	mov.w	r8, #0
  409896:	d406      	bmi.n	4098a6 <__pow5mult+0x2e>
  409898:	1064      	asrs	r4, r4, #1
  40989a:	d014      	beq.n	4098c6 <__pow5mult+0x4e>
  40989c:	6830      	ldr	r0, [r6, #0]
  40989e:	b1a8      	cbz	r0, 4098cc <__pow5mult+0x54>
  4098a0:	4606      	mov	r6, r0
  4098a2:	07e3      	lsls	r3, r4, #31
  4098a4:	d5f8      	bpl.n	409898 <__pow5mult+0x20>
  4098a6:	4632      	mov	r2, r6
  4098a8:	4629      	mov	r1, r5
  4098aa:	4638      	mov	r0, r7
  4098ac:	f7ff ff52 	bl	409754 <__multiply>
  4098b0:	b1b5      	cbz	r5, 4098e0 <__pow5mult+0x68>
  4098b2:	686a      	ldr	r2, [r5, #4]
  4098b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4098b6:	1064      	asrs	r4, r4, #1
  4098b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4098bc:	6029      	str	r1, [r5, #0]
  4098be:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4098c2:	4605      	mov	r5, r0
  4098c4:	d1ea      	bne.n	40989c <__pow5mult+0x24>
  4098c6:	4628      	mov	r0, r5
  4098c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4098cc:	4632      	mov	r2, r6
  4098ce:	4631      	mov	r1, r6
  4098d0:	4638      	mov	r0, r7
  4098d2:	f7ff ff3f 	bl	409754 <__multiply>
  4098d6:	6030      	str	r0, [r6, #0]
  4098d8:	f8c0 8000 	str.w	r8, [r0]
  4098dc:	4606      	mov	r6, r0
  4098de:	e7e0      	b.n	4098a2 <__pow5mult+0x2a>
  4098e0:	4605      	mov	r5, r0
  4098e2:	e7d9      	b.n	409898 <__pow5mult+0x20>
  4098e4:	1e5a      	subs	r2, r3, #1
  4098e6:	4d0b      	ldr	r5, [pc, #44]	; (409914 <__pow5mult+0x9c>)
  4098e8:	2300      	movs	r3, #0
  4098ea:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4098ee:	f7ff fe97 	bl	409620 <__multadd>
  4098f2:	4605      	mov	r5, r0
  4098f4:	e7c8      	b.n	409888 <__pow5mult+0x10>
  4098f6:	2101      	movs	r1, #1
  4098f8:	4638      	mov	r0, r7
  4098fa:	f7ff fe61 	bl	4095c0 <_Balloc>
  4098fe:	f240 2171 	movw	r1, #625	; 0x271
  409902:	2201      	movs	r2, #1
  409904:	2300      	movs	r3, #0
  409906:	6141      	str	r1, [r0, #20]
  409908:	6102      	str	r2, [r0, #16]
  40990a:	4606      	mov	r6, r0
  40990c:	64b8      	str	r0, [r7, #72]	; 0x48
  40990e:	6003      	str	r3, [r0, #0]
  409910:	e7be      	b.n	409890 <__pow5mult+0x18>
  409912:	bf00      	nop
  409914:	0040ab90 	.word	0x0040ab90

00409918 <__lshift>:
  409918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40991c:	4691      	mov	r9, r2
  40991e:	690a      	ldr	r2, [r1, #16]
  409920:	688b      	ldr	r3, [r1, #8]
  409922:	ea4f 1469 	mov.w	r4, r9, asr #5
  409926:	eb04 0802 	add.w	r8, r4, r2
  40992a:	f108 0501 	add.w	r5, r8, #1
  40992e:	429d      	cmp	r5, r3
  409930:	460e      	mov	r6, r1
  409932:	4607      	mov	r7, r0
  409934:	6849      	ldr	r1, [r1, #4]
  409936:	dd04      	ble.n	409942 <__lshift+0x2a>
  409938:	005b      	lsls	r3, r3, #1
  40993a:	429d      	cmp	r5, r3
  40993c:	f101 0101 	add.w	r1, r1, #1
  409940:	dcfa      	bgt.n	409938 <__lshift+0x20>
  409942:	4638      	mov	r0, r7
  409944:	f7ff fe3c 	bl	4095c0 <_Balloc>
  409948:	2c00      	cmp	r4, #0
  40994a:	f100 0314 	add.w	r3, r0, #20
  40994e:	dd06      	ble.n	40995e <__lshift+0x46>
  409950:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  409954:	2100      	movs	r1, #0
  409956:	f843 1b04 	str.w	r1, [r3], #4
  40995a:	429a      	cmp	r2, r3
  40995c:	d1fb      	bne.n	409956 <__lshift+0x3e>
  40995e:	6934      	ldr	r4, [r6, #16]
  409960:	f106 0114 	add.w	r1, r6, #20
  409964:	f019 091f 	ands.w	r9, r9, #31
  409968:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40996c:	d01d      	beq.n	4099aa <__lshift+0x92>
  40996e:	f1c9 0c20 	rsb	ip, r9, #32
  409972:	2200      	movs	r2, #0
  409974:	680c      	ldr	r4, [r1, #0]
  409976:	fa04 f409 	lsl.w	r4, r4, r9
  40997a:	4314      	orrs	r4, r2
  40997c:	f843 4b04 	str.w	r4, [r3], #4
  409980:	f851 2b04 	ldr.w	r2, [r1], #4
  409984:	458e      	cmp	lr, r1
  409986:	fa22 f20c 	lsr.w	r2, r2, ip
  40998a:	d8f3      	bhi.n	409974 <__lshift+0x5c>
  40998c:	601a      	str	r2, [r3, #0]
  40998e:	b10a      	cbz	r2, 409994 <__lshift+0x7c>
  409990:	f108 0502 	add.w	r5, r8, #2
  409994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409996:	6872      	ldr	r2, [r6, #4]
  409998:	3d01      	subs	r5, #1
  40999a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40999e:	6105      	str	r5, [r0, #16]
  4099a0:	6031      	str	r1, [r6, #0]
  4099a2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4099a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4099aa:	3b04      	subs	r3, #4
  4099ac:	f851 2b04 	ldr.w	r2, [r1], #4
  4099b0:	f843 2f04 	str.w	r2, [r3, #4]!
  4099b4:	458e      	cmp	lr, r1
  4099b6:	d8f9      	bhi.n	4099ac <__lshift+0x94>
  4099b8:	e7ec      	b.n	409994 <__lshift+0x7c>
  4099ba:	bf00      	nop

004099bc <__mcmp>:
  4099bc:	b430      	push	{r4, r5}
  4099be:	690b      	ldr	r3, [r1, #16]
  4099c0:	4605      	mov	r5, r0
  4099c2:	6900      	ldr	r0, [r0, #16]
  4099c4:	1ac0      	subs	r0, r0, r3
  4099c6:	d10f      	bne.n	4099e8 <__mcmp+0x2c>
  4099c8:	009b      	lsls	r3, r3, #2
  4099ca:	3514      	adds	r5, #20
  4099cc:	3114      	adds	r1, #20
  4099ce:	4419      	add	r1, r3
  4099d0:	442b      	add	r3, r5
  4099d2:	e001      	b.n	4099d8 <__mcmp+0x1c>
  4099d4:	429d      	cmp	r5, r3
  4099d6:	d207      	bcs.n	4099e8 <__mcmp+0x2c>
  4099d8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4099dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4099e0:	4294      	cmp	r4, r2
  4099e2:	d0f7      	beq.n	4099d4 <__mcmp+0x18>
  4099e4:	d302      	bcc.n	4099ec <__mcmp+0x30>
  4099e6:	2001      	movs	r0, #1
  4099e8:	bc30      	pop	{r4, r5}
  4099ea:	4770      	bx	lr
  4099ec:	f04f 30ff 	mov.w	r0, #4294967295
  4099f0:	e7fa      	b.n	4099e8 <__mcmp+0x2c>
  4099f2:	bf00      	nop

004099f4 <__mdiff>:
  4099f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4099f8:	690f      	ldr	r7, [r1, #16]
  4099fa:	460e      	mov	r6, r1
  4099fc:	6911      	ldr	r1, [r2, #16]
  4099fe:	1a7f      	subs	r7, r7, r1
  409a00:	2f00      	cmp	r7, #0
  409a02:	4690      	mov	r8, r2
  409a04:	d117      	bne.n	409a36 <__mdiff+0x42>
  409a06:	0089      	lsls	r1, r1, #2
  409a08:	f106 0514 	add.w	r5, r6, #20
  409a0c:	f102 0e14 	add.w	lr, r2, #20
  409a10:	186b      	adds	r3, r5, r1
  409a12:	4471      	add	r1, lr
  409a14:	e001      	b.n	409a1a <__mdiff+0x26>
  409a16:	429d      	cmp	r5, r3
  409a18:	d25c      	bcs.n	409ad4 <__mdiff+0xe0>
  409a1a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  409a1e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  409a22:	42a2      	cmp	r2, r4
  409a24:	d0f7      	beq.n	409a16 <__mdiff+0x22>
  409a26:	d25e      	bcs.n	409ae6 <__mdiff+0xf2>
  409a28:	4633      	mov	r3, r6
  409a2a:	462c      	mov	r4, r5
  409a2c:	4646      	mov	r6, r8
  409a2e:	4675      	mov	r5, lr
  409a30:	4698      	mov	r8, r3
  409a32:	2701      	movs	r7, #1
  409a34:	e005      	b.n	409a42 <__mdiff+0x4e>
  409a36:	db58      	blt.n	409aea <__mdiff+0xf6>
  409a38:	f106 0514 	add.w	r5, r6, #20
  409a3c:	f108 0414 	add.w	r4, r8, #20
  409a40:	2700      	movs	r7, #0
  409a42:	6871      	ldr	r1, [r6, #4]
  409a44:	f7ff fdbc 	bl	4095c0 <_Balloc>
  409a48:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409a4c:	6936      	ldr	r6, [r6, #16]
  409a4e:	60c7      	str	r7, [r0, #12]
  409a50:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  409a54:	46a6      	mov	lr, r4
  409a56:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  409a5a:	f100 0414 	add.w	r4, r0, #20
  409a5e:	2300      	movs	r3, #0
  409a60:	f85e 1b04 	ldr.w	r1, [lr], #4
  409a64:	f855 8b04 	ldr.w	r8, [r5], #4
  409a68:	b28a      	uxth	r2, r1
  409a6a:	fa13 f388 	uxtah	r3, r3, r8
  409a6e:	0c09      	lsrs	r1, r1, #16
  409a70:	1a9a      	subs	r2, r3, r2
  409a72:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  409a76:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409a7a:	b292      	uxth	r2, r2
  409a7c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409a80:	45f4      	cmp	ip, lr
  409a82:	f844 2b04 	str.w	r2, [r4], #4
  409a86:	ea4f 4323 	mov.w	r3, r3, asr #16
  409a8a:	d8e9      	bhi.n	409a60 <__mdiff+0x6c>
  409a8c:	42af      	cmp	r7, r5
  409a8e:	d917      	bls.n	409ac0 <__mdiff+0xcc>
  409a90:	46a4      	mov	ip, r4
  409a92:	46ae      	mov	lr, r5
  409a94:	f85e 2b04 	ldr.w	r2, [lr], #4
  409a98:	fa13 f382 	uxtah	r3, r3, r2
  409a9c:	1419      	asrs	r1, r3, #16
  409a9e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  409aa2:	b29b      	uxth	r3, r3
  409aa4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409aa8:	4577      	cmp	r7, lr
  409aaa:	f84c 2b04 	str.w	r2, [ip], #4
  409aae:	ea4f 4321 	mov.w	r3, r1, asr #16
  409ab2:	d8ef      	bhi.n	409a94 <__mdiff+0xa0>
  409ab4:	43ed      	mvns	r5, r5
  409ab6:	442f      	add	r7, r5
  409ab8:	f027 0703 	bic.w	r7, r7, #3
  409abc:	3704      	adds	r7, #4
  409abe:	443c      	add	r4, r7
  409ac0:	3c04      	subs	r4, #4
  409ac2:	b922      	cbnz	r2, 409ace <__mdiff+0xda>
  409ac4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409ac8:	3e01      	subs	r6, #1
  409aca:	2b00      	cmp	r3, #0
  409acc:	d0fa      	beq.n	409ac4 <__mdiff+0xd0>
  409ace:	6106      	str	r6, [r0, #16]
  409ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409ad4:	2100      	movs	r1, #0
  409ad6:	f7ff fd73 	bl	4095c0 <_Balloc>
  409ada:	2201      	movs	r2, #1
  409adc:	2300      	movs	r3, #0
  409ade:	6102      	str	r2, [r0, #16]
  409ae0:	6143      	str	r3, [r0, #20]
  409ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409ae6:	4674      	mov	r4, lr
  409ae8:	e7ab      	b.n	409a42 <__mdiff+0x4e>
  409aea:	4633      	mov	r3, r6
  409aec:	f106 0414 	add.w	r4, r6, #20
  409af0:	f102 0514 	add.w	r5, r2, #20
  409af4:	4616      	mov	r6, r2
  409af6:	2701      	movs	r7, #1
  409af8:	4698      	mov	r8, r3
  409afa:	e7a2      	b.n	409a42 <__mdiff+0x4e>

00409afc <__d2b>:
  409afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409b00:	b082      	sub	sp, #8
  409b02:	2101      	movs	r1, #1
  409b04:	461c      	mov	r4, r3
  409b06:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409b0a:	4615      	mov	r5, r2
  409b0c:	9e08      	ldr	r6, [sp, #32]
  409b0e:	f7ff fd57 	bl	4095c0 <_Balloc>
  409b12:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409b16:	4680      	mov	r8, r0
  409b18:	b10f      	cbz	r7, 409b1e <__d2b+0x22>
  409b1a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409b1e:	9401      	str	r4, [sp, #4]
  409b20:	b31d      	cbz	r5, 409b6a <__d2b+0x6e>
  409b22:	a802      	add	r0, sp, #8
  409b24:	f840 5d08 	str.w	r5, [r0, #-8]!
  409b28:	f7ff fdda 	bl	4096e0 <__lo0bits>
  409b2c:	2800      	cmp	r0, #0
  409b2e:	d134      	bne.n	409b9a <__d2b+0x9e>
  409b30:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409b34:	f8c8 2014 	str.w	r2, [r8, #20]
  409b38:	2b00      	cmp	r3, #0
  409b3a:	bf0c      	ite	eq
  409b3c:	2101      	moveq	r1, #1
  409b3e:	2102      	movne	r1, #2
  409b40:	f8c8 3018 	str.w	r3, [r8, #24]
  409b44:	f8c8 1010 	str.w	r1, [r8, #16]
  409b48:	b9df      	cbnz	r7, 409b82 <__d2b+0x86>
  409b4a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409b4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409b52:	6030      	str	r0, [r6, #0]
  409b54:	6918      	ldr	r0, [r3, #16]
  409b56:	f7ff fda3 	bl	4096a0 <__hi0bits>
  409b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409b5c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409b60:	6018      	str	r0, [r3, #0]
  409b62:	4640      	mov	r0, r8
  409b64:	b002      	add	sp, #8
  409b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409b6a:	a801      	add	r0, sp, #4
  409b6c:	f7ff fdb8 	bl	4096e0 <__lo0bits>
  409b70:	9b01      	ldr	r3, [sp, #4]
  409b72:	f8c8 3014 	str.w	r3, [r8, #20]
  409b76:	2101      	movs	r1, #1
  409b78:	3020      	adds	r0, #32
  409b7a:	f8c8 1010 	str.w	r1, [r8, #16]
  409b7e:	2f00      	cmp	r7, #0
  409b80:	d0e3      	beq.n	409b4a <__d2b+0x4e>
  409b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409b84:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409b88:	4407      	add	r7, r0
  409b8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409b8e:	6037      	str	r7, [r6, #0]
  409b90:	6018      	str	r0, [r3, #0]
  409b92:	4640      	mov	r0, r8
  409b94:	b002      	add	sp, #8
  409b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409b9a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409b9e:	f1c0 0220 	rsb	r2, r0, #32
  409ba2:	fa03 f202 	lsl.w	r2, r3, r2
  409ba6:	430a      	orrs	r2, r1
  409ba8:	40c3      	lsrs	r3, r0
  409baa:	9301      	str	r3, [sp, #4]
  409bac:	f8c8 2014 	str.w	r2, [r8, #20]
  409bb0:	e7c2      	b.n	409b38 <__d2b+0x3c>
  409bb2:	bf00      	nop

00409bb4 <_realloc_r>:
  409bb4:	2900      	cmp	r1, #0
  409bb6:	f000 8095 	beq.w	409ce4 <_realloc_r+0x130>
  409bba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409bbe:	460d      	mov	r5, r1
  409bc0:	4616      	mov	r6, r2
  409bc2:	b083      	sub	sp, #12
  409bc4:	4680      	mov	r8, r0
  409bc6:	f106 070b 	add.w	r7, r6, #11
  409bca:	f7ff fced 	bl	4095a8 <__malloc_lock>
  409bce:	f855 ec04 	ldr.w	lr, [r5, #-4]
  409bd2:	2f16      	cmp	r7, #22
  409bd4:	f02e 0403 	bic.w	r4, lr, #3
  409bd8:	f1a5 0908 	sub.w	r9, r5, #8
  409bdc:	d83c      	bhi.n	409c58 <_realloc_r+0xa4>
  409bde:	2210      	movs	r2, #16
  409be0:	4617      	mov	r7, r2
  409be2:	42be      	cmp	r6, r7
  409be4:	d83d      	bhi.n	409c62 <_realloc_r+0xae>
  409be6:	4294      	cmp	r4, r2
  409be8:	da43      	bge.n	409c72 <_realloc_r+0xbe>
  409bea:	4bc4      	ldr	r3, [pc, #784]	; (409efc <_realloc_r+0x348>)
  409bec:	6899      	ldr	r1, [r3, #8]
  409bee:	eb09 0004 	add.w	r0, r9, r4
  409bf2:	4288      	cmp	r0, r1
  409bf4:	f000 80b4 	beq.w	409d60 <_realloc_r+0x1ac>
  409bf8:	6843      	ldr	r3, [r0, #4]
  409bfa:	f023 0101 	bic.w	r1, r3, #1
  409bfe:	4401      	add	r1, r0
  409c00:	6849      	ldr	r1, [r1, #4]
  409c02:	07c9      	lsls	r1, r1, #31
  409c04:	d54c      	bpl.n	409ca0 <_realloc_r+0xec>
  409c06:	f01e 0f01 	tst.w	lr, #1
  409c0a:	f000 809b 	beq.w	409d44 <_realloc_r+0x190>
  409c0e:	4631      	mov	r1, r6
  409c10:	4640      	mov	r0, r8
  409c12:	f7ff f949 	bl	408ea8 <_malloc_r>
  409c16:	4606      	mov	r6, r0
  409c18:	2800      	cmp	r0, #0
  409c1a:	d03a      	beq.n	409c92 <_realloc_r+0xde>
  409c1c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409c20:	f023 0301 	bic.w	r3, r3, #1
  409c24:	444b      	add	r3, r9
  409c26:	f1a0 0208 	sub.w	r2, r0, #8
  409c2a:	429a      	cmp	r2, r3
  409c2c:	f000 8121 	beq.w	409e72 <_realloc_r+0x2be>
  409c30:	1f22      	subs	r2, r4, #4
  409c32:	2a24      	cmp	r2, #36	; 0x24
  409c34:	f200 8107 	bhi.w	409e46 <_realloc_r+0x292>
  409c38:	2a13      	cmp	r2, #19
  409c3a:	f200 80db 	bhi.w	409df4 <_realloc_r+0x240>
  409c3e:	4603      	mov	r3, r0
  409c40:	462a      	mov	r2, r5
  409c42:	6811      	ldr	r1, [r2, #0]
  409c44:	6019      	str	r1, [r3, #0]
  409c46:	6851      	ldr	r1, [r2, #4]
  409c48:	6059      	str	r1, [r3, #4]
  409c4a:	6892      	ldr	r2, [r2, #8]
  409c4c:	609a      	str	r2, [r3, #8]
  409c4e:	4629      	mov	r1, r5
  409c50:	4640      	mov	r0, r8
  409c52:	f7fe fdfd 	bl	408850 <_free_r>
  409c56:	e01c      	b.n	409c92 <_realloc_r+0xde>
  409c58:	f027 0707 	bic.w	r7, r7, #7
  409c5c:	2f00      	cmp	r7, #0
  409c5e:	463a      	mov	r2, r7
  409c60:	dabf      	bge.n	409be2 <_realloc_r+0x2e>
  409c62:	2600      	movs	r6, #0
  409c64:	230c      	movs	r3, #12
  409c66:	4630      	mov	r0, r6
  409c68:	f8c8 3000 	str.w	r3, [r8]
  409c6c:	b003      	add	sp, #12
  409c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409c72:	462e      	mov	r6, r5
  409c74:	1be3      	subs	r3, r4, r7
  409c76:	2b0f      	cmp	r3, #15
  409c78:	d81e      	bhi.n	409cb8 <_realloc_r+0x104>
  409c7a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409c7e:	f003 0301 	and.w	r3, r3, #1
  409c82:	4323      	orrs	r3, r4
  409c84:	444c      	add	r4, r9
  409c86:	f8c9 3004 	str.w	r3, [r9, #4]
  409c8a:	6863      	ldr	r3, [r4, #4]
  409c8c:	f043 0301 	orr.w	r3, r3, #1
  409c90:	6063      	str	r3, [r4, #4]
  409c92:	4640      	mov	r0, r8
  409c94:	f7ff fc8e 	bl	4095b4 <__malloc_unlock>
  409c98:	4630      	mov	r0, r6
  409c9a:	b003      	add	sp, #12
  409c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409ca0:	f023 0303 	bic.w	r3, r3, #3
  409ca4:	18e1      	adds	r1, r4, r3
  409ca6:	4291      	cmp	r1, r2
  409ca8:	db1f      	blt.n	409cea <_realloc_r+0x136>
  409caa:	68c3      	ldr	r3, [r0, #12]
  409cac:	6882      	ldr	r2, [r0, #8]
  409cae:	462e      	mov	r6, r5
  409cb0:	60d3      	str	r3, [r2, #12]
  409cb2:	460c      	mov	r4, r1
  409cb4:	609a      	str	r2, [r3, #8]
  409cb6:	e7dd      	b.n	409c74 <_realloc_r+0xc0>
  409cb8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409cbc:	eb09 0107 	add.w	r1, r9, r7
  409cc0:	f002 0201 	and.w	r2, r2, #1
  409cc4:	444c      	add	r4, r9
  409cc6:	f043 0301 	orr.w	r3, r3, #1
  409cca:	4317      	orrs	r7, r2
  409ccc:	f8c9 7004 	str.w	r7, [r9, #4]
  409cd0:	604b      	str	r3, [r1, #4]
  409cd2:	6863      	ldr	r3, [r4, #4]
  409cd4:	f043 0301 	orr.w	r3, r3, #1
  409cd8:	3108      	adds	r1, #8
  409cda:	6063      	str	r3, [r4, #4]
  409cdc:	4640      	mov	r0, r8
  409cde:	f7fe fdb7 	bl	408850 <_free_r>
  409ce2:	e7d6      	b.n	409c92 <_realloc_r+0xde>
  409ce4:	4611      	mov	r1, r2
  409ce6:	f7ff b8df 	b.w	408ea8 <_malloc_r>
  409cea:	f01e 0f01 	tst.w	lr, #1
  409cee:	d18e      	bne.n	409c0e <_realloc_r+0x5a>
  409cf0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409cf4:	eba9 0a01 	sub.w	sl, r9, r1
  409cf8:	f8da 1004 	ldr.w	r1, [sl, #4]
  409cfc:	f021 0103 	bic.w	r1, r1, #3
  409d00:	440b      	add	r3, r1
  409d02:	4423      	add	r3, r4
  409d04:	4293      	cmp	r3, r2
  409d06:	db25      	blt.n	409d54 <_realloc_r+0x1a0>
  409d08:	68c2      	ldr	r2, [r0, #12]
  409d0a:	6881      	ldr	r1, [r0, #8]
  409d0c:	4656      	mov	r6, sl
  409d0e:	60ca      	str	r2, [r1, #12]
  409d10:	6091      	str	r1, [r2, #8]
  409d12:	f8da 100c 	ldr.w	r1, [sl, #12]
  409d16:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409d1a:	1f22      	subs	r2, r4, #4
  409d1c:	2a24      	cmp	r2, #36	; 0x24
  409d1e:	60c1      	str	r1, [r0, #12]
  409d20:	6088      	str	r0, [r1, #8]
  409d22:	f200 8094 	bhi.w	409e4e <_realloc_r+0x29a>
  409d26:	2a13      	cmp	r2, #19
  409d28:	d96f      	bls.n	409e0a <_realloc_r+0x256>
  409d2a:	6829      	ldr	r1, [r5, #0]
  409d2c:	f8ca 1008 	str.w	r1, [sl, #8]
  409d30:	6869      	ldr	r1, [r5, #4]
  409d32:	f8ca 100c 	str.w	r1, [sl, #12]
  409d36:	2a1b      	cmp	r2, #27
  409d38:	f200 80a2 	bhi.w	409e80 <_realloc_r+0x2cc>
  409d3c:	3508      	adds	r5, #8
  409d3e:	f10a 0210 	add.w	r2, sl, #16
  409d42:	e063      	b.n	409e0c <_realloc_r+0x258>
  409d44:	f855 3c08 	ldr.w	r3, [r5, #-8]
  409d48:	eba9 0a03 	sub.w	sl, r9, r3
  409d4c:	f8da 1004 	ldr.w	r1, [sl, #4]
  409d50:	f021 0103 	bic.w	r1, r1, #3
  409d54:	1863      	adds	r3, r4, r1
  409d56:	4293      	cmp	r3, r2
  409d58:	f6ff af59 	blt.w	409c0e <_realloc_r+0x5a>
  409d5c:	4656      	mov	r6, sl
  409d5e:	e7d8      	b.n	409d12 <_realloc_r+0x15e>
  409d60:	6841      	ldr	r1, [r0, #4]
  409d62:	f021 0b03 	bic.w	fp, r1, #3
  409d66:	44a3      	add	fp, r4
  409d68:	f107 0010 	add.w	r0, r7, #16
  409d6c:	4583      	cmp	fp, r0
  409d6e:	da56      	bge.n	409e1e <_realloc_r+0x26a>
  409d70:	f01e 0f01 	tst.w	lr, #1
  409d74:	f47f af4b 	bne.w	409c0e <_realloc_r+0x5a>
  409d78:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409d7c:	eba9 0a01 	sub.w	sl, r9, r1
  409d80:	f8da 1004 	ldr.w	r1, [sl, #4]
  409d84:	f021 0103 	bic.w	r1, r1, #3
  409d88:	448b      	add	fp, r1
  409d8a:	4558      	cmp	r0, fp
  409d8c:	dce2      	bgt.n	409d54 <_realloc_r+0x1a0>
  409d8e:	4656      	mov	r6, sl
  409d90:	f8da 100c 	ldr.w	r1, [sl, #12]
  409d94:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409d98:	1f22      	subs	r2, r4, #4
  409d9a:	2a24      	cmp	r2, #36	; 0x24
  409d9c:	60c1      	str	r1, [r0, #12]
  409d9e:	6088      	str	r0, [r1, #8]
  409da0:	f200 808f 	bhi.w	409ec2 <_realloc_r+0x30e>
  409da4:	2a13      	cmp	r2, #19
  409da6:	f240 808a 	bls.w	409ebe <_realloc_r+0x30a>
  409daa:	6829      	ldr	r1, [r5, #0]
  409dac:	f8ca 1008 	str.w	r1, [sl, #8]
  409db0:	6869      	ldr	r1, [r5, #4]
  409db2:	f8ca 100c 	str.w	r1, [sl, #12]
  409db6:	2a1b      	cmp	r2, #27
  409db8:	f200 808a 	bhi.w	409ed0 <_realloc_r+0x31c>
  409dbc:	3508      	adds	r5, #8
  409dbe:	f10a 0210 	add.w	r2, sl, #16
  409dc2:	6829      	ldr	r1, [r5, #0]
  409dc4:	6011      	str	r1, [r2, #0]
  409dc6:	6869      	ldr	r1, [r5, #4]
  409dc8:	6051      	str	r1, [r2, #4]
  409dca:	68a9      	ldr	r1, [r5, #8]
  409dcc:	6091      	str	r1, [r2, #8]
  409dce:	eb0a 0107 	add.w	r1, sl, r7
  409dd2:	ebab 0207 	sub.w	r2, fp, r7
  409dd6:	f042 0201 	orr.w	r2, r2, #1
  409dda:	6099      	str	r1, [r3, #8]
  409ddc:	604a      	str	r2, [r1, #4]
  409dde:	f8da 3004 	ldr.w	r3, [sl, #4]
  409de2:	f003 0301 	and.w	r3, r3, #1
  409de6:	431f      	orrs	r7, r3
  409de8:	4640      	mov	r0, r8
  409dea:	f8ca 7004 	str.w	r7, [sl, #4]
  409dee:	f7ff fbe1 	bl	4095b4 <__malloc_unlock>
  409df2:	e751      	b.n	409c98 <_realloc_r+0xe4>
  409df4:	682b      	ldr	r3, [r5, #0]
  409df6:	6003      	str	r3, [r0, #0]
  409df8:	686b      	ldr	r3, [r5, #4]
  409dfa:	6043      	str	r3, [r0, #4]
  409dfc:	2a1b      	cmp	r2, #27
  409dfe:	d82d      	bhi.n	409e5c <_realloc_r+0x2a8>
  409e00:	f100 0308 	add.w	r3, r0, #8
  409e04:	f105 0208 	add.w	r2, r5, #8
  409e08:	e71b      	b.n	409c42 <_realloc_r+0x8e>
  409e0a:	4632      	mov	r2, r6
  409e0c:	6829      	ldr	r1, [r5, #0]
  409e0e:	6011      	str	r1, [r2, #0]
  409e10:	6869      	ldr	r1, [r5, #4]
  409e12:	6051      	str	r1, [r2, #4]
  409e14:	68a9      	ldr	r1, [r5, #8]
  409e16:	6091      	str	r1, [r2, #8]
  409e18:	461c      	mov	r4, r3
  409e1a:	46d1      	mov	r9, sl
  409e1c:	e72a      	b.n	409c74 <_realloc_r+0xc0>
  409e1e:	eb09 0107 	add.w	r1, r9, r7
  409e22:	ebab 0b07 	sub.w	fp, fp, r7
  409e26:	f04b 0201 	orr.w	r2, fp, #1
  409e2a:	6099      	str	r1, [r3, #8]
  409e2c:	604a      	str	r2, [r1, #4]
  409e2e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409e32:	f003 0301 	and.w	r3, r3, #1
  409e36:	431f      	orrs	r7, r3
  409e38:	4640      	mov	r0, r8
  409e3a:	f845 7c04 	str.w	r7, [r5, #-4]
  409e3e:	f7ff fbb9 	bl	4095b4 <__malloc_unlock>
  409e42:	462e      	mov	r6, r5
  409e44:	e728      	b.n	409c98 <_realloc_r+0xe4>
  409e46:	4629      	mov	r1, r5
  409e48:	f7ff fb4a 	bl	4094e0 <memmove>
  409e4c:	e6ff      	b.n	409c4e <_realloc_r+0x9a>
  409e4e:	4629      	mov	r1, r5
  409e50:	4630      	mov	r0, r6
  409e52:	461c      	mov	r4, r3
  409e54:	46d1      	mov	r9, sl
  409e56:	f7ff fb43 	bl	4094e0 <memmove>
  409e5a:	e70b      	b.n	409c74 <_realloc_r+0xc0>
  409e5c:	68ab      	ldr	r3, [r5, #8]
  409e5e:	6083      	str	r3, [r0, #8]
  409e60:	68eb      	ldr	r3, [r5, #12]
  409e62:	60c3      	str	r3, [r0, #12]
  409e64:	2a24      	cmp	r2, #36	; 0x24
  409e66:	d017      	beq.n	409e98 <_realloc_r+0x2e4>
  409e68:	f100 0310 	add.w	r3, r0, #16
  409e6c:	f105 0210 	add.w	r2, r5, #16
  409e70:	e6e7      	b.n	409c42 <_realloc_r+0x8e>
  409e72:	f850 3c04 	ldr.w	r3, [r0, #-4]
  409e76:	f023 0303 	bic.w	r3, r3, #3
  409e7a:	441c      	add	r4, r3
  409e7c:	462e      	mov	r6, r5
  409e7e:	e6f9      	b.n	409c74 <_realloc_r+0xc0>
  409e80:	68a9      	ldr	r1, [r5, #8]
  409e82:	f8ca 1010 	str.w	r1, [sl, #16]
  409e86:	68e9      	ldr	r1, [r5, #12]
  409e88:	f8ca 1014 	str.w	r1, [sl, #20]
  409e8c:	2a24      	cmp	r2, #36	; 0x24
  409e8e:	d00c      	beq.n	409eaa <_realloc_r+0x2f6>
  409e90:	3510      	adds	r5, #16
  409e92:	f10a 0218 	add.w	r2, sl, #24
  409e96:	e7b9      	b.n	409e0c <_realloc_r+0x258>
  409e98:	692b      	ldr	r3, [r5, #16]
  409e9a:	6103      	str	r3, [r0, #16]
  409e9c:	696b      	ldr	r3, [r5, #20]
  409e9e:	6143      	str	r3, [r0, #20]
  409ea0:	f105 0218 	add.w	r2, r5, #24
  409ea4:	f100 0318 	add.w	r3, r0, #24
  409ea8:	e6cb      	b.n	409c42 <_realloc_r+0x8e>
  409eaa:	692a      	ldr	r2, [r5, #16]
  409eac:	f8ca 2018 	str.w	r2, [sl, #24]
  409eb0:	696a      	ldr	r2, [r5, #20]
  409eb2:	f8ca 201c 	str.w	r2, [sl, #28]
  409eb6:	3518      	adds	r5, #24
  409eb8:	f10a 0220 	add.w	r2, sl, #32
  409ebc:	e7a6      	b.n	409e0c <_realloc_r+0x258>
  409ebe:	4632      	mov	r2, r6
  409ec0:	e77f      	b.n	409dc2 <_realloc_r+0x20e>
  409ec2:	4629      	mov	r1, r5
  409ec4:	4630      	mov	r0, r6
  409ec6:	9301      	str	r3, [sp, #4]
  409ec8:	f7ff fb0a 	bl	4094e0 <memmove>
  409ecc:	9b01      	ldr	r3, [sp, #4]
  409ece:	e77e      	b.n	409dce <_realloc_r+0x21a>
  409ed0:	68a9      	ldr	r1, [r5, #8]
  409ed2:	f8ca 1010 	str.w	r1, [sl, #16]
  409ed6:	68e9      	ldr	r1, [r5, #12]
  409ed8:	f8ca 1014 	str.w	r1, [sl, #20]
  409edc:	2a24      	cmp	r2, #36	; 0x24
  409ede:	d003      	beq.n	409ee8 <_realloc_r+0x334>
  409ee0:	3510      	adds	r5, #16
  409ee2:	f10a 0218 	add.w	r2, sl, #24
  409ee6:	e76c      	b.n	409dc2 <_realloc_r+0x20e>
  409ee8:	692a      	ldr	r2, [r5, #16]
  409eea:	f8ca 2018 	str.w	r2, [sl, #24]
  409eee:	696a      	ldr	r2, [r5, #20]
  409ef0:	f8ca 201c 	str.w	r2, [sl, #28]
  409ef4:	3518      	adds	r5, #24
  409ef6:	f10a 0220 	add.w	r2, sl, #32
  409efa:	e762      	b.n	409dc2 <_realloc_r+0x20e>
  409efc:	204005a8 	.word	0x204005a8

00409f00 <_sbrk_r>:
  409f00:	b538      	push	{r3, r4, r5, lr}
  409f02:	4c07      	ldr	r4, [pc, #28]	; (409f20 <_sbrk_r+0x20>)
  409f04:	2300      	movs	r3, #0
  409f06:	4605      	mov	r5, r0
  409f08:	4608      	mov	r0, r1
  409f0a:	6023      	str	r3, [r4, #0]
  409f0c:	f7f9 fd78 	bl	403a00 <_sbrk>
  409f10:	1c43      	adds	r3, r0, #1
  409f12:	d000      	beq.n	409f16 <_sbrk_r+0x16>
  409f14:	bd38      	pop	{r3, r4, r5, pc}
  409f16:	6823      	ldr	r3, [r4, #0]
  409f18:	2b00      	cmp	r3, #0
  409f1a:	d0fb      	beq.n	409f14 <_sbrk_r+0x14>
  409f1c:	602b      	str	r3, [r5, #0]
  409f1e:	bd38      	pop	{r3, r4, r5, pc}
  409f20:	2040c5ec 	.word	0x2040c5ec

00409f24 <_raise_r>:
  409f24:	291f      	cmp	r1, #31
  409f26:	d828      	bhi.n	409f7a <_raise_r+0x56>
  409f28:	b520      	push	{r5, lr}
  409f2a:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  409f2e:	b082      	sub	sp, #8
  409f30:	4605      	mov	r5, r0
  409f32:	b1aa      	cbz	r2, 409f60 <_raise_r+0x3c>
  409f34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  409f38:	b193      	cbz	r3, 409f60 <_raise_r+0x3c>
  409f3a:	2b01      	cmp	r3, #1
  409f3c:	d00e      	beq.n	409f5c <_raise_r+0x38>
  409f3e:	1c58      	adds	r0, r3, #1
  409f40:	d007      	beq.n	409f52 <_raise_r+0x2e>
  409f42:	2500      	movs	r5, #0
  409f44:	4608      	mov	r0, r1
  409f46:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409f4a:	4798      	blx	r3
  409f4c:	4628      	mov	r0, r5
  409f4e:	b002      	add	sp, #8
  409f50:	bd20      	pop	{r5, pc}
  409f52:	2316      	movs	r3, #22
  409f54:	2001      	movs	r0, #1
  409f56:	602b      	str	r3, [r5, #0]
  409f58:	b002      	add	sp, #8
  409f5a:	bd20      	pop	{r5, pc}
  409f5c:	2000      	movs	r0, #0
  409f5e:	e7f6      	b.n	409f4e <_raise_r+0x2a>
  409f60:	4628      	mov	r0, r5
  409f62:	9101      	str	r1, [sp, #4]
  409f64:	f000 f82a 	bl	409fbc <_getpid_r>
  409f68:	9901      	ldr	r1, [sp, #4]
  409f6a:	460a      	mov	r2, r1
  409f6c:	4601      	mov	r1, r0
  409f6e:	4628      	mov	r0, r5
  409f70:	b002      	add	sp, #8
  409f72:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
  409f76:	f000 b80d 	b.w	409f94 <_kill_r>
  409f7a:	2316      	movs	r3, #22
  409f7c:	6003      	str	r3, [r0, #0]
  409f7e:	f04f 30ff 	mov.w	r0, #4294967295
  409f82:	4770      	bx	lr

00409f84 <raise>:
  409f84:	4b02      	ldr	r3, [pc, #8]	; (409f90 <raise+0xc>)
  409f86:	4601      	mov	r1, r0
  409f88:	6818      	ldr	r0, [r3, #0]
  409f8a:	f7ff bfcb 	b.w	409f24 <_raise_r>
  409f8e:	bf00      	nop
  409f90:	2040000c 	.word	0x2040000c

00409f94 <_kill_r>:
  409f94:	b538      	push	{r3, r4, r5, lr}
  409f96:	460b      	mov	r3, r1
  409f98:	4c07      	ldr	r4, [pc, #28]	; (409fb8 <_kill_r+0x24>)
  409f9a:	4605      	mov	r5, r0
  409f9c:	4611      	mov	r1, r2
  409f9e:	4618      	mov	r0, r3
  409fa0:	2300      	movs	r3, #0
  409fa2:	6023      	str	r3, [r4, #0]
  409fa4:	f7f9 fdbc 	bl	403b20 <_kill>
  409fa8:	1c43      	adds	r3, r0, #1
  409faa:	d000      	beq.n	409fae <_kill_r+0x1a>
  409fac:	bd38      	pop	{r3, r4, r5, pc}
  409fae:	6823      	ldr	r3, [r4, #0]
  409fb0:	2b00      	cmp	r3, #0
  409fb2:	d0fb      	beq.n	409fac <_kill_r+0x18>
  409fb4:	602b      	str	r3, [r5, #0]
  409fb6:	bd38      	pop	{r3, r4, r5, pc}
  409fb8:	2040c5ec 	.word	0x2040c5ec

00409fbc <_getpid_r>:
  409fbc:	f7f9 bdbb 	b.w	403b36 <_getpid>

00409fc0 <__sread>:
  409fc0:	b510      	push	{r4, lr}
  409fc2:	460c      	mov	r4, r1
  409fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409fc8:	f000 fa26 	bl	40a418 <_read_r>
  409fcc:	2800      	cmp	r0, #0
  409fce:	db03      	blt.n	409fd8 <__sread+0x18>
  409fd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  409fd2:	4403      	add	r3, r0
  409fd4:	6523      	str	r3, [r4, #80]	; 0x50
  409fd6:	bd10      	pop	{r4, pc}
  409fd8:	89a3      	ldrh	r3, [r4, #12]
  409fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409fde:	81a3      	strh	r3, [r4, #12]
  409fe0:	bd10      	pop	{r4, pc}
  409fe2:	bf00      	nop

00409fe4 <__swrite>:
  409fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409fe8:	4616      	mov	r6, r2
  409fea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409fee:	461f      	mov	r7, r3
  409ff0:	05d3      	lsls	r3, r2, #23
  409ff2:	460c      	mov	r4, r1
  409ff4:	4605      	mov	r5, r0
  409ff6:	d507      	bpl.n	40a008 <__swrite+0x24>
  409ff8:	2200      	movs	r2, #0
  409ffa:	2302      	movs	r3, #2
  409ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a000:	f000 f9f4 	bl	40a3ec <_lseek_r>
  40a004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a00c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40a010:	81a2      	strh	r2, [r4, #12]
  40a012:	463b      	mov	r3, r7
  40a014:	4632      	mov	r2, r6
  40a016:	4628      	mov	r0, r5
  40a018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a01c:	f000 b8a4 	b.w	40a168 <_write_r>

0040a020 <__sseek>:
  40a020:	b510      	push	{r4, lr}
  40a022:	460c      	mov	r4, r1
  40a024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a028:	f000 f9e0 	bl	40a3ec <_lseek_r>
  40a02c:	89a3      	ldrh	r3, [r4, #12]
  40a02e:	1c42      	adds	r2, r0, #1
  40a030:	bf0e      	itee	eq
  40a032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40a036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40a03a:	6520      	strne	r0, [r4, #80]	; 0x50
  40a03c:	81a3      	strh	r3, [r4, #12]
  40a03e:	bd10      	pop	{r4, pc}

0040a040 <__sclose>:
  40a040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a044:	f000 b938 	b.w	40a2b8 <_close_r>

0040a048 <__swbuf_r>:
  40a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a04a:	460d      	mov	r5, r1
  40a04c:	4614      	mov	r4, r2
  40a04e:	4606      	mov	r6, r0
  40a050:	b110      	cbz	r0, 40a058 <__swbuf_r+0x10>
  40a052:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a054:	2b00      	cmp	r3, #0
  40a056:	d04b      	beq.n	40a0f0 <__swbuf_r+0xa8>
  40a058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a05c:	69a3      	ldr	r3, [r4, #24]
  40a05e:	60a3      	str	r3, [r4, #8]
  40a060:	b291      	uxth	r1, r2
  40a062:	0708      	lsls	r0, r1, #28
  40a064:	d539      	bpl.n	40a0da <__swbuf_r+0x92>
  40a066:	6923      	ldr	r3, [r4, #16]
  40a068:	2b00      	cmp	r3, #0
  40a06a:	d036      	beq.n	40a0da <__swbuf_r+0x92>
  40a06c:	b2ed      	uxtb	r5, r5
  40a06e:	0489      	lsls	r1, r1, #18
  40a070:	462f      	mov	r7, r5
  40a072:	d515      	bpl.n	40a0a0 <__swbuf_r+0x58>
  40a074:	6822      	ldr	r2, [r4, #0]
  40a076:	6961      	ldr	r1, [r4, #20]
  40a078:	1ad3      	subs	r3, r2, r3
  40a07a:	428b      	cmp	r3, r1
  40a07c:	da1c      	bge.n	40a0b8 <__swbuf_r+0x70>
  40a07e:	3301      	adds	r3, #1
  40a080:	68a1      	ldr	r1, [r4, #8]
  40a082:	1c50      	adds	r0, r2, #1
  40a084:	3901      	subs	r1, #1
  40a086:	60a1      	str	r1, [r4, #8]
  40a088:	6020      	str	r0, [r4, #0]
  40a08a:	7015      	strb	r5, [r2, #0]
  40a08c:	6962      	ldr	r2, [r4, #20]
  40a08e:	429a      	cmp	r2, r3
  40a090:	d01a      	beq.n	40a0c8 <__swbuf_r+0x80>
  40a092:	89a3      	ldrh	r3, [r4, #12]
  40a094:	07db      	lsls	r3, r3, #31
  40a096:	d501      	bpl.n	40a09c <__swbuf_r+0x54>
  40a098:	2d0a      	cmp	r5, #10
  40a09a:	d015      	beq.n	40a0c8 <__swbuf_r+0x80>
  40a09c:	4638      	mov	r0, r7
  40a09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a0a0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40a0a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a0a6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40a0aa:	81a2      	strh	r2, [r4, #12]
  40a0ac:	6822      	ldr	r2, [r4, #0]
  40a0ae:	6661      	str	r1, [r4, #100]	; 0x64
  40a0b0:	6961      	ldr	r1, [r4, #20]
  40a0b2:	1ad3      	subs	r3, r2, r3
  40a0b4:	428b      	cmp	r3, r1
  40a0b6:	dbe2      	blt.n	40a07e <__swbuf_r+0x36>
  40a0b8:	4621      	mov	r1, r4
  40a0ba:	4630      	mov	r0, r6
  40a0bc:	f7fe fa4a 	bl	408554 <_fflush_r>
  40a0c0:	b940      	cbnz	r0, 40a0d4 <__swbuf_r+0x8c>
  40a0c2:	6822      	ldr	r2, [r4, #0]
  40a0c4:	2301      	movs	r3, #1
  40a0c6:	e7db      	b.n	40a080 <__swbuf_r+0x38>
  40a0c8:	4621      	mov	r1, r4
  40a0ca:	4630      	mov	r0, r6
  40a0cc:	f7fe fa42 	bl	408554 <_fflush_r>
  40a0d0:	2800      	cmp	r0, #0
  40a0d2:	d0e3      	beq.n	40a09c <__swbuf_r+0x54>
  40a0d4:	f04f 37ff 	mov.w	r7, #4294967295
  40a0d8:	e7e0      	b.n	40a09c <__swbuf_r+0x54>
  40a0da:	4621      	mov	r1, r4
  40a0dc:	4630      	mov	r0, r6
  40a0de:	f7fd f95f 	bl	4073a0 <__swsetup_r>
  40a0e2:	2800      	cmp	r0, #0
  40a0e4:	d1f6      	bne.n	40a0d4 <__swbuf_r+0x8c>
  40a0e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a0ea:	6923      	ldr	r3, [r4, #16]
  40a0ec:	b291      	uxth	r1, r2
  40a0ee:	e7bd      	b.n	40a06c <__swbuf_r+0x24>
  40a0f0:	f7fe fa88 	bl	408604 <__sinit>
  40a0f4:	e7b0      	b.n	40a058 <__swbuf_r+0x10>
  40a0f6:	bf00      	nop

0040a0f8 <_wcrtomb_r>:
  40a0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a0fa:	4606      	mov	r6, r0
  40a0fc:	b085      	sub	sp, #20
  40a0fe:	461f      	mov	r7, r3
  40a100:	b189      	cbz	r1, 40a126 <_wcrtomb_r+0x2e>
  40a102:	4c10      	ldr	r4, [pc, #64]	; (40a144 <_wcrtomb_r+0x4c>)
  40a104:	4d10      	ldr	r5, [pc, #64]	; (40a148 <_wcrtomb_r+0x50>)
  40a106:	6824      	ldr	r4, [r4, #0]
  40a108:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40a10a:	2c00      	cmp	r4, #0
  40a10c:	bf08      	it	eq
  40a10e:	462c      	moveq	r4, r5
  40a110:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40a114:	47a0      	blx	r4
  40a116:	1c43      	adds	r3, r0, #1
  40a118:	d103      	bne.n	40a122 <_wcrtomb_r+0x2a>
  40a11a:	2200      	movs	r2, #0
  40a11c:	238a      	movs	r3, #138	; 0x8a
  40a11e:	603a      	str	r2, [r7, #0]
  40a120:	6033      	str	r3, [r6, #0]
  40a122:	b005      	add	sp, #20
  40a124:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a126:	460c      	mov	r4, r1
  40a128:	4906      	ldr	r1, [pc, #24]	; (40a144 <_wcrtomb_r+0x4c>)
  40a12a:	4a07      	ldr	r2, [pc, #28]	; (40a148 <_wcrtomb_r+0x50>)
  40a12c:	6809      	ldr	r1, [r1, #0]
  40a12e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40a130:	2900      	cmp	r1, #0
  40a132:	bf08      	it	eq
  40a134:	4611      	moveq	r1, r2
  40a136:	4622      	mov	r2, r4
  40a138:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40a13c:	a901      	add	r1, sp, #4
  40a13e:	47a0      	blx	r4
  40a140:	e7e9      	b.n	40a116 <_wcrtomb_r+0x1e>
  40a142:	bf00      	nop
  40a144:	2040000c 	.word	0x2040000c
  40a148:	2040043c 	.word	0x2040043c

0040a14c <__ascii_wctomb>:
  40a14c:	b121      	cbz	r1, 40a158 <__ascii_wctomb+0xc>
  40a14e:	2aff      	cmp	r2, #255	; 0xff
  40a150:	d804      	bhi.n	40a15c <__ascii_wctomb+0x10>
  40a152:	700a      	strb	r2, [r1, #0]
  40a154:	2001      	movs	r0, #1
  40a156:	4770      	bx	lr
  40a158:	4608      	mov	r0, r1
  40a15a:	4770      	bx	lr
  40a15c:	238a      	movs	r3, #138	; 0x8a
  40a15e:	6003      	str	r3, [r0, #0]
  40a160:	f04f 30ff 	mov.w	r0, #4294967295
  40a164:	4770      	bx	lr
  40a166:	bf00      	nop

0040a168 <_write_r>:
  40a168:	b570      	push	{r4, r5, r6, lr}
  40a16a:	460d      	mov	r5, r1
  40a16c:	4c08      	ldr	r4, [pc, #32]	; (40a190 <_write_r+0x28>)
  40a16e:	4611      	mov	r1, r2
  40a170:	4606      	mov	r6, r0
  40a172:	461a      	mov	r2, r3
  40a174:	4628      	mov	r0, r5
  40a176:	2300      	movs	r3, #0
  40a178:	6023      	str	r3, [r4, #0]
  40a17a:	f7f9 fca3 	bl	403ac4 <_write>
  40a17e:	1c43      	adds	r3, r0, #1
  40a180:	d000      	beq.n	40a184 <_write_r+0x1c>
  40a182:	bd70      	pop	{r4, r5, r6, pc}
  40a184:	6823      	ldr	r3, [r4, #0]
  40a186:	2b00      	cmp	r3, #0
  40a188:	d0fb      	beq.n	40a182 <_write_r+0x1a>
  40a18a:	6033      	str	r3, [r6, #0]
  40a18c:	bd70      	pop	{r4, r5, r6, pc}
  40a18e:	bf00      	nop
  40a190:	2040c5ec 	.word	0x2040c5ec

0040a194 <__register_exitproc>:
  40a194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a198:	4d2c      	ldr	r5, [pc, #176]	; (40a24c <__register_exitproc+0xb8>)
  40a19a:	4606      	mov	r6, r0
  40a19c:	6828      	ldr	r0, [r5, #0]
  40a19e:	4698      	mov	r8, r3
  40a1a0:	460f      	mov	r7, r1
  40a1a2:	4691      	mov	r9, r2
  40a1a4:	f7fe fdfc 	bl	408da0 <__retarget_lock_acquire_recursive>
  40a1a8:	4b29      	ldr	r3, [pc, #164]	; (40a250 <__register_exitproc+0xbc>)
  40a1aa:	681c      	ldr	r4, [r3, #0]
  40a1ac:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40a1b0:	2b00      	cmp	r3, #0
  40a1b2:	d03e      	beq.n	40a232 <__register_exitproc+0x9e>
  40a1b4:	685a      	ldr	r2, [r3, #4]
  40a1b6:	2a1f      	cmp	r2, #31
  40a1b8:	dc1c      	bgt.n	40a1f4 <__register_exitproc+0x60>
  40a1ba:	f102 0e01 	add.w	lr, r2, #1
  40a1be:	b176      	cbz	r6, 40a1de <__register_exitproc+0x4a>
  40a1c0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40a1c4:	2401      	movs	r4, #1
  40a1c6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40a1ca:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40a1ce:	4094      	lsls	r4, r2
  40a1d0:	4320      	orrs	r0, r4
  40a1d2:	2e02      	cmp	r6, #2
  40a1d4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40a1d8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40a1dc:	d023      	beq.n	40a226 <__register_exitproc+0x92>
  40a1de:	3202      	adds	r2, #2
  40a1e0:	f8c3 e004 	str.w	lr, [r3, #4]
  40a1e4:	6828      	ldr	r0, [r5, #0]
  40a1e6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40a1ea:	f7fe fddb 	bl	408da4 <__retarget_lock_release_recursive>
  40a1ee:	2000      	movs	r0, #0
  40a1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a1f4:	4b17      	ldr	r3, [pc, #92]	; (40a254 <__register_exitproc+0xc0>)
  40a1f6:	b30b      	cbz	r3, 40a23c <__register_exitproc+0xa8>
  40a1f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40a1fc:	f7fe fe4c 	bl	408e98 <malloc>
  40a200:	4603      	mov	r3, r0
  40a202:	b1d8      	cbz	r0, 40a23c <__register_exitproc+0xa8>
  40a204:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40a208:	6002      	str	r2, [r0, #0]
  40a20a:	2100      	movs	r1, #0
  40a20c:	6041      	str	r1, [r0, #4]
  40a20e:	460a      	mov	r2, r1
  40a210:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40a214:	f04f 0e01 	mov.w	lr, #1
  40a218:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40a21c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40a220:	2e00      	cmp	r6, #0
  40a222:	d0dc      	beq.n	40a1de <__register_exitproc+0x4a>
  40a224:	e7cc      	b.n	40a1c0 <__register_exitproc+0x2c>
  40a226:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40a22a:	430c      	orrs	r4, r1
  40a22c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40a230:	e7d5      	b.n	40a1de <__register_exitproc+0x4a>
  40a232:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40a236:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40a23a:	e7bb      	b.n	40a1b4 <__register_exitproc+0x20>
  40a23c:	6828      	ldr	r0, [r5, #0]
  40a23e:	f7fe fdb1 	bl	408da4 <__retarget_lock_release_recursive>
  40a242:	f04f 30ff 	mov.w	r0, #4294967295
  40a246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a24a:	bf00      	nop
  40a24c:	20400438 	.word	0x20400438
  40a250:	0040a9f8 	.word	0x0040a9f8
  40a254:	00408e99 	.word	0x00408e99

0040a258 <_calloc_r>:
  40a258:	b510      	push	{r4, lr}
  40a25a:	fb02 f101 	mul.w	r1, r2, r1
  40a25e:	f7fe fe23 	bl	408ea8 <_malloc_r>
  40a262:	4604      	mov	r4, r0
  40a264:	b1d8      	cbz	r0, 40a29e <_calloc_r+0x46>
  40a266:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a26a:	f022 0203 	bic.w	r2, r2, #3
  40a26e:	3a04      	subs	r2, #4
  40a270:	2a24      	cmp	r2, #36	; 0x24
  40a272:	d818      	bhi.n	40a2a6 <_calloc_r+0x4e>
  40a274:	2a13      	cmp	r2, #19
  40a276:	d914      	bls.n	40a2a2 <_calloc_r+0x4a>
  40a278:	2300      	movs	r3, #0
  40a27a:	2a1b      	cmp	r2, #27
  40a27c:	6003      	str	r3, [r0, #0]
  40a27e:	6043      	str	r3, [r0, #4]
  40a280:	d916      	bls.n	40a2b0 <_calloc_r+0x58>
  40a282:	2a24      	cmp	r2, #36	; 0x24
  40a284:	6083      	str	r3, [r0, #8]
  40a286:	60c3      	str	r3, [r0, #12]
  40a288:	bf11      	iteee	ne
  40a28a:	f100 0210 	addne.w	r2, r0, #16
  40a28e:	6103      	streq	r3, [r0, #16]
  40a290:	6143      	streq	r3, [r0, #20]
  40a292:	f100 0218 	addeq.w	r2, r0, #24
  40a296:	2300      	movs	r3, #0
  40a298:	6013      	str	r3, [r2, #0]
  40a29a:	6053      	str	r3, [r2, #4]
  40a29c:	6093      	str	r3, [r2, #8]
  40a29e:	4620      	mov	r0, r4
  40a2a0:	bd10      	pop	{r4, pc}
  40a2a2:	4602      	mov	r2, r0
  40a2a4:	e7f7      	b.n	40a296 <_calloc_r+0x3e>
  40a2a6:	2100      	movs	r1, #0
  40a2a8:	f7fa fd18 	bl	404cdc <memset>
  40a2ac:	4620      	mov	r0, r4
  40a2ae:	bd10      	pop	{r4, pc}
  40a2b0:	f100 0208 	add.w	r2, r0, #8
  40a2b4:	e7ef      	b.n	40a296 <_calloc_r+0x3e>
  40a2b6:	bf00      	nop

0040a2b8 <_close_r>:
  40a2b8:	b538      	push	{r3, r4, r5, lr}
  40a2ba:	4c07      	ldr	r4, [pc, #28]	; (40a2d8 <_close_r+0x20>)
  40a2bc:	2300      	movs	r3, #0
  40a2be:	4605      	mov	r5, r0
  40a2c0:	4608      	mov	r0, r1
  40a2c2:	6023      	str	r3, [r4, #0]
  40a2c4:	f7f9 fbbc 	bl	403a40 <_close>
  40a2c8:	1c43      	adds	r3, r0, #1
  40a2ca:	d000      	beq.n	40a2ce <_close_r+0x16>
  40a2cc:	bd38      	pop	{r3, r4, r5, pc}
  40a2ce:	6823      	ldr	r3, [r4, #0]
  40a2d0:	2b00      	cmp	r3, #0
  40a2d2:	d0fb      	beq.n	40a2cc <_close_r+0x14>
  40a2d4:	602b      	str	r3, [r5, #0]
  40a2d6:	bd38      	pop	{r3, r4, r5, pc}
  40a2d8:	2040c5ec 	.word	0x2040c5ec

0040a2dc <_fclose_r>:
  40a2dc:	b570      	push	{r4, r5, r6, lr}
  40a2de:	b159      	cbz	r1, 40a2f8 <_fclose_r+0x1c>
  40a2e0:	4605      	mov	r5, r0
  40a2e2:	460c      	mov	r4, r1
  40a2e4:	b110      	cbz	r0, 40a2ec <_fclose_r+0x10>
  40a2e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a2e8:	2b00      	cmp	r3, #0
  40a2ea:	d03c      	beq.n	40a366 <_fclose_r+0x8a>
  40a2ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a2ee:	07d8      	lsls	r0, r3, #31
  40a2f0:	d505      	bpl.n	40a2fe <_fclose_r+0x22>
  40a2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a2f6:	b92b      	cbnz	r3, 40a304 <_fclose_r+0x28>
  40a2f8:	2600      	movs	r6, #0
  40a2fa:	4630      	mov	r0, r6
  40a2fc:	bd70      	pop	{r4, r5, r6, pc}
  40a2fe:	89a3      	ldrh	r3, [r4, #12]
  40a300:	0599      	lsls	r1, r3, #22
  40a302:	d53c      	bpl.n	40a37e <_fclose_r+0xa2>
  40a304:	4621      	mov	r1, r4
  40a306:	4628      	mov	r0, r5
  40a308:	f7fe f884 	bl	408414 <__sflush_r>
  40a30c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a30e:	4606      	mov	r6, r0
  40a310:	b133      	cbz	r3, 40a320 <_fclose_r+0x44>
  40a312:	69e1      	ldr	r1, [r4, #28]
  40a314:	4628      	mov	r0, r5
  40a316:	4798      	blx	r3
  40a318:	2800      	cmp	r0, #0
  40a31a:	bfb8      	it	lt
  40a31c:	f04f 36ff 	movlt.w	r6, #4294967295
  40a320:	89a3      	ldrh	r3, [r4, #12]
  40a322:	061a      	lsls	r2, r3, #24
  40a324:	d422      	bmi.n	40a36c <_fclose_r+0x90>
  40a326:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a328:	b141      	cbz	r1, 40a33c <_fclose_r+0x60>
  40a32a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a32e:	4299      	cmp	r1, r3
  40a330:	d002      	beq.n	40a338 <_fclose_r+0x5c>
  40a332:	4628      	mov	r0, r5
  40a334:	f7fe fa8c 	bl	408850 <_free_r>
  40a338:	2300      	movs	r3, #0
  40a33a:	6323      	str	r3, [r4, #48]	; 0x30
  40a33c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40a33e:	b121      	cbz	r1, 40a34a <_fclose_r+0x6e>
  40a340:	4628      	mov	r0, r5
  40a342:	f7fe fa85 	bl	408850 <_free_r>
  40a346:	2300      	movs	r3, #0
  40a348:	6463      	str	r3, [r4, #68]	; 0x44
  40a34a:	f7fe f987 	bl	40865c <__sfp_lock_acquire>
  40a34e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a350:	2200      	movs	r2, #0
  40a352:	07db      	lsls	r3, r3, #31
  40a354:	81a2      	strh	r2, [r4, #12]
  40a356:	d50e      	bpl.n	40a376 <_fclose_r+0x9a>
  40a358:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a35a:	f7fe fd1f 	bl	408d9c <__retarget_lock_close_recursive>
  40a35e:	f7fe f983 	bl	408668 <__sfp_lock_release>
  40a362:	4630      	mov	r0, r6
  40a364:	bd70      	pop	{r4, r5, r6, pc}
  40a366:	f7fe f94d 	bl	408604 <__sinit>
  40a36a:	e7bf      	b.n	40a2ec <_fclose_r+0x10>
  40a36c:	6921      	ldr	r1, [r4, #16]
  40a36e:	4628      	mov	r0, r5
  40a370:	f7fe fa6e 	bl	408850 <_free_r>
  40a374:	e7d7      	b.n	40a326 <_fclose_r+0x4a>
  40a376:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a378:	f7fe fd14 	bl	408da4 <__retarget_lock_release_recursive>
  40a37c:	e7ec      	b.n	40a358 <_fclose_r+0x7c>
  40a37e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a380:	f7fe fd0e 	bl	408da0 <__retarget_lock_acquire_recursive>
  40a384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a388:	2b00      	cmp	r3, #0
  40a38a:	d1bb      	bne.n	40a304 <_fclose_r+0x28>
  40a38c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40a38e:	f016 0601 	ands.w	r6, r6, #1
  40a392:	d1b1      	bne.n	40a2f8 <_fclose_r+0x1c>
  40a394:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a396:	f7fe fd05 	bl	408da4 <__retarget_lock_release_recursive>
  40a39a:	4630      	mov	r0, r6
  40a39c:	bd70      	pop	{r4, r5, r6, pc}
  40a39e:	bf00      	nop

0040a3a0 <_fstat_r>:
  40a3a0:	b538      	push	{r3, r4, r5, lr}
  40a3a2:	460b      	mov	r3, r1
  40a3a4:	4c07      	ldr	r4, [pc, #28]	; (40a3c4 <_fstat_r+0x24>)
  40a3a6:	4605      	mov	r5, r0
  40a3a8:	4611      	mov	r1, r2
  40a3aa:	4618      	mov	r0, r3
  40a3ac:	2300      	movs	r3, #0
  40a3ae:	6023      	str	r3, [r4, #0]
  40a3b0:	f7f9 fb52 	bl	403a58 <_fstat>
  40a3b4:	1c43      	adds	r3, r0, #1
  40a3b6:	d000      	beq.n	40a3ba <_fstat_r+0x1a>
  40a3b8:	bd38      	pop	{r3, r4, r5, pc}
  40a3ba:	6823      	ldr	r3, [r4, #0]
  40a3bc:	2b00      	cmp	r3, #0
  40a3be:	d0fb      	beq.n	40a3b8 <_fstat_r+0x18>
  40a3c0:	602b      	str	r3, [r5, #0]
  40a3c2:	bd38      	pop	{r3, r4, r5, pc}
  40a3c4:	2040c5ec 	.word	0x2040c5ec

0040a3c8 <_isatty_r>:
  40a3c8:	b538      	push	{r3, r4, r5, lr}
  40a3ca:	4c07      	ldr	r4, [pc, #28]	; (40a3e8 <_isatty_r+0x20>)
  40a3cc:	2300      	movs	r3, #0
  40a3ce:	4605      	mov	r5, r0
  40a3d0:	4608      	mov	r0, r1
  40a3d2:	6023      	str	r3, [r4, #0]
  40a3d4:	f7f9 fb50 	bl	403a78 <_isatty>
  40a3d8:	1c43      	adds	r3, r0, #1
  40a3da:	d000      	beq.n	40a3de <_isatty_r+0x16>
  40a3dc:	bd38      	pop	{r3, r4, r5, pc}
  40a3de:	6823      	ldr	r3, [r4, #0]
  40a3e0:	2b00      	cmp	r3, #0
  40a3e2:	d0fb      	beq.n	40a3dc <_isatty_r+0x14>
  40a3e4:	602b      	str	r3, [r5, #0]
  40a3e6:	bd38      	pop	{r3, r4, r5, pc}
  40a3e8:	2040c5ec 	.word	0x2040c5ec

0040a3ec <_lseek_r>:
  40a3ec:	b570      	push	{r4, r5, r6, lr}
  40a3ee:	460d      	mov	r5, r1
  40a3f0:	4c08      	ldr	r4, [pc, #32]	; (40a414 <_lseek_r+0x28>)
  40a3f2:	4611      	mov	r1, r2
  40a3f4:	4606      	mov	r6, r0
  40a3f6:	461a      	mov	r2, r3
  40a3f8:	4628      	mov	r0, r5
  40a3fa:	2300      	movs	r3, #0
  40a3fc:	6023      	str	r3, [r4, #0]
  40a3fe:	f7f9 fb46 	bl	403a8e <_lseek>
  40a402:	1c43      	adds	r3, r0, #1
  40a404:	d000      	beq.n	40a408 <_lseek_r+0x1c>
  40a406:	bd70      	pop	{r4, r5, r6, pc}
  40a408:	6823      	ldr	r3, [r4, #0]
  40a40a:	2b00      	cmp	r3, #0
  40a40c:	d0fb      	beq.n	40a406 <_lseek_r+0x1a>
  40a40e:	6033      	str	r3, [r6, #0]
  40a410:	bd70      	pop	{r4, r5, r6, pc}
  40a412:	bf00      	nop
  40a414:	2040c5ec 	.word	0x2040c5ec

0040a418 <_read_r>:
  40a418:	b570      	push	{r4, r5, r6, lr}
  40a41a:	460d      	mov	r5, r1
  40a41c:	4c08      	ldr	r4, [pc, #32]	; (40a440 <_read_r+0x28>)
  40a41e:	4611      	mov	r1, r2
  40a420:	4606      	mov	r6, r0
  40a422:	461a      	mov	r2, r3
  40a424:	4628      	mov	r0, r5
  40a426:	2300      	movs	r3, #0
  40a428:	6023      	str	r3, [r4, #0]
  40a42a:	f7f9 fb3d 	bl	403aa8 <_read>
  40a42e:	1c43      	adds	r3, r0, #1
  40a430:	d000      	beq.n	40a434 <_read_r+0x1c>
  40a432:	bd70      	pop	{r4, r5, r6, pc}
  40a434:	6823      	ldr	r3, [r4, #0]
  40a436:	2b00      	cmp	r3, #0
  40a438:	d0fb      	beq.n	40a432 <_read_r+0x1a>
  40a43a:	6033      	str	r3, [r6, #0]
  40a43c:	bd70      	pop	{r4, r5, r6, pc}
  40a43e:	bf00      	nop
  40a440:	2040c5ec 	.word	0x2040c5ec

0040a444 <__aeabi_dcmpun>:
  40a444:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a448:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a44c:	d102      	bne.n	40a454 <__aeabi_dcmpun+0x10>
  40a44e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a452:	d10a      	bne.n	40a46a <__aeabi_dcmpun+0x26>
  40a454:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a458:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a45c:	d102      	bne.n	40a464 <__aeabi_dcmpun+0x20>
  40a45e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a462:	d102      	bne.n	40a46a <__aeabi_dcmpun+0x26>
  40a464:	f04f 0000 	mov.w	r0, #0
  40a468:	4770      	bx	lr
  40a46a:	f04f 0001 	mov.w	r0, #1
  40a46e:	4770      	bx	lr

0040a470 <__aeabi_d2iz>:
  40a470:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a474:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40a478:	d215      	bcs.n	40a4a6 <__aeabi_d2iz+0x36>
  40a47a:	d511      	bpl.n	40a4a0 <__aeabi_d2iz+0x30>
  40a47c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40a480:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40a484:	d912      	bls.n	40a4ac <__aeabi_d2iz+0x3c>
  40a486:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a48a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a48e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40a492:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a496:	fa23 f002 	lsr.w	r0, r3, r2
  40a49a:	bf18      	it	ne
  40a49c:	4240      	negne	r0, r0
  40a49e:	4770      	bx	lr
  40a4a0:	f04f 0000 	mov.w	r0, #0
  40a4a4:	4770      	bx	lr
  40a4a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40a4aa:	d105      	bne.n	40a4b8 <__aeabi_d2iz+0x48>
  40a4ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40a4b0:	bf08      	it	eq
  40a4b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40a4b6:	4770      	bx	lr
  40a4b8:	f04f 0000 	mov.w	r0, #0
  40a4bc:	4770      	bx	lr
  40a4be:	bf00      	nop

0040a4c0 <__aeabi_uldivmod>:
  40a4c0:	b953      	cbnz	r3, 40a4d8 <__aeabi_uldivmod+0x18>
  40a4c2:	b94a      	cbnz	r2, 40a4d8 <__aeabi_uldivmod+0x18>
  40a4c4:	2900      	cmp	r1, #0
  40a4c6:	bf08      	it	eq
  40a4c8:	2800      	cmpeq	r0, #0
  40a4ca:	bf1c      	itt	ne
  40a4cc:	f04f 31ff 	movne.w	r1, #4294967295
  40a4d0:	f04f 30ff 	movne.w	r0, #4294967295
  40a4d4:	f000 b97a 	b.w	40a7cc <__aeabi_idiv0>
  40a4d8:	f1ad 0c08 	sub.w	ip, sp, #8
  40a4dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40a4e0:	f000 f806 	bl	40a4f0 <__udivmoddi4>
  40a4e4:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a4e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a4ec:	b004      	add	sp, #16
  40a4ee:	4770      	bx	lr

0040a4f0 <__udivmoddi4>:
  40a4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a4f4:	468c      	mov	ip, r1
  40a4f6:	460d      	mov	r5, r1
  40a4f8:	4604      	mov	r4, r0
  40a4fa:	9e08      	ldr	r6, [sp, #32]
  40a4fc:	2b00      	cmp	r3, #0
  40a4fe:	d151      	bne.n	40a5a4 <__udivmoddi4+0xb4>
  40a500:	428a      	cmp	r2, r1
  40a502:	4617      	mov	r7, r2
  40a504:	d96d      	bls.n	40a5e2 <__udivmoddi4+0xf2>
  40a506:	fab2 fe82 	clz	lr, r2
  40a50a:	f1be 0f00 	cmp.w	lr, #0
  40a50e:	d00b      	beq.n	40a528 <__udivmoddi4+0x38>
  40a510:	f1ce 0c20 	rsb	ip, lr, #32
  40a514:	fa01 f50e 	lsl.w	r5, r1, lr
  40a518:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a51c:	fa02 f70e 	lsl.w	r7, r2, lr
  40a520:	ea4c 0c05 	orr.w	ip, ip, r5
  40a524:	fa00 f40e 	lsl.w	r4, r0, lr
  40a528:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40a52c:	0c25      	lsrs	r5, r4, #16
  40a52e:	fbbc f8fa 	udiv	r8, ip, sl
  40a532:	fa1f f987 	uxth.w	r9, r7
  40a536:	fb0a cc18 	mls	ip, sl, r8, ip
  40a53a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40a53e:	fb08 f309 	mul.w	r3, r8, r9
  40a542:	42ab      	cmp	r3, r5
  40a544:	d90a      	bls.n	40a55c <__udivmoddi4+0x6c>
  40a546:	19ed      	adds	r5, r5, r7
  40a548:	f108 32ff 	add.w	r2, r8, #4294967295
  40a54c:	f080 8123 	bcs.w	40a796 <__udivmoddi4+0x2a6>
  40a550:	42ab      	cmp	r3, r5
  40a552:	f240 8120 	bls.w	40a796 <__udivmoddi4+0x2a6>
  40a556:	f1a8 0802 	sub.w	r8, r8, #2
  40a55a:	443d      	add	r5, r7
  40a55c:	1aed      	subs	r5, r5, r3
  40a55e:	b2a4      	uxth	r4, r4
  40a560:	fbb5 f0fa 	udiv	r0, r5, sl
  40a564:	fb0a 5510 	mls	r5, sl, r0, r5
  40a568:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40a56c:	fb00 f909 	mul.w	r9, r0, r9
  40a570:	45a1      	cmp	r9, r4
  40a572:	d909      	bls.n	40a588 <__udivmoddi4+0x98>
  40a574:	19e4      	adds	r4, r4, r7
  40a576:	f100 33ff 	add.w	r3, r0, #4294967295
  40a57a:	f080 810a 	bcs.w	40a792 <__udivmoddi4+0x2a2>
  40a57e:	45a1      	cmp	r9, r4
  40a580:	f240 8107 	bls.w	40a792 <__udivmoddi4+0x2a2>
  40a584:	3802      	subs	r0, #2
  40a586:	443c      	add	r4, r7
  40a588:	eba4 0409 	sub.w	r4, r4, r9
  40a58c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a590:	2100      	movs	r1, #0
  40a592:	2e00      	cmp	r6, #0
  40a594:	d061      	beq.n	40a65a <__udivmoddi4+0x16a>
  40a596:	fa24 f40e 	lsr.w	r4, r4, lr
  40a59a:	2300      	movs	r3, #0
  40a59c:	6034      	str	r4, [r6, #0]
  40a59e:	6073      	str	r3, [r6, #4]
  40a5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a5a4:	428b      	cmp	r3, r1
  40a5a6:	d907      	bls.n	40a5b8 <__udivmoddi4+0xc8>
  40a5a8:	2e00      	cmp	r6, #0
  40a5aa:	d054      	beq.n	40a656 <__udivmoddi4+0x166>
  40a5ac:	2100      	movs	r1, #0
  40a5ae:	e886 0021 	stmia.w	r6, {r0, r5}
  40a5b2:	4608      	mov	r0, r1
  40a5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a5b8:	fab3 f183 	clz	r1, r3
  40a5bc:	2900      	cmp	r1, #0
  40a5be:	f040 808e 	bne.w	40a6de <__udivmoddi4+0x1ee>
  40a5c2:	42ab      	cmp	r3, r5
  40a5c4:	d302      	bcc.n	40a5cc <__udivmoddi4+0xdc>
  40a5c6:	4282      	cmp	r2, r0
  40a5c8:	f200 80fa 	bhi.w	40a7c0 <__udivmoddi4+0x2d0>
  40a5cc:	1a84      	subs	r4, r0, r2
  40a5ce:	eb65 0503 	sbc.w	r5, r5, r3
  40a5d2:	2001      	movs	r0, #1
  40a5d4:	46ac      	mov	ip, r5
  40a5d6:	2e00      	cmp	r6, #0
  40a5d8:	d03f      	beq.n	40a65a <__udivmoddi4+0x16a>
  40a5da:	e886 1010 	stmia.w	r6, {r4, ip}
  40a5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a5e2:	b912      	cbnz	r2, 40a5ea <__udivmoddi4+0xfa>
  40a5e4:	2701      	movs	r7, #1
  40a5e6:	fbb7 f7f2 	udiv	r7, r7, r2
  40a5ea:	fab7 fe87 	clz	lr, r7
  40a5ee:	f1be 0f00 	cmp.w	lr, #0
  40a5f2:	d134      	bne.n	40a65e <__udivmoddi4+0x16e>
  40a5f4:	1beb      	subs	r3, r5, r7
  40a5f6:	0c3a      	lsrs	r2, r7, #16
  40a5f8:	fa1f fc87 	uxth.w	ip, r7
  40a5fc:	2101      	movs	r1, #1
  40a5fe:	fbb3 f8f2 	udiv	r8, r3, r2
  40a602:	0c25      	lsrs	r5, r4, #16
  40a604:	fb02 3318 	mls	r3, r2, r8, r3
  40a608:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a60c:	fb0c f308 	mul.w	r3, ip, r8
  40a610:	42ab      	cmp	r3, r5
  40a612:	d907      	bls.n	40a624 <__udivmoddi4+0x134>
  40a614:	19ed      	adds	r5, r5, r7
  40a616:	f108 30ff 	add.w	r0, r8, #4294967295
  40a61a:	d202      	bcs.n	40a622 <__udivmoddi4+0x132>
  40a61c:	42ab      	cmp	r3, r5
  40a61e:	f200 80d1 	bhi.w	40a7c4 <__udivmoddi4+0x2d4>
  40a622:	4680      	mov	r8, r0
  40a624:	1aed      	subs	r5, r5, r3
  40a626:	b2a3      	uxth	r3, r4
  40a628:	fbb5 f0f2 	udiv	r0, r5, r2
  40a62c:	fb02 5510 	mls	r5, r2, r0, r5
  40a630:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40a634:	fb0c fc00 	mul.w	ip, ip, r0
  40a638:	45a4      	cmp	ip, r4
  40a63a:	d907      	bls.n	40a64c <__udivmoddi4+0x15c>
  40a63c:	19e4      	adds	r4, r4, r7
  40a63e:	f100 33ff 	add.w	r3, r0, #4294967295
  40a642:	d202      	bcs.n	40a64a <__udivmoddi4+0x15a>
  40a644:	45a4      	cmp	ip, r4
  40a646:	f200 80b8 	bhi.w	40a7ba <__udivmoddi4+0x2ca>
  40a64a:	4618      	mov	r0, r3
  40a64c:	eba4 040c 	sub.w	r4, r4, ip
  40a650:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a654:	e79d      	b.n	40a592 <__udivmoddi4+0xa2>
  40a656:	4631      	mov	r1, r6
  40a658:	4630      	mov	r0, r6
  40a65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a65e:	f1ce 0420 	rsb	r4, lr, #32
  40a662:	fa05 f30e 	lsl.w	r3, r5, lr
  40a666:	fa07 f70e 	lsl.w	r7, r7, lr
  40a66a:	fa20 f804 	lsr.w	r8, r0, r4
  40a66e:	0c3a      	lsrs	r2, r7, #16
  40a670:	fa25 f404 	lsr.w	r4, r5, r4
  40a674:	ea48 0803 	orr.w	r8, r8, r3
  40a678:	fbb4 f1f2 	udiv	r1, r4, r2
  40a67c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40a680:	fb02 4411 	mls	r4, r2, r1, r4
  40a684:	fa1f fc87 	uxth.w	ip, r7
  40a688:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40a68c:	fb01 f30c 	mul.w	r3, r1, ip
  40a690:	42ab      	cmp	r3, r5
  40a692:	fa00 f40e 	lsl.w	r4, r0, lr
  40a696:	d909      	bls.n	40a6ac <__udivmoddi4+0x1bc>
  40a698:	19ed      	adds	r5, r5, r7
  40a69a:	f101 30ff 	add.w	r0, r1, #4294967295
  40a69e:	f080 808a 	bcs.w	40a7b6 <__udivmoddi4+0x2c6>
  40a6a2:	42ab      	cmp	r3, r5
  40a6a4:	f240 8087 	bls.w	40a7b6 <__udivmoddi4+0x2c6>
  40a6a8:	3902      	subs	r1, #2
  40a6aa:	443d      	add	r5, r7
  40a6ac:	1aeb      	subs	r3, r5, r3
  40a6ae:	fa1f f588 	uxth.w	r5, r8
  40a6b2:	fbb3 f0f2 	udiv	r0, r3, r2
  40a6b6:	fb02 3310 	mls	r3, r2, r0, r3
  40a6ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a6be:	fb00 f30c 	mul.w	r3, r0, ip
  40a6c2:	42ab      	cmp	r3, r5
  40a6c4:	d907      	bls.n	40a6d6 <__udivmoddi4+0x1e6>
  40a6c6:	19ed      	adds	r5, r5, r7
  40a6c8:	f100 38ff 	add.w	r8, r0, #4294967295
  40a6cc:	d26f      	bcs.n	40a7ae <__udivmoddi4+0x2be>
  40a6ce:	42ab      	cmp	r3, r5
  40a6d0:	d96d      	bls.n	40a7ae <__udivmoddi4+0x2be>
  40a6d2:	3802      	subs	r0, #2
  40a6d4:	443d      	add	r5, r7
  40a6d6:	1aeb      	subs	r3, r5, r3
  40a6d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40a6dc:	e78f      	b.n	40a5fe <__udivmoddi4+0x10e>
  40a6de:	f1c1 0720 	rsb	r7, r1, #32
  40a6e2:	fa22 f807 	lsr.w	r8, r2, r7
  40a6e6:	408b      	lsls	r3, r1
  40a6e8:	fa05 f401 	lsl.w	r4, r5, r1
  40a6ec:	ea48 0303 	orr.w	r3, r8, r3
  40a6f0:	fa20 fe07 	lsr.w	lr, r0, r7
  40a6f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40a6f8:	40fd      	lsrs	r5, r7
  40a6fa:	ea4e 0e04 	orr.w	lr, lr, r4
  40a6fe:	fbb5 f9fc 	udiv	r9, r5, ip
  40a702:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40a706:	fb0c 5519 	mls	r5, ip, r9, r5
  40a70a:	fa1f f883 	uxth.w	r8, r3
  40a70e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40a712:	fb09 f408 	mul.w	r4, r9, r8
  40a716:	42ac      	cmp	r4, r5
  40a718:	fa02 f201 	lsl.w	r2, r2, r1
  40a71c:	fa00 fa01 	lsl.w	sl, r0, r1
  40a720:	d908      	bls.n	40a734 <__udivmoddi4+0x244>
  40a722:	18ed      	adds	r5, r5, r3
  40a724:	f109 30ff 	add.w	r0, r9, #4294967295
  40a728:	d243      	bcs.n	40a7b2 <__udivmoddi4+0x2c2>
  40a72a:	42ac      	cmp	r4, r5
  40a72c:	d941      	bls.n	40a7b2 <__udivmoddi4+0x2c2>
  40a72e:	f1a9 0902 	sub.w	r9, r9, #2
  40a732:	441d      	add	r5, r3
  40a734:	1b2d      	subs	r5, r5, r4
  40a736:	fa1f fe8e 	uxth.w	lr, lr
  40a73a:	fbb5 f0fc 	udiv	r0, r5, ip
  40a73e:	fb0c 5510 	mls	r5, ip, r0, r5
  40a742:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40a746:	fb00 f808 	mul.w	r8, r0, r8
  40a74a:	45a0      	cmp	r8, r4
  40a74c:	d907      	bls.n	40a75e <__udivmoddi4+0x26e>
  40a74e:	18e4      	adds	r4, r4, r3
  40a750:	f100 35ff 	add.w	r5, r0, #4294967295
  40a754:	d229      	bcs.n	40a7aa <__udivmoddi4+0x2ba>
  40a756:	45a0      	cmp	r8, r4
  40a758:	d927      	bls.n	40a7aa <__udivmoddi4+0x2ba>
  40a75a:	3802      	subs	r0, #2
  40a75c:	441c      	add	r4, r3
  40a75e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40a762:	eba4 0408 	sub.w	r4, r4, r8
  40a766:	fba0 8902 	umull	r8, r9, r0, r2
  40a76a:	454c      	cmp	r4, r9
  40a76c:	46c6      	mov	lr, r8
  40a76e:	464d      	mov	r5, r9
  40a770:	d315      	bcc.n	40a79e <__udivmoddi4+0x2ae>
  40a772:	d012      	beq.n	40a79a <__udivmoddi4+0x2aa>
  40a774:	b156      	cbz	r6, 40a78c <__udivmoddi4+0x29c>
  40a776:	ebba 030e 	subs.w	r3, sl, lr
  40a77a:	eb64 0405 	sbc.w	r4, r4, r5
  40a77e:	fa04 f707 	lsl.w	r7, r4, r7
  40a782:	40cb      	lsrs	r3, r1
  40a784:	431f      	orrs	r7, r3
  40a786:	40cc      	lsrs	r4, r1
  40a788:	6037      	str	r7, [r6, #0]
  40a78a:	6074      	str	r4, [r6, #4]
  40a78c:	2100      	movs	r1, #0
  40a78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a792:	4618      	mov	r0, r3
  40a794:	e6f8      	b.n	40a588 <__udivmoddi4+0x98>
  40a796:	4690      	mov	r8, r2
  40a798:	e6e0      	b.n	40a55c <__udivmoddi4+0x6c>
  40a79a:	45c2      	cmp	sl, r8
  40a79c:	d2ea      	bcs.n	40a774 <__udivmoddi4+0x284>
  40a79e:	ebb8 0e02 	subs.w	lr, r8, r2
  40a7a2:	eb69 0503 	sbc.w	r5, r9, r3
  40a7a6:	3801      	subs	r0, #1
  40a7a8:	e7e4      	b.n	40a774 <__udivmoddi4+0x284>
  40a7aa:	4628      	mov	r0, r5
  40a7ac:	e7d7      	b.n	40a75e <__udivmoddi4+0x26e>
  40a7ae:	4640      	mov	r0, r8
  40a7b0:	e791      	b.n	40a6d6 <__udivmoddi4+0x1e6>
  40a7b2:	4681      	mov	r9, r0
  40a7b4:	e7be      	b.n	40a734 <__udivmoddi4+0x244>
  40a7b6:	4601      	mov	r1, r0
  40a7b8:	e778      	b.n	40a6ac <__udivmoddi4+0x1bc>
  40a7ba:	3802      	subs	r0, #2
  40a7bc:	443c      	add	r4, r7
  40a7be:	e745      	b.n	40a64c <__udivmoddi4+0x15c>
  40a7c0:	4608      	mov	r0, r1
  40a7c2:	e708      	b.n	40a5d6 <__udivmoddi4+0xe6>
  40a7c4:	f1a8 0802 	sub.w	r8, r8, #2
  40a7c8:	443d      	add	r5, r7
  40a7ca:	e72b      	b.n	40a624 <__udivmoddi4+0x134>

0040a7cc <__aeabi_idiv0>:
  40a7cc:	4770      	bx	lr
  40a7ce:	bf00      	nop
  40a7d0:	454c4449 	.word	0x454c4449
  40a7d4:	00000000 	.word	0x00000000
  40a7d8:	09632509 	.word	0x09632509
  40a7dc:	25097525 	.word	0x25097525
  40a7e0:	75250975 	.word	0x75250975
  40a7e4:	00000a0d 	.word	0x00000a0d
  40a7e8:	20726d54 	.word	0x20726d54
  40a7ec:	00637653 	.word	0x00637653
  40a7f0:	51726d54 	.word	0x51726d54
  40a7f4:	00000000 	.word	0x00000000
  40a7f8:	00007852 	.word	0x00007852
  40a7fc:	00005854 	.word	0x00005854
  40a800:	00000010 	.word	0x00000010
  40a804:	400e1000 	.word	0x400e1000
  40a808:	0000030b 	.word	0x0000030b
  40a80c:	00200000 	.word	0x00200000
  40a810:	400e0e00 	.word	0x400e0e00
  40a814:	0000000a 	.word	0x0000000a
  40a818:	58323025 	.word	0x58323025
  40a81c:	00000020 	.word	0x00000020
  40a820:	00000d0a 	.word	0x00000d0a
  40a824:	30257830 	.word	0x30257830
  40a828:	203a5838 	.word	0x203a5838
  40a82c:	00000000 	.word	0x00000000
  40a830:	58323025 	.word	0x58323025
  40a834:	58323025 	.word	0x58323025
  40a838:	58323025 	.word	0x58323025
  40a83c:	58323025 	.word	0x58323025
  40a840:	00000020 	.word	0x00000020
  40a844:	58323025 	.word	0x58323025
  40a848:	00000000 	.word	0x00000000
  40a84c:	00002020 	.word	0x00002020
  40a850:	72570d0a 	.word	0x72570d0a
  40a854:	20657469 	.word	0x20657469
  40a858:	756e2061 	.word	0x756e2061
  40a85c:	7265626d 	.word	0x7265626d
  40a860:	646e6120 	.word	0x646e6120
  40a864:	65727020 	.word	0x65727020
  40a868:	45207373 	.word	0x45207373
  40a86c:	5245544e 	.word	0x5245544e
  40a870:	20726f20 	.word	0x20726f20
  40a874:	43415053 	.word	0x43415053
  40a878:	0d0a2145 	.word	0x0d0a2145
  40a87c:	00000000 	.word	0x00000000
  40a880:	25270d0a 	.word	0x25270d0a
  40a884:	6e202763 	.word	0x6e202763
  40a888:	6120746f 	.word	0x6120746f
  40a88c:	6d756e20 	.word	0x6d756e20
  40a890:	20726562 	.word	0x20726562
  40a894:	7320726f 	.word	0x7320726f
  40a898:	286e6769 	.word	0x286e6769
  40a89c:	292d2f2b 	.word	0x292d2f2b
  40a8a0:	000d0a21 	.word	0x000d0a21
  40a8a4:	68540d0a 	.word	0x68540d0a
  40a8a8:	756e2065 	.word	0x756e2065
  40a8ac:	7265626d 	.word	0x7265626d
  40a8b0:	76616820 	.word	0x76616820
  40a8b4:	6f742065 	.word	0x6f742065
  40a8b8:	20656220 	.word	0x20656220
  40a8bc:	77746562 	.word	0x77746562
  40a8c0:	206e6565 	.word	0x206e6565
  40a8c4:	61206425 	.word	0x61206425
  40a8c8:	2520646e 	.word	0x2520646e
  40a8cc:	000d0a64 	.word	0x000d0a64
  40a8d0:	74490d0a 	.word	0x74490d0a
  40a8d4:	20736920 	.word	0x20736920
  40a8d8:	20746f6e 	.word	0x20746f6e
  40a8dc:	65682061 	.word	0x65682061
  40a8e0:	65646178 	.word	0x65646178
  40a8e4:	616d6963 	.word	0x616d6963
  40a8e8:	6863206c 	.word	0x6863206c
  40a8ec:	63617261 	.word	0x63617261
  40a8f0:	21726574 	.word	0x21726574
  40a8f4:	00000d0a 	.word	0x00000d0a

0040a8f8 <pinsLeds>:
  40a8f8:	00800000 400e0e00 0000050a 00000200     .......@........
  40a908:	400e1200 0000050c                       ...@....

0040a910 <numLeds>:
  40a910:	00000002 74697845 20676e69 68746977     ....Exiting with
  40a920:	61747320 20737574 0a2e6425 00000000      status %d......
  40a930:	64497764 36203c20 00000033 6c2f2e2e     dwId < 63...../l
  40a940:	68636269 735f7069 37766d61 756f732f     ibchip_samv7/sou
  40a950:	2f656372 2e636d70 00000063 64497764     rce/pmc.c...dwId
  40a960:	49203c20 45505f44 48504952 554f435f      < ID_PERIPH_COU
  40a970:	0000544e                                NT..

0040a974 <__func__.11877>:
  40a974:	5f434d50 62616e45 6550656c 68706972     PMC_EnablePeriph
  40a984:	6c617265 00000000                       eral....

0040a98c <__func__.11881>:
  40a98c:	5f434d50 61736944 50656c62 70697265     PMC_DisablePerip
  40a99c:	61726568 0000006c                       heral...

0040a9a4 <__func__.11903>:
  40a9a4:	5f434d50 65507349 68706972 62616e45     PMC_IsPeriphEnab
  40a9b4:	0064656c 7566202c 6974636e 203a6e6f     led., function: 
  40a9c4:	00000000 65737361 6f697472 2522206e     ....assertion "%
  40a9d4:	66202273 656c6961 66203a64 20656c69     s" failed: file 
  40a9e4:	22732522 696c202c 2520656e 25732564     "%s", line %d%s%
  40a9f4:	00000a73                                s...

0040a9f8 <_global_impure_ptr>:
  40a9f8:	20400010 33323130 37363534 42413938     ..@ 0123456789AB
  40aa08:	46454443 00000000 33323130 37363534     CDEF....01234567
  40aa18:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40aa28:	0000296c                                l)..

0040aa2c <blanks.7217>:
  40aa2c:	20202020 20202020 20202020 20202020                     

0040aa3c <zeroes.7218>:
  40aa3c:	30303030 30303030 30303030 30303030     0000000000000000
  40aa4c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40aa5c:	00000030                                0...

0040aa60 <blanks.7238>:
  40aa60:	20202020 20202020 20202020 20202020                     

0040aa70 <zeroes.7239>:
  40aa70:	30303030 30303030 30303030 30303030     0000000000000000
  40aa80:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40aa90:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040aaa0 <__mprec_bigtens>:
  40aaa0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40aab0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40aac0:	7f73bf3c 75154fdd                       <.s..O.u

0040aac8 <__mprec_tens>:
  40aac8:	00000000 3ff00000 00000000 40240000     .......?......$@
  40aad8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40aae8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40aaf8:	00000000 412e8480 00000000 416312d0     .......A......cA
  40ab08:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40ab18:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40ab28:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40ab38:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40ab48:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40ab58:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40ab68:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40ab78:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40ab88:	79d99db4 44ea7843                       ...yCx.D

0040ab90 <p05.6055>:
  40ab90:	00000005 00000019 0000007d              ........}...

0040ab9c <_ctype_>:
  40ab9c:	20202000 20202020 28282020 20282828     .         ((((( 
  40abac:	20202020 20202020 20202020 20202020                     
  40abbc:	10108820 10101010 10101010 10101010      ...............
  40abcc:	04040410 04040404 10040404 10101010     ................
  40abdc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40abec:	01010101 01010101 01010101 10101010     ................
  40abfc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40ac0c:	02020202 02020202 02020202 10101010     ................
  40ac1c:	00000020 00000000 00000000 00000000      ...............
	...

0040aca0 <_init>:
  40aca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40aca2:	bf00      	nop
  40aca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40aca6:	bc08      	pop	{r3}
  40aca8:	469e      	mov	lr, r3
  40acaa:	4770      	bx	lr

0040acac <__init_array_start>:
  40acac:	00407469 	.word	0x00407469

0040acb0 <__frame_dummy_init_array_entry>:
  40acb0:	00400165                                e.@.

0040acb4 <_fini>:
  40acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40acb6:	bf00      	nop
  40acb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40acba:	bc08      	pop	{r3}
  40acbc:	469e      	mov	lr, r3
  40acbe:	4770      	bx	lr

0040acc0 <__fini_array_start>:
  40acc0:	00400141 	.word	0x00400141
