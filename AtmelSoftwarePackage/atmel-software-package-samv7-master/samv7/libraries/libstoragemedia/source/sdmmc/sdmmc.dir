/* ---------------------------------------------------------------------------- */
/*                  Atmel Microcontroller Software Support                      */
/*                       SAM Software Package License                           */
/* ---------------------------------------------------------------------------- */
/* Copyright (c) 2015, Atmel Corporation                                        */
/*                                                                              */
/* All rights reserved.                                                         */
/*                                                                              */
/* Redistribution and use in source and binary forms, with or without           */
/* modification, are permitted provided that the following condition is met:    */
/*                                                                              */
/* - Redistributions of source code must retain the above copyright notice,     */
/* this list of conditions and the disclaimer below.                            */
/*                                                                              */
/* Atmel's name may not be used to endorse or promote products derived from     */
/* this software without specific prior written permission.                     */
/*                                                                              */
/* DISCLAIMER:  THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR   */
/* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE   */
/* DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,      */
/* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT */
/* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,  */
/* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF    */
/* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING         */
/* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, */
/* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                           */
/* ---------------------------------------------------------------------------- */

/**
 * \dir sdmmc
 *
 * This directory contains sdmmc drivers
 */

/**
 * \page sdmmc_lib SD/MMC Library
 *
 * \section Purpose
 *
 * This page describes the library to support SD/MMC card.
 *
 * \section Contents
 * - Scope
 *   - \subpage sdmmc_identify
 *   - SD/MMC Data Transfer
 *     - \subpage sdmmc_write_op
 *     - \subpage sdmmc_read_op
 *   - SD/MMC Card Types
 *     - \subpage sdmmc_sdhc
 *     - \subpage sdmmc_sdio
 * - Hardware access layer
 *   - \subpage sdmmc_cmd
 * - \subpage sdmmc_drv
 */

/**
 *  \page sdmmc_identify SD/MMC Initialization and Identification
 * 
 *  \section Purpose
 *  
 *  sdcard sd mode initialization and identification sequence
 * 
 *  \section Description
 *  - Host write bit 3 of function 0, register 6 to reset SDIO card (if there is, using Cmd52).
 *  - Host sends Cmd0 to do card reset, card is in "idle state".
 *  - Host sends Cmd8 and checks the response of the card, only sdcard supports physical
 *     layer version 2.00 will response correctly to Cmd8, and this command is mandatory to be
 *     sent before ACmd41 for sdcard which support physical layer version 2.00, to enable new
 *     functions or to validate a dual-voltage card.
 *        - The response result is saved for future branch after "Host sends Cmd5..".
 *        - refer to "If Cmd8 response ok" branch for the initialize of sdcard 2.0.
 *        - refer to "If Cmd8 response fail" branch for the initialize of sdcard 1.x, mmc card, sdcard2.0
 *           with invalid voltage.
 *  - Host sends Cmd5 with argument 0 and checks the response of the card, only SDIO card supports this command.
 *     It starts SDIO initialize. The card returns number of functions in response.
 *        - refer to "If Cmd5 response ok" branch for the initialize of SDIO card.
 *  - If Cmd5 response ok
 *        - Host sends Cmd5 with argument "voltage range" to power up the SDIO card.
 *        - If the response failed, it means the card does not match the voltage desired
 *          by the host, SDIO type saved as false.
 *        - If the response ok, SDIO type saved as true, continue to next step.
 *  - If Cmd8 response ok
 *        - Host sends ACmd41* with argument "HCS" equal to "1". 
 *        - If the response to ACmd41 failed, it means the card does not match the voltage 
 *           desired by the host, SD card type saved as true.
 *        - If the response with "CCS" equal to "1", the card is a version 2.0 high capacity sdcard, 
 *           refer to "Card Initialize" for the succeeding initialize sequence.
 *        - If the response with "CCS" equal to "0", the card is a version 2.0 standard capacity sdcard.
 *           refer to "Card Initialize" for the succeeding initialize sequence.
 *  - If Cmd8 response fail
 *        - Host sends ACmd41* argument "HCS" equal to "0".
 *        - If the response to ACmd41 ok, the card is a version 1.x sdcard, refer to "Card Initialize" for 
 *           the succeeding initialize sequence.
 *        - If the response to ACmd41 fails
 *           - If SDIO type is true, refer to "Card Initialize".
 *           - Host sends Cmd0 to reset card.
 *           - Host sends Cmd1 with argument "hdSupport" equal to "1" to card.
 *           - If card has response to Cmd1, the card is a MMC card, refer to "Card Initialize" for the 
 *              succeeding initialize sequence. Furthermore, if the response with bit[30:29] equal to 
 *              "00" or "11", the card is a High Density MMC, else the card is a standard MMC.
 *           - If card has no response to Cmd1, the card is either an unknown card or a card does 
 *              not match host's voltage, the initialize ends.
 *  - Card Initialize
 *        - If SD or MMC type is true, Host sends Cmd2 to get the its unique card identification number (CID).
 *        - Host sends Cmd3 to ask the card to publish a new relative card address (RCA), once the 
 *           RCA is received the card state changes to the "stand-by state".
 *        - If SD or MMC type is true, Host sends Cmd9 to get the Card Specific Data (CSD).
 *        - At this stage, the initialization and identification process is over, the following steps are done 
 *           for the sdcard's succeeding operation.
 *        - SD(HC) or MMC(HD) memory cards
 *           - Host sends Cmd13 to obtain the card status, make sure the card is "ready-for-data".
 *           - Host sends Cmd7 to transit card in "transfer state".
 *           - If card is a sdcard*, hosts send ACmd6 to set bus to 4-wire mode.
 *           - If card is a mmc card, the bus is set as 1-wire mode.
 *        - SDIO card
 *           - the bus is set as 1-wire mode.
 * 
 *      \note Send Cmd55 before send ACmd41.
 *      \note sdcard include ver 1.x sdcard, ver2.0 standard capacity sdcard, ver2.0 high capacity sdcard
 */

/**
 *  \page sdmmc_write_op SD/MMC Write
 * 
 *  \section Purpose
 *  
 *  sdcard sd mode write process
 * 
 *  \section Description
 *  - Make sure sdcard is under "transfer state", if the sdcard is under other state, host will send
 *     Cmd12 to stop the current operation and to transit sdcard to "stand-by state".
 *  - Host sends Cmd13 to check sdcard's status, to make sure sdcard is "ready-for-data".
 *  - Host sends Cmd25 to do multiple blocks write, the address here is different between high capacity
 *     sdcard and normal sdcard, the address of SDHC is equal to the block number, while normal sdcard's
 *     address is equal to  block number times 512.
 * 
 *  \section wr_optimize Write Optimization
 *  - To optimize the write multiple blocks, try to keep the sdcard in the "rcv state" as long as possible.
 *     after send WRITE_MULTIPLE_BLOCK command, set the block number in the MCI_BLKR as 0, each time a 
 *     new write start, do not re-send the WRITE_MULTIPLE_BLOCK command, just re-configure the PDC. In 
 *     this case, host does not have to send STOP_TRANSMISSION to transfer the sdcard's state and the
 *     performance is optimized.
 *  - MoveToTransferState will check the state of the sdcard, and send STOP_TRANSMISSION if need
 *    to transfer state. Normally this function is called between the state tranfer.
 *  - ContinuousWrite will be called if WRITE_MULTIPLE_BLOCK already been sent and this function
 *     will not re-send the write command, but will re-configure PDC accordingly.
 */

/**
 *  \page sdmmc_read_op SD/MMC Read
 * 
 *  \section Purpose
 *  
 *  sdcard sd mode read process
 * 
 *  \section Description
 *  - Make sure sdcard is under "transfer state", if the sdcard is under other state, host will send
 *     Cmd12 to stop the current operation and to transit sdcard to "stand-by state".
 *  - Host sends Cmd13 to check sdcard's status, to make sure sdcard is "ready-for-data".
 *  - Host sends Cmd18 to do multiple blocks read, the address here is different between high capacity
 *     sdcard and normal sdcard, the address of SDHC is equal to the block number, while normal sdcard's
 *     address is equal to  block number times 512.
 *  
 *  \section rd_optimize Read Optimization
 *  - To optimize the read multiple blocks, try to keep the sdcard in the "data state" as long as possible.
 *     after send READ_MULTIPLE_BLOCK command, set the block number in the MCI_BLKR as 0, each time a 
 *     new read start, do not re-send the READ_MULTIPLE_BLOCK command, just re-configure the PDC. In this
 *     case, host does not have to send STOP_TRANSMISSION to transfer the sdcard's state and the
 *     performance is optimized.
 *  - MoveToTransferState will check the state of the sdcard, and send STOP_TRANSMISSION if need
 *    to transfer state. Normally this function is called between the state tranfer.
 *  - ContinuousRead will be called if READ_MULTIPLE_BLOCK already been sent and this function
 *     will not re-send the read command, but will re-configure PDC accordingly.
 */

/**
 *  \page sdmmc_sdhc SDHC
 * 
 *  \section Purpose
 *  
 *  highlight of sdhc
 * 
 *  \section sdhc_identify Sdhc initialization and identification
 * 
 *    - Refer to page "sdcard sd mode initialization and identification" for the initialization and identification
 *        sequence of a sdhc.
 *  
 *  \section sdhc_diff Functional difference between sdhc and standard capacity sdcard
 * 
 *  - Command argument is different:
 *    - Sdhc uses block address format in memory access commands*, block length is fixed to 512 bytes.
 *    - Standard capacity sdcard uses byte address format in memory access commands, block length
 *        is defined in Cmd16.
 *  - Partial access and misalign access are disabled in sdhc as the block address is used.
 *  - Sdhc does not support write-protected commands (Cmd28, Cmd29, Cmd30).
 * 
 *  \note Memory access commands means block read commands (CMD17, CMD18), block write commands 
 *    (CMD24, CMD25), and block erase commands (CMD32, CMD33).
 * 
 */

/** \page sdmmc_sdio SDIO
    \section Purpose

    Highlight of SDIO

    \section sdio_init_identiy SDIO initialization and identification
    
    - Refer to page "sdcard sd mode identification and identification" for the initialization and identification
      sequence of a SDIO.
    
    
 */